[
    {
        "id": "aa6a51c7aa0d699f",
        "type": "tab",
        "label": "Flow 16",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3fabcbfb312931a1",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 1 Detail",
        "info": "",
        "x": 170,
        "y": 140,
        "wires": []
    },
    {
        "id": "5b5205fc2d7aaba4",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 1 stop",
        "func": "var down;\nconst tableno=28\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"MACHINE START1\"]==false){\n   \n    const query=`INSERT INTO ${tablename}(\n\t\"Datetime\", \"ACTUAL_LENGTH\", \"CABLE_DIAMETER\",\n     \"EXTRUDER_45MM_RPM_ACT\", \"EXTRUDER_80MM_RPM_ACT\", \"LENGTH_SET_METER\",\n      \"LINE_SPEED_ACT\", \"LINE_SPEED_MAX\", \"MACHINE_START\", \"REASON_OF_STOP\", \n      \"RECIPE_NAME\", \"RECIPE_RECORD_NAME\", \"DOWN_TIME\")\n\tVALUES (${datetime}, ${msg.payload[\"LENGTH1\"]}, ${msg.payload[\"CABLE_DIAMETER1\"]}, ${msg.payload[\"45MM_EXTRUDER_RPM_ACT1\"]},\n     ${msg.payload[\"80MM_EXTRUDER_RPM_ACT1\"]}, ${msg.payload[\"LENGTH_SET_METER1\"]}, ${0}, ${msg.payload[\"Actual_LineSpeed max1\"]}, ${msg.payload[\"MACHINE START1\"]}, ${msg.payload[\"REASON OF STOP1\"]}, '${msg.payload[\"RECIPE_NAME1\"]}', '${msg.payload[\"RECIPE_RECORD_NAME1\"]}', ${0});`\n\n//     const values1 = [   \n//     { dataPointId: \"1628141625886\", qualityCode: \"1\", value: msg.payload[\"REASON OF STOP1\"].toString()},//REASON_OF_STOP\n//     { dataPointId: \"1628141619349\", qualityCode: \"1\", value: msg.payload[\"MACHINE START1\"].toString() },//MACHINE_START\n//     { dataPointId: \"1628141609886\", qualityCode: \"1\", value: msg.payload[\"LENGTH1\"].toString() },//ACTUAL_LENGTH\n//     { dataPointId: \"1628141601590\", qualityCode: \"1\", value: msg.payload[\"45MM_EXTRUDER_RPM_ACT1\"].toString() },//EXTRUDER_45MM_RPM_ACT\n//     { dataPointId: \"1628141595207\", qualityCode: \"1\", value: msg.payload[\"80MM_EXTRUDER_RPM_ACT1\"].toString() },//EXTRUDER_80MM_RPM_ACT\n//     { dataPointId: \"1628141587382\", qualityCode: \"1\", value: msg.payload[\"RECIPE_RECORD_NAME1\"].toString() },//RECIPE_RECORD_NAME\n//     { dataPointId: \"1628141580439\", qualityCode: \"1\", value: msg.payload[\"RECIPE_NAME1\"].toString() },//RECIPE_NAME\n//     { dataPointId: \"1628141573462\", qualityCode: \"1\", value: msg.payload[\"LENGTH_SET_METER1\"].toString() },//LENGTH_SET_METER\t\n//     { dataPointId: \"1628141566461\", qualityCode: \"1\", value: msg.payload[\"CABLE_DIAMETER1\"].toString() },//CABLE_DIAMETER\n//     { dataPointId: \"1628141560077\", qualityCode: \"1\", value: msg.payload[\"Actual_LineSpeed max1\"].toString() },//LINE_SPEED_MAX\n//     { dataPointId: \"1628141546625\", qualityCode: \"1\", value: \"0\" },//LINE_SPEED_ACT\n//     { dataPointId: \"1629542057302\", qualityCode: \"1\", value: \"0\" }//DownTime\n//    ];\n   global.set(\"insulation1length\" ,msg.payload[\"LENGTH1\"] );\n//    msg._time = new Date();\n// msg.payload = values1;\nmsg.query=query\nreturn msg;\n}\n    \n    \n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "2989116419c2e62f",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 1-detail",
        "func": "var down;\nconst tableno=28\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"MACHINE START1\"]==true){\n    down= 0;\n    global.set(\"Insulation1down\",down);\n    \n    const query = `INSERT INTO ${tablename}(\n\t\"Datetime\", \"ACTUAL_LENGTH\", \"CABLE_DIAMETER\",\n     \"EXTRUDER_45MM_RPM_ACT\", \"EXTRUDER_80MM_RPM_ACT\", \"LENGTH_SET_METER\",\n      \"LINE_SPEED_ACT\", \"LINE_SPEED_MAX\", \"MACHINE_START\", \"REASON_OF_STOP\", \n      \"RECIPE_NAME\", \"RECIPE_RECORD_NAME\", \"DOWN_TIME\")\n\tVALUES (${datetime}, ${msg.payload[\"LENGTH1\"]}, ${msg.payload[\"CABLE_DIAMETER1\"]}, ${msg.payload[\"45MM_EXTRUDER_RPM_ACT1\"]},\n     ${msg.payload[\"80MM_EXTRUDER_RPM_ACT1\"]}, ${msg.payload[\"LENGTH_SET_METER1\"]}, ${msg.payload[\"Actual_LineSpeed1\"]}, ${msg.payload[\"Actual_LineSpeed max1\"]}, ${msg.payload[\"MACHINE START1\"]}, ${msg.payload[\"REASON OF STOP1\"]},\n    '${msg.payload[\"RECIPE_NAME1\"]}', '${msg.payload[\"RECIPE_RECORD_NAME1\"]}', ${down});`\n\n//     const values1 = [\n//     { dataPointId: \"1628141625886\", qualityCode: \"1\", value: msg.payload[\"REASON OF STOP1\"].toString()},//REASON_OF_STOP\n//     { dataPointId: \"1628141619349\", qualityCode: \"1\", value: msg.payload[\"MACHINE START1\"].toString() },//MACHINE_START\n//     { dataPointId: \"1628141609886\", qualityCode: \"1\", value: msg.payload[\"LENGTH1\"].toString() },//ACTUAL_LENGTH\n//     { dataPointId: \"1628141601590\", qualityCode: \"1\", value: msg.payload[\"45MM_EXTRUDER_RPM_ACT1\"].toString() },//EXTRUDER_45MM_RPM_ACT\n//     { dataPointId: \"1628141595207\", qualityCode: \"1\", value: msg.payload[\"80MM_EXTRUDER_RPM_ACT1\"].toString() },//EXTRUDER_80MM_RPM_ACT\n//     { dataPointId: \"1628141587382\", qualityCode: \"1\", value: msg.payload[\"RECIPE_RECORD_NAME1\"].toString() },//RECIPE_RECORD_NAME\n//     { dataPointId: \"1628141580439\", qualityCode: \"1\", value: msg.payload[\"RECIPE_NAME1\"].toString() },//RECIPE_NAME\n//     { dataPointId: \"1628141573462\", qualityCode: \"1\", value: msg.payload[\"LENGTH_SET_METER1\"].toString() },//LENGTH_SET_METER\t\n//     { dataPointId: \"1628141566461\", qualityCode: \"1\", value: msg.payload[\"CABLE_DIAMETER1\"].toString() },//CABLE_DIAMETER\n//     { dataPointId: \"1628141560077\", qualityCode: \"1\", value: msg.payload[\"Actual_LineSpeed max1\"].toString() },//LINE_SPEED_MAX\n//     { dataPointId: \"1628141546625\", qualityCode: \"1\", value: msg.payload[\"Actual_LineSpeed1\"].toString() },//LINE_SPEED_ACT\n//     { dataPointId: \"1629542057302\", qualityCode: \"1\", value: down.toString() }\n//    ];\n   global.set(\"insulation1length\" ,msg.payload[\"LENGTH1\"] );\n//    msg._time = new Date();\n// msg.payload = values1;\nreturn msg;\n}\n    \n    \n\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "1be77e2e3b9da4d5",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 1-Ping",
        "func": "const tableno=28\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload == false){\n\n const query = `INSERT INTO ${tablename}(\n\t\"Datetime\", \"ACTUAL_LENGTH\", \"CABLE_DIAMETER\",\n     \"EXTRUDER_45MM_RPM_ACT\", \"EXTRUDER_80MM_RPM_ACT\", \"LENGTH_SET_METER\",\n      \"LINE_SPEED_ACT\", \"LINE_SPEED_MAX\", \"MACHINE_START\", \"REASON_OF_STOP\", \n      \"RECIPE_NAME\", \"RECIPE_RECORD_NAME\", \"DOWN_TIME\")\n\tVALUES (${datetime}, ${0}, ${0}, ${0},\n     ${0}, ${0}, ${0}, ${0}, ${0}, ${7},\n    'none', 'none', ${0});`\n\n    msg.query=query\n    return msg;\n    \n\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "a4ff35fc66bbda84",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Save & log Shift Lenght ",
        "func": "// When shift change file is not existing, error node shall trigger. First Data after deployment will be uploaded to Postgresql withour comaprision to previous shift data.\nvar current = JSON.parse(msg.localStorage.data);\nconst tableno=23\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n\nvar wiresize = 0.0;\nif(current[\"CABLE_DIAMETER1\"] >= 2.24 && current[\"CABLE_DIAMETER1\"] < 2.37 ){\n    wiresize = 0.75;\n}\nelse if(current[\"CABLE_DIAMETER1\"] >= 2.40 && current[\"CABLE_DIAMETER1\"] < 2.58 ){\n    wiresize = 1.00;\n}\nelse if(current[\"CABLE_DIAMETER1\"] >= 2.86 && current[\"CABLE_DIAMETER1\"] < 3.00 ){\n    wiresize = 1.50;\n}\nelse if(current[\"CABLE_DIAMETER1\"] >= 3.48 && current[\"CABLE_DIAMETER1\"] < 3.65 ){\n    wiresize = 2.50;\n}\nelse if(current[\"CABLE_DIAMETER1\"] >= 4.02 && current[\"CABLE_DIAMETER1\"] < 4.12 ){\n    wiresize = 4.00;\n}\nelse if(current[\"CABLE_DIAMETER1\"] >= 4.52 && current[\"CABLE_DIAMETER1\"] < 4.65 ){\n    wiresize = 6.00;\n}\n\n\nif(msg.hasOwnProperty(\"error\")){\n    msg.payload = current;\n    node.send([msg, null]);\n    //Send Shift change data to Postgresql when first shift change occurs after deployment.\n     const query=`INSERT INTO ${tablename}(\n\t \"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${current[\"LENGTH1\"]}, ${current[\"MACHINE START1\"]}, ${wiresize});`\n    msg.query=query\n    node.send([null, msg])\n }\n // When shift change data is available, current and shift data shall be compared and if found != then data shall be uploaded to Postgresql.\n else{\n     var lshift = JSON.parse(msg.payload);\n     //var current = msg.shiftchangedata;\n     var lshiftlen = Number(lshift[\"LENGTH1\"]);\n     var currentlen = Number(current[\"LENGTH1\"]);\n     msg.payload = lshiftlen;\n     if (lshiftlen != currentlen){\n         var length = Number(currentlen) - Number(lshiftlen);\n\n         const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${length}, ${current[\"MACHINE START1\"]}, ${wiresize});`\n         msg.query = query\n        node.send([null, msg]) // Send to Postgresql.\n        //msg = null;\n        msg.payload = current;\n        node.send([msg,null]) // Send to file for storing last shift data.\n     }\n     //return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 400,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Shift Time Data)"
        ]
    },
    {
        "id": "de9b760f163660c7",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Send data to Postgresql",
        "func": "var previous = msg.spoolchange[\"previous\"];\nconst tableno=23\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\nvar wiresize = 0.0;\nif(previous[\"CABLE_DIAMETER1\"] >= 2.24 && previous[\"CABLE_DIAMETER1\"] < 2.37 ){\n    wiresize = 0.75;\n}\nelse if(previous[\"CABLE_DIAMETER1\"] >= 2.40 && previous[\"CABLE_DIAMETER1\"] < 2.58 ){\n    wiresize = 1.00;\n}\nelse if(previous[\"CABLE_DIAMETER1\"] >= 2.86 && previous[\"CABLE_DIAMETER1\"] < 3.00 ){\n    wiresize = 1.50;\n}\nelse if(previous[\"CABLE_DIAMETER1\"] >= 3.48 && previous[\"CABLE_DIAMETER1\"] < 3.65 ){\n    wiresize = 2.50;\n}\nelse if(previous[\"CABLE_DIAMETER1\"] >= 4.02 && previous[\"CABLE_DIAMETER1\"] < 4.12 ){\n    wiresize = 4.00;\n}\nelse if(previous[\"CABLE_DIAMETER1\"] >= 4.52 && previous[\"CABLE_DIAMETER1\"] < 4.65 ){\n    wiresize = 6.00;\n}\n// When shift last data file is not existing, error node shall give the msg with all key:value pair.\nif(msg.hasOwnProperty(\"error\")){\n    // Send summary data to mindsphere for previous value at first spooler change after deployment. without subtraction of previous shift data.\n    const query=`INSERT INTO ${tablename}(\n\t \"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${previous[\"LENGTH1\"]}, ${previous[\"MACHINE START1\"]}, ${wiresize});`\n    msg.query=query\n    node.send([null, msg])\n    msg.payload = previous;\n    node.send([msg, null])\n \n}\nelse{\n    msg.payload = JSON.parse(msg.payload)\n    //When first spool change occurs after shift change subtract shift data from current spool lenght.\n    var lshiftlen = Number(msg.payload[\"LENGTH1\"]);\n    var previouslen = Number(previous[\"LENGTH1\"]);\n    var spoollen = previouslen - lshiftlen;\n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${spoollen}, ${previous[\"MACHINE START1\"]}, ${wiresize});`\n    msg.query = query\n    node.send([null, msg])\n    previous[\"LENGTH1\"] = 0;\n    msg.payload = previous;\n    node.send([msg, null])\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 360,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Spool change data)"
        ]
    },
    {
        "id": "6118859cc132f3fa",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 1 Summary",
        "info": "",
        "x": 180,
        "y": 320,
        "wires": []
    },
    {
        "id": "201c0be6416fa69e",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Global Data",
        "func": "var fun = global.get(\"PolycabGlobalFuncation\");\nif (fun == undefined) {\n    var setFuncations = {\n        \"globalDate\": function () {\n            var date = new Date();\n            date = date.getFullYear() + '-' +\n                ('00' + (date.getMonth() + 1)).slice(-2) + '-' +\n                ('00' + date.getDate()).slice(-2) + ' ' +\n                ('00' + date.getHours()).slice(-2) + ':' +\n                ('00' + date.getMinutes()).slice(-2) + ':' +\n                ('00' + date.getSeconds()).slice(-2);\n \n            return date;\n \n        },\n \n        \"tableName\": function (tId) {\n           \n            switch(tId){\n \n                //PDB\n                case 1: return `\"LD_PDB1\"`;\n                case 2: return `\"LD_PDB2\"`;\n                case 3: return `\"LD_PDB3\"`;\n                case 4: return `\"LD_PDB4\"`;\n                \n                //Buncher\n                case 5: return `\"LD_Unit7_Buncher_1_Interval\"`;\n                case 6: return `\"LD_Unit7_Buncher_2_Interval\"`;\n                case 7: return `\"LD_Unit7_Buncher_3_Interval\"`;\n                case 8: return `\"LD_Unit7_Buncher_4_Interval\"`;\n                case 9: return `\"LD_Unit7_Buncher_5_Interval\"`;\n                case 10: return `\"LD_Unit7_Buncher_6_Interval\"`;\n                case 11: return `\"LD_Unit7_Buncher_DOWN_Interval\"`;\n                \n                //Coiling\n              \n                case 12: return `\"LD_Unit7_Coiling_1_Interval\"`;\n                case 13: return `\"LD_Unit7_Coiling_2_Interval\"`;\n                case 14: return `\"LD_Unit7_Coiling_3_Interval\"`;\n                case 15: return `\"LD_Unit7_Coiling_4_Interval\"`;\n                case 16: return `\"LD_Unit7_Coiling_5_Interval\"`;\n                case 17: return `\"LD_Unit7_Coiling_6_Interval\"`;\n                case 18: return `\"LD_Unit7_Coiling_7_Interval`;\n                case 19: return `\"LD_Unit7_Coiling_8_Interval`;\n                case 20: return `\"LD_Unit7_Coiling_9_Interval`;\n                case 21: return `\"LD_Unit7_Coiling_10_Interval\"`;\n                case 22: return `\"LD_Unit7_Coiling_11_Interval\"`;\n                case 23: return `\"LD_Unit7_Coiling_12_Interval\"`;\n                case 24: return `\"LD_Unit7_Coiling_13_Interval\"`;\n                case 25: return `\"LD_Unit7_Coiling_14_Interval\"`;\n                case 26: return `\"LD_Unit7_Coiling_15_Interval\"`;\n                case 27: return `\"LD_Unit7_Coiling_16_Interval\"`;\n\n                //Insulation\n                case 28: return `\"LD_Unit7_Insulation_1_Interval\"`;\n                case 29: return `\"LD_Unit7_Insulation_2_Interval\"`;\n                case 30: return `\"LD_Unit7_Insulation_3_Interval\"`;\n                case 31: return `\"LD_Unit7_Insulation_4_Interval\"`;\n                case 32: return `\"LD_Unit7_Insulation_5_Interval\"`;\n                case 33: return `\"LD_Unit7_Insulation_6_Interval\"`;\n                case 34: return `\"LD_Unit7_Insulation_7_Interval\"`;\n                case 35: return `\"LD_Unit7_Insulation_DOWN_Interval\"`;\n                //MWD\n                case 37: return `\"LD_Unit7_MMW24_Interval\"`;\n                case 38: return `\"LD_Unit7_MMW32_1_Interval\"`;\n                case 39: return `\"LD_Unit7_MMW32_2_Interval\"`;\n                case 40: return `\"LD_Unit7_MMW32_3_Interval\"`;\n\n            }\n \n        },\n \n         \"sdTableName\": function (tId) {\n           \n            switch(tId){\n \n\n                \n\n                //Buncher\n                case 1: return `\"SD_Unit7_Buncher_1\"`;\n                case 2: return `\"SD_Unit7_Buncher_2\"`;\n                case 3: return `\"SD_Unit7_Buncher_3\"`;\n                case 4: return `\"SD_Unit7_Buncher_4\"`;\n                case 5: return `\"SD_Unit7_Buncher_5\"`;\n                case 6: return `\"SD_Unit7_Buncher_6\"`;\n\n                //Coiling\n\n                case 7: return `\"SD_Unit7_Coiling_1\"`;\n                case 8: return `\"SD_Unit7_Coiling_2\"`;\n                case 9: return `\"SD_Unit7_Coiling_3\"`;\n                case 10: return `\"SD_Unit7_Coiling_4\"`;\n                case 11: return `\"SD_Unit7_Coiling_5\"`;\n                case 12: return `\"SD_Unit7_Coiling_6\"`;\n                case 13: return `\"SD_Unit7_Coiling_7\"`;\n                case 14: return `\"SD_Unit7_Coiling_8\"`;\n                case 15: return `\"SD_Unit7_Coiling_9\"`;\n                case 16: return `\"SD_Unit7_Coiling_10\"`;\n                case 17: return `\"SD_Unit7_Coiling_11\"`;\n                case 18: return `\"SD_Unit7_Coiling_12\"`;\n                case 19: return `\"SD_Unit7_Coiling_13\"`;\n                case 20: return `\"SD_Unit7_Coiling_14\"`;\n                case 21: return `\"SD_Unit7_Coiling_15\"`;\n                case 22: return `\"SD_Unit7_Coiling_16\"`;\n\n                //Insulation\n                case 23: return `\"SD_Unit7_Insulation_1\"`;\n                case 24: return `\"SD_Unit7_Insulation_2\"`;\n                case 25: return `\"SD_Unit7_Insulation_3\"`;\n                case 26: return `\"SD_Unit7_Insulation_4\"`;\n                case 27: return `\"SD_Unit7_Insulation_5\"`;\n                case 28: return `\"SD_Unit7_Insulation_6\"`;\n                case 29: return `\"SD_Unit7_Insulation_7\"`;\n                //MWD\n                case 30: return `\"SD_Unit7_MMW24\"`;\n                case 31: return `\"SD_Unit7_MMW32_1\"`;\n                case 32: return `\"SD_Unit7_MMW32_2\"`;\n                case 33: return `\"SD_Unit7_MMW32_3\"`;\n \n \n            }\n \n        }\n \n \n    }\n    global.set(\"PolycabGlobalFuncation\", setFuncations)\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "d97492b4a1b29a73",
        "type": "inject",
        "z": "aa6a51c7aa0d699f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 40,
        "wires": [
            [
                "201c0be6416fa69e"
            ]
        ]
    },
    {
        "id": "54ee79b6ff31fbf1",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 2 stop",
        "func": "var down;\nconst tableno = 29\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"MACHINE START2\"]==false){\n     var downtime = global.get(\"Insulation2down\")\n     downtime=downtime==undefined?0:downtime\n       const query=`INSERT INTO ${tablename}(\n\t\"Datetime\", \"ACTUAL_LENGTH\", \"CABLE_DIAMETER\",\n     \"EXTRUDER_45MM_RPM_ACT\", \"EXTRUDER_80MM_RPM_ACT\", \"LENGTH_SET_METER\",\n      \"LINE_SPEED_ACT\", \"LINE_SPEED_MAX\", \"MACHINE_START\", \"REASON_OF_STOP\", \n      \"RECIPE_NAME\", \"RECIPE_RECORD_NAME\", \"DOWN_TIME\")\n\tVALUES (${datetime}, ${msg.payload[\"LENGTH2\"]}, ${msg.payload[\"CABLE_DIAMETER2\"]}, ${msg.payload[\"45MM_EXTRUDER_RPM_ACT2\"]},\n     ${msg.payload[\"80MM_EXTRUDER_RPM_ACT2\"]}, ${msg.payload[\"LENGTH_SET_METER2\"]}, ${0}, ${msg.payload[\"Actual_LineSpeed max2\"]},\n      ${msg.payload[\"MACHINE START2\"]}, ${msg.payload[\"REASON OF STOP2\"]}, '${msg.payload[\"RECIPE_NAME2\"]}', '${msg.payload[\"RECIPE_RECORD_NAME2\"]}', ${downtime});`\n\n//     const values2 = [\n//     { dataPointId: \"1628141831910\", qualityCode: \"1\", value: msg.payload[\"REASON OF STOP2\"].toString()},//REASON_OF_STOP\n//     { dataPointId: \"1628141788878\", qualityCode: \"1\", value: msg.payload[\"MACHINE START2\"].toString() },//MACHINE_START\n//     { dataPointId: \"1628141776182\", qualityCode: \"1\", value: msg.payload[\"LENGTH2\"].toString() },//ACTUAL_LENGTH\n//     { dataPointId: \"1628141763870\", qualityCode: \"1\", value: msg.payload[\"45MM_EXTRUDER_RPM_ACT2\"].toString() },//EXTRUDER_45MM_RPM_ACT\n//     { dataPointId: \"1628141747021\", qualityCode: \"1\", value: msg.payload[\"80MM_EXTRUDER_RPM_ACT2\"].toString() },//EXTRUDER_80MM_RPM_ACT\n//     { dataPointId: \"1628141735573\", qualityCode: \"1\", value: msg.payload[\"RECIPE_RECORD_NAME2\"].toString() },//RECIPE_RECORD_NAME\n//     { dataPointId: \"1628141727469\", qualityCode: \"1\", value: msg.payload[\"RECIPE_NAME2\"].toString() },//RECIPE_NAME\n//     { dataPointId: \"1628141716293\", qualityCode: \"1\", value: msg.payload[\"LENGTH_SET_METER2\"].toString() },//LENGTH_SET_METER\t\n//     { dataPointId: \"1628141706021\", qualityCode: \"1\", value: msg.payload[\"CABLE_DIAMETER2\"].toString() },//CABLE_DIAMETER\n//     { dataPointId: \"1628141698229\", qualityCode: \"1\", value: msg.payload[\"Actual_LineSpeed max2\"].toString() },//LINE_SPEED_MAX\n//     { dataPointId: \"1628141673848\", qualityCode: \"1\", value: \"0\"},//LINE_SPEED_ACT\n//     { dataPointId: \"1629542062835\", qualityCode: \"1\", value: global.get(\"Insulation2down\").toString() }\n//    ];\n   global.set(\"insulation2length\" ,msg.payload[\"LENGTH2\"] );\n   \n//msg._time = new Date();\n// msg.payload = values2;\nmsg.query=query\nreturn msg;\n}\n    \n    \n\n   \n\n   \n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "42c6da6618060c99",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 2",
        "func": "var down;\nconst tableno = 29\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"MACHINE START2\"]==true){\n    down= 0;\n    global.set(\"Insulation2down\",down);\n    const query = `INSERT INTO ${tablename}(\n\t\"Datetime\", \"ACTUAL_LENGTH\", \"CABLE_DIAMETER\",\n     \"EXTRUDER_45MM_RPM_ACT\", \"EXTRUDER_80MM_RPM_ACT\", \"LENGTH_SET_METER\",\n      \"LINE_SPEED_ACT\", \"LINE_SPEED_MAX\", \"MACHINE_START\", \"REASON_OF_STOP\", \n      \"RECIPE_NAME\", \"RECIPE_RECORD_NAME\", \"DOWN_TIME\")\n\tVALUES (${datetime}, ${msg.payload[\"LENGTH2\"]}, ${msg.payload[\"CABLE_DIAMETER2\"]}, ${msg.payload[\"45MM_EXTRUDER_RPM_ACT2\"]},\n     ${msg.payload[\"80MM_EXTRUDER_RPM_ACT2\"]}, ${msg.payload[\"LENGTH_SET_METER2\"]}, ${msg.payload[\"Actual_LineSpeed2\"]}, ${msg.payload[\"Actual_LineSpeed max2\"]},\n      ${msg.payload[\"MACHINE START2\"]}, ${msg.payload[\"REASON OF STOP2\"]}, '${msg.payload[\"RECIPE_NAME2\"]}', '${msg.payload[\"RECIPE_RECORD_NAME2\"]}', ${down});`\n//     const values2 = [\n//     { dataPointId: \"1628141831910\", qualityCode: \"1\", value: msg.payload[\"REASON OF STOP2\"].toString()},//REASON_OF_STOP\n//     { dataPointId: \"1628141788878\", qualityCode: \"1\", value: msg.payload[\"MACHINE START2\"].toString() },//MACHINE_START\n//     { dataPointId: \"1628141776182\", qualityCode: \"1\", value: msg.payload[\"LENGTH2\"].toString() },//ACTUAL_LENGTH\n//     { dataPointId: \"1628141763870\", qualityCode: \"1\", value: msg.payload[\"45MM_EXTRUDER_RPM_ACT2\"].toString() },//EXTRUDER_45MM_RPM_ACT\n//     { dataPointId: \"1628141747021\", qualityCode: \"1\", value: msg.payload[\"80MM_EXTRUDER_RPM_ACT2\"].toString() },//EXTRUDER_80MM_RPM_ACT\n//     { dataPointId: \"1628141735573\", qualityCode: \"1\", value: msg.payload[\"RECIPE_RECORD_NAME2\"].toString() },//RECIPE_RECORD_NAME\n//     { dataPointId: \"1628141727469\", qualityCode: \"1\", value: msg.payload[\"RECIPE_NAME2\"].toString() },//RECIPE_NAME\n//     { dataPointId: \"1628141716293\", qualityCode: \"1\", value: msg.payload[\"LENGTH_SET_METER2\"].toString() },//LENGTH_SET_METER\t\n//     { dataPointId: \"1628141706021\", qualityCode: \"1\", value: msg.payload[\"CABLE_DIAMETER2\"].toString() },//CABLE_DIAMETER\n//     { dataPointId: \"1628141698229\", qualityCode: \"1\", value: msg.payload[\"Actual_LineSpeed max2\"].toString() },//LINE_SPEED_MAX\n//     { dataPointId: \"1628141673848\", qualityCode: \"1\", value: msg.payload[\"Actual_LineSpeed2\"].toString() },//LINE_SPEED_ACT\n//     { dataPointId: \"1629542062835\", qualityCode: \"1\", value: down.toString() }\n//    ];\n   global.set(\"insulation2length\" ,msg.payload[\"LENGTH2\"] );\n\nmsg.query=query\nreturn msg;\n}\n    \n    \n\n   \n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "2d6231f77fbdb21c",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Save & log Shift Lenght ",
        "func": "// When shift change file is not existing, error node shall trigger. First Data after deployment will be uploaded to Postgresql withour comaprision to previous shift data.\nvar current = JSON.parse(msg.localStorage.data);\nconst tableno = 24\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n\nvar wiresize = 0.0;\nif(current[\"CABLE_DIAMETER2\"] >= 2.24 && current[\"CABLE_DIAMETER2\"] < 2.37 ){\n    wiresize = 0.75;\n}\nelse if(current[\"CABLE_DIAMETER2\"] >= 2.40 && current[\"CABLE_DIAMETER2\"] < 2.58 ){\n    wiresize = 1.00;\n}\nelse if(current[\"CABLE_DIAMETER2\"] >= 2.86 && current[\"CABLE_DIAMETER2\"] < 3.00 ){\n    wiresize = 1.50;\n}\nelse if(current[\"CABLE_DIAMETER2\"] >= 3.48 && current[\"CABLE_DIAMETER2\"] < 3.65 ){\n    wiresize = 2.50;\n}\nelse if(current[\"CABLE_DIAMETER2\"] >= 4.02 && current[\"CABLE_DIAMETER2\"] < 4.12 ){\n    wiresize = 4.00;\n}\nelse if(current[\"CABLE_DIAMETER2\"] >= 4.52 && current[\"CABLE_DIAMETER2\"] < 4.65 ){\n    wiresize = 6.00;\n}\n\n\nif(msg.hasOwnProperty(\"error\")){\n    msg.payload = current;\n    node.send([msg, null]);\n    //Send Shift change data to Postgresql when first shift change occurs after deployment.\n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${current[\"LENGTH2\"]}, ${current[\"MACHINE START2\"]}, ${wiresize});`\n    msg.query = query\n    node.send([null, msg])\n }\n // When shift change data is available, current and shift data shall be compared and if found != then data shall be uploaded to Postgresql.\n else{\n     var lshift = JSON.parse(msg.payload);\n     //var current = msg.shiftchangedata;\n     var lshiftlen = Number(lshift[\"LENGTH2\"]);\n     var currentlen = Number(current[\"LENGTH2\"]);\n     msg.payload = lshiftlen;\n     if (lshiftlen != currentlen){\n         var length = Number(currentlen) - Number(lshiftlen);\n\n         const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${length}, ${current[\"MACHINE START2\"]}, ${wiresize});`\n         msg.query = query\n        node.send([null, msg]) // Send to Postgresql.\n        //msg = null;\n        msg.payload = current;\n        node.send([msg,null]) // Send to file for storing last shift data.\n     }\n     //return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 720,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Shift Time Data)"
        ]
    },
    {
        "id": "cf33d542d9512539",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Send data to Postgresql",
        "func": "var previous = msg.spoolchange[\"previous\"];\nconst tableno = 24\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\nvar wiresize = 0.0;\nif(previous[\"CABLE_DIAMETER2\"] >= 2.24 && previous[\"CABLE_DIAMETER2\"] < 2.37 ){\n    wiresize = 0.75;\n}\nelse if(previous[\"CABLE_DIAMETER2\"] >= 2.40 && previous[\"CABLE_DIAMETER2\"] < 2.58 ){\n    wiresize = 1.00;\n}\nelse if(previous[\"CABLE_DIAMETER2\"] >= 2.86 && previous[\"CABLE_DIAMETER2\"] < 3.00 ){\n    wiresize = 1.50;\n}\nelse if(previous[\"CABLE_DIAMETER2\"] >= 3.48 && previous[\"CABLE_DIAMETER2\"] < 3.65 ){\n    wiresize = 2.50;\n}\nelse if(previous[\"CABLE_DIAMETER2\"] >= 4.02 && previous[\"CABLE_DIAMETER2\"] < 4.12 ){\n    wiresize = 4.00;\n}\nelse if(previous[\"CABLE_DIAMETER2\"] >= 4.52 && previous[\"CABLE_DIAMETER2\"] < 4.65 ){\n    wiresize = 6.00;\n}\n// When shift last data file is not existing, error node shall give the msg with all key:value pair.\nif(msg.hasOwnProperty(\"error\")){\n    // Send summary data to mindsphere for previous value at first spooler change after deployment. without subtraction of previous shift data.\n\n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${previous[\"LENGTH2\"]}, ${previous[\"MACHINE START2\"]}, ${wiresize});`\n    msg.query = query\n    node.send([null, msg])\n    msg.payload = previous;\n    node.send([msg, null])\n \n}\nelse{\n    msg.payload = JSON.parse(msg.payload)\n    //When first spool change occurs after shift change subtract shift data from current spool lenght.\n    var lshiftlen = Number(msg.payload[\"LENGTH2\"]);\n    var previouslen = Number(previous[\"LENGTH2\"]);\n    var spoollen = previouslen - lshiftlen;\n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${spoollen}, ${previous[\"MACHINE START2\"]}, ${wiresize});`\n    msg.query = query\n    node.send([null, msg])\n    previous[\"LENGTH2\"] = 0;\n    msg.payload = previous;\n    node.send([msg, null])\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 680,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Spool change data)"
        ]
    },
    {
        "id": "55c8d8c53d8c9349",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 2-Ping",
        "func": "const tableno = 29\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload == false){\n\n      const query = `INSERT INTO ${tablename}(\n\t\"Datetime\", \"ACTUAL_LENGTH\", \"CABLE_DIAMETER\",\n     \"EXTRUDER_45MM_RPM_ACT\", \"EXTRUDER_80MM_RPM_ACT\", \"LENGTH_SET_METER\",\n      \"LINE_SPEED_ACT\", \"LINE_SPEED_MAX\", \"MACHINE_START\", \"REASON_OF_STOP\", \n      \"RECIPE_NAME\", \"RECIPE_RECORD_NAME\", \"DOWN_TIME\")\n\tVALUES (${datetime}, ${0}, ${0}, ${0},\n     ${0}, ${0}, ${0}, ${0},\n      ${false}, ${7}, 'none', 'none', ${0});`\n\n      msg.query=query\n//  const values = [\n    \n//     { dataPointId: \"1628141831910\", qualityCode: \"1\", value: \"7\"},//REASON_OF_STOP\n//     { dataPointId: \"1628141788878\", qualityCode: \"1\", value: \"false\" },//MACHINE_START\n//     { dataPointId: \"1628141776182\", qualityCode: \"1\", value: \"0\" },//ACTUAL_LENGTH\n//     { dataPointId: \"1628141763870\", qualityCode: \"1\", value: \"0\" },//EXTRUDER_45MM_RPM_ACT\n//     { dataPointId: \"1628141747021\", qualityCode: \"1\", value: \"0\" },//EXTRUDER_80MM_RPM_ACT\n//     { dataPointId: \"1628141735573\", qualityCode: \"1\", value: \"0\" },//RECIPE_RECORD_NAME\n//     { dataPointId: \"1628141727469\", qualityCode: \"1\", value: \"0\" },//RECIPE_NAME\n//     { dataPointId: \"1628141716293\", qualityCode: \"1\", value: \"0\"},//LENGTH_SET_METER\t\n//     { dataPointId: \"1628141706021\", qualityCode: \"1\", value: \"0\" },//CABLE_DIAMETER\n//     { dataPointId: \"1628141698229\", qualityCode: \"1\", value: \"0\" },//LINE_SPEED_MAX\n//     { dataPointId: \"1628141673848\", qualityCode: \"1\", value: \"0\" }//LINE_SPEED_ACT\n//    ];\n\n    \n//     msg._time = new Date();\n//     msg.payload = values;   \n    return msg;\n    \n\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "954e4d5073049e4d",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 2 Summary",
        "info": "",
        "x": 180,
        "y": 640,
        "wires": []
    },
    {
        "id": "743ed387ab56b33f",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 2",
        "info": "",
        "x": 150,
        "y": 460,
        "wires": []
    },
    {
        "id": "7a58712e6cfa3d7a",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 3 stop",
        "func": "var down;\nconst tableno = 30\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"MACHINE START3\"]==false){\n    \n           const query=`INSERT INTO ${tablename}(\n\t\"Datetime\", \"ACTUAL_LENGTH\", \"CABLE_DIAMETER\",\n     \"EXTRUDER_45MM_RPM_ACT\", \"EXTRUDER_80MM_RPM_ACT\", \"LENGTH_SET_METER\",\n      \"LINE_SPEED_ACT\", \"LINE_SPEED_MAX\", \"MACHINE_START\", \"REASON_OF_STOP\", \n      \"RECIPE_NAME\", \"RECIPE_RECORD_NAME\", \"DOWN_TIME\")\n\tVALUES (${datetime}, ${msg.payload[\"LENGTH3\"]}, ${msg.payload[\"CABLE_DIAMETER3\"]}, ${msg.payload[\"45MM_EXTRUDER_RPM_ACT3\"]},\n     ${msg.payload[\"80MM_EXTRUDER_RPM_ACT3\"]}, ${msg.payload[\"LENGTH_SET_METER3\"]}, ${0}, ${msg.payload[\"Actual_LineSpeed max3\"]},\n      ${msg.payload[\"MACHINE START3\"]}, ${msg.payload[\"REASON OF STOP3\"]}, '${msg.payload[\"RECIPE_NAME3\"]}', '${msg.payload[\"RECIPE_RECORD_NAME3\"]}', ${0});`\n//     const values3 = [\n    \n//     { dataPointId: \"1628142015630\", qualityCode: \"1\", value: msg.payload[\"REASON OF STOP3\"].toString()},//REASON_OF_STOP\n//     { dataPointId: \"1628142005221\", qualityCode: \"1\", value: msg.payload[\"MACHINE START3\"].toString() },//MACHINE_START\n//     { dataPointId: \"1628141995438\", qualityCode: \"1\", value: msg.payload[\"LENGTH3\"].toString() },//ACTUAL_LENGTH\n//     { dataPointId: \"1628141983879\", qualityCode: \"1\", value: msg.payload[\"45MM_EXTRUDER_RPM_ACT3\"].toString() },//EXTRUDER_45MM_RPM_ACT\n//     { dataPointId: \"1628141948438\", qualityCode: \"1\", value: msg.payload[\"80MM_EXTRUDER_RPM_ACT3\"].toString() },//EXTRUDER_80MM_RPM_ACT\n//     { dataPointId: \"1628141938245\", qualityCode: \"1\", value: msg.payload[\"RECIPE_RECORD_NAME3\"].toString() },//RECIPE_RECORD_NAME\n//     { dataPointId: \"1628141924893\", qualityCode: \"1\", value: msg.payload[\"RECIPE_NAME3\"].toString() },//RECIPE_NAME\n//     { dataPointId: \"1628141916118\", qualityCode: \"1\", value: msg.payload[\"LENGTH_SET_METER3\"].toString() },//LENGTH_SET_METER\t\n//     { dataPointId: \"1628141909205\", qualityCode: \"1\", value: msg.payload[\"CABLE_DIAMETER3\"].toString() },//CABLE_DIAMETER\n//     { dataPointId: \"1628141898911\", qualityCode: \"1\", value: msg.payload[\"Actual_LineSpeed max3\"].toString() },//LINE_SPEED_MAX\n//     { dataPointId: \"1628141886520\", qualityCode: \"1\", value: \"0\" },//LINE_SPEED_ACT\n//     { dataPointId: \"1629542067827\", qualityCode: \"1\", value: \"0\" }\n//    ];\n   global.set(\"insulation3length\" ,msg.payload[\"LENGTH3\"] );\n// msg._time = new Date();\n// msg.payload = values3;\nmsg.query=query\nreturn msg;\n   \n}\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "3d4520862834da59",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 3",
        "func": "var down;\nconst tableno = 30\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"MACHINE START3\"]==true){\n    down= 0;\n    global.set(\"Insulation3down\",down);\n    const query = `INSERT INTO ${tablename}(\n\t\"Datetime\", \"ACTUAL_LENGTH\", \"CABLE_DIAMETER\",\n     \"EXTRUDER_45MM_RPM_ACT\", \"EXTRUDER_80MM_RPM_ACT\", \"LENGTH_SET_METER\",\n      \"LINE_SPEED_ACT\", \"LINE_SPEED_MAX\", \"MACHINE_START\", \"REASON_OF_STOP\", \n      \"RECIPE_NAME\", \"RECIPE_RECORD_NAME\", \"DOWN_TIME\")\n\tVALUES (${datetime}, ${msg.payload[\"LENGTH3\"]}, ${msg.payload[\"CABLE_DIAMETER3\"]}, ${msg.payload[\"45MM_EXTRUDER_RPM_ACT3\"]},\n     ${msg.payload[\"80MM_EXTRUDER_RPM_ACT3\"]}, ${msg.payload[\"LENGTH_SET_METER3\"]}, ${msg.payload[\"Actual_LineSpeed3\"]}, ${msg.payload[\"Actual_LineSpeed max3\"]},\n      ${msg.payload[\"MACHINE START3\"]}, ${msg.payload[\"REASON OF STOP3\"]}, '${msg.payload[\"RECIPE_NAME3\"]}', '${msg.payload[\"RECIPE_RECORD_NAME3\"]}', ${down});`\n   \n   global.set(\"insulation3length\" ,msg.payload[\"LENGTH3\"] );\n\nmsg.query = query;\nreturn msg;\n   \n}\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "2853870c3b1ccc03",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 3 Ping",
        "func": "const tableno = 30\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload == false ){\n\n    const query = `INSERT INTO ${tablename}(\n\t\"Datetime\", \"ACTUAL_LENGTH\", \"CABLE_DIAMETER\",\n     \"EXTRUDER_45MM_RPM_ACT\", \"EXTRUDER_80MM_RPM_ACT\", \"LENGTH_SET_METER\",\n      \"LINE_SPEED_ACT\", \"LINE_SPEED_MAX\", \"MACHINE_START\", \"REASON_OF_STOP\", \n      \"RECIPE_NAME\", \"RECIPE_RECORD_NAME\", \"DOWN_TIME\")\n\tVALUES (${datetime}, ${0}, ${0}, ${0},\n     ${0}, ${0}, ${0}, ${0},\n      ${false}, ${7}, 'none', 'none', ${0});`\n \n    msg.query=query\n    return msg;\n    \n\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "dc828c3dfabc4a5c",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Save & log Shift Lenght ",
        "func": "// When shift change file is not existing, error node shall trigger. First Data after deployment will be uploaded to Postgresql withour comaprision to previous shift data.\nvar current = JSON.parse(msg.localStorage.data);\nconst tableno = 24\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n\nvar wiresize = 0.0;\nif(current[\"CABLE_DIAMETER3\"] >= 2.24 && current[\"CABLE_DIAMETER3\"] < 2.37 ){\n    wiresize = 0.75;\n}\nelse if(current[\"CABLE_DIAMETER3\"] >= 2.40 && current[\"CABLE_DIAMETER3\"] < 2.58 ){\n    wiresize = 1.00;\n}\nelse if(current[\"CABLE_DIAMETER3\"] >= 2.86 && current[\"CABLE_DIAMETER3\"] < 3.00 ){\n    wiresize = 1.50;\n}\nelse if(current[\"CABLE_DIAMETER3\"] >= 3.48 && current[\"CABLE_DIAMETER3\"] < 3.65 ){\n    wiresize = 2.50;\n}\nelse if(current[\"CABLE_DIAMETER3\"] >= 4.02 && current[\"CABLE_DIAMETER3\"] < 4.12 ){\n    wiresize = 4.00;\n}\nelse if(current[\"CABLE_DIAMETER3\"] >= 4.52 && current[\"CABLE_DIAMETER3\"] < 4.65 ){\n    wiresize = 6.00;\n}\n\n\nif(msg.hasOwnProperty(\"error\")){\n    msg.payload = current;\n    node.send([msg, null]);\n    //Send Shift change data to Postgresql when first shift change occurs after deployment.\n    const query = `INSERT INTO ${tablename}(\n \t\"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${current[\"LENGTH3\"]}, ${current[\"MACHINE START3\"]}, ${wiresize});`\n    msg.query = query;\n    const values = [\n        { dataPointId: \"1640341223423\", qualityCode: \"1\", value: current[\"LENGTH3\"].toString()},//REASON_OF_STOP\n        { dataPointId: \"1640341286463\", qualityCode: \"1\", value: wiresize.toString() },//MACHINE_START\n        { dataPointId: \"1640341334631\", qualityCode: \"1\", value: current[\"MACHINE START3\"].toString() }//ACTUAL_LENGTH\n        ];\n    //msg = null;\n    msg.payload = values;\n    //msg._time = new Date();\n    node.send([null, msg])\n }\n // When shift change data is available, current and shift data shall be compared and if found != then data shall be uploaded to Postgresql.\n else{\n     var lshift = JSON.parse(msg.payload);\n     //var current = msg.shiftchangedata;\n     var lshiftlen = Number(lshift[\"LENGTH3\"]);\n     var currentlen = Number(current[\"LENGTH3\"]);\n     msg.payload = lshiftlen;\n     if (lshiftlen != currentlen){\n         var length = Number(currentlen) - Number(lshiftlen);\n\n         const query = `INSERT INTO ${tablename}(\n \t\"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${length}, ${current[\"MACHINE START3\"]}, ${wiresize});`\n         msg.query = query;\n        node.send([null, msg]) // Send to Postgresql.\n        //msg = null;\n        msg.payload = current;\n        node.send([msg,null]) // Send to file for storing last shift data.\n     }\n     //return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1060,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Shift Time Data)"
        ]
    },
    {
        "id": "c156dcbe4182eac0",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Send data to Postgresql",
        "func": "var previous = msg.spoolchange[\"previous\"];\nconst tableno = 24\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\nvar wiresize = 0.0;\nif(previous[\"CABLE_DIAMETER3\"] >= 2.24 && previous[\"CABLE_DIAMETER3\"] < 2.37 ){\n    wiresize = 0.75;\n}\nelse if(previous[\"CABLE_DIAMETER3\"] >= 2.40 && previous[\"CABLE_DIAMETER3\"] < 2.58 ){\n    wiresize = 1.00;\n}\nelse if(previous[\"CABLE_DIAMETER3\"] >= 2.86 && previous[\"CABLE_DIAMETER3\"] < 3.00 ){\n    wiresize = 1.50;\n}\nelse if(previous[\"CABLE_DIAMETER3\"] >= 3.48 && previous[\"CABLE_DIAMETER3\"] < 3.65 ){\n    wiresize = 2.50;\n}\nelse if(previous[\"CABLE_DIAMETER3\"] >= 4.02 && previous[\"CABLE_DIAMETER3\"] < 4.12 ){\n    wiresize = 4.00;\n}\nelse if(previous[\"CABLE_DIAMETER3\"] >= 4.52 && previous[\"CABLE_DIAMETER3\"] < 4.65 ){\n    wiresize = 6.00;\n}\n// When shift last data file is not existing, error node shall give the msg with all key:value pair.\nif(msg.hasOwnProperty(\"error\")){\n    // Send summary data to mindsphere for previous value at first spooler change after deployment. without subtraction of previous shift data.\n    const query=`INSERT INTO ${tablename}(\n \t\"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${previous[\"LENGTH3\"]}, ${previous[\"MACHINE START3\"]}, ${wiresize});`\n    msg.query = query;\n    node.send([null, msg])\n    msg.payload = previous;\n    node.send([msg, null])\n \n}\nelse{\n    msg.payload = JSON.parse(msg.payload)\n    //When first spool change occurs after shift change subtract shift data from current spool lenght.\n    var lshiftlen = Number(msg.payload[\"LENGTH3\"]);\n    var previouslen = Number(previous[\"LENGTH3\"]);\n    var spoollen = previouslen - lshiftlen;\n    const query = `INSERT INTO ${tablename}(\n \t\"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${spoollen}, ${previous[\"MACHINE START3\"]}, ${wiresize});`\n    msg.query = query;\n    node.send([null, msg])\n    previous[\"LENGTH3\"] = 0;\n    msg.payload = previous;\n    node.send([msg, null])\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 191,
        "y": 1018,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Spool change data)"
        ]
    },
    {
        "id": "cad8d068fd0ddef4",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 3",
        "info": "",
        "x": 150,
        "y": 800,
        "wires": []
    },
    {
        "id": "819c5686e8d373d7",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 3 Summary",
        "info": "",
        "x": 180,
        "y": 980,
        "wires": []
    },
    {
        "id": "bf76bfc18c0d356b",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 4 stop",
        "func": "var down;\nconst tableno = 31\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"MACHINE START4\"]==false){\n         const query=`INSERT INTO ${tablename}(\n\t\"Datetime\", \"ACTUAL_LENGTH\", \"CABLE_DIAMETER\",\n     \"EXTRUDER_45MM_RPM_ACT\", \"EXTRUDER_80MM_RPM_ACT\", \"LENGTH_SET_METER\",\n      \"LINE_SPEED_ACT\", \"LINE_SPEED_MAX\", \"MACHINE_START\", \"REASON_OF_STOP\", \n      \"RECIPE_NAME\", \"RECIPE_RECORD_NAME\", \"DOWN_TIME\")\n\tVALUES (${datetime}, ${msg.payload[\"LENGTH4\"]}, ${msg.payload[\"CABLE_DIAMETER4\"]}, ${msg.payload[\"45MM_EXTRUDER_RPM_ACT4\"]},\n     ${msg.payload[\"80MM_EXTRUDER_RPM_ACT4\"]}, ${msg.payload[\"LENGTH_SET_METER4\"]}, ${0}, ${msg.payload[\"Actual_LineSpeed max4\"]},\n      ${msg.payload[\"MACHINE START4\"]}, ${msg.payload[\"REASON OF STOP4\"]}, '${msg.payload[\"RECIPE_NAME4\"]}', '${msg.payload[\"RECIPE_RECORD_NAME4\"]}', ${0});`\n//     const values4 = [\n    \n//     { dataPointId: \"1628142139141\", qualityCode: \"1\", value: msg.payload[\"REASON OF STOP4\"].toString()},//REASON_OF_STOP\n//     { dataPointId: \"1628142129958\", qualityCode: \"1\", value: msg.payload[\"MACHINE START4\"].toString() },//MACHINE_START\n//     { dataPointId: \"1628142121318\", qualityCode: \"1\", value: msg.payload[\"LENGTH4\"].toString() },//ACTUAL_LENGTH\n//     { dataPointId: \"1628142115182\", qualityCode: \"1\", value: msg.payload[\"45MM_EXTRUDER_RPM_ACT4\"].toString() },//EXTRUDER_45MM_RPM_ACT\n//     { dataPointId: \"1628142105686\", qualityCode: \"1\", value: msg.payload[\"80MM_EXTRUDER_RPM_ACT4\"].toString() },//EXTRUDER_80MM_RPM_ACT\n//     { dataPointId: \"1628142092366\", qualityCode: \"1\", value: msg.payload[\"RECIPE_RECORD_NAME4\"].toString() },//RECIPE_RECORD_NAME\n//     { dataPointId: \"1628142082534\", qualityCode: \"1\", value: msg.payload[\"RECIPE_NAME4\"].toString() },//RECIPE_NAME\n//     { dataPointId: \"1628142065550\", qualityCode: \"1\", value: msg.payload[\"LENGTH_SET_METER4\"].toString() },//LENGTH_SET_METER\t\n//     { dataPointId: \"1628142057605\", qualityCode: \"1\", value: msg.payload[\"CABLE_DIAMETER4\"].toString() },//CABLE_DIAMETER\n//     { dataPointId: \"1628142051046\", qualityCode: \"1\", value: msg.payload[\"Actual_LineSpeed max4\"].toString() },//LINE_SPEED_MAX\n//     { dataPointId: \"1628142039329\", qualityCode: \"1\", value: \"0\" },//LINE_SPEED_ACT\n//     { dataPointId: \"1629542072619\", qualityCode: \"1\", value: \"0\" }\n//    ];\n   global.set(\"insulation4length\" ,msg.payload[\"LENGTH4\"] );\n   msg._time = new Date();\nmsg.query = query;\nreturn msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "6b341c9b479f5ca8",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 4",
        "func": "   var down;\nconst tableno = 31\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\n\nif(msg.payload[\"MACHINE START4\"]==true){\n    down= 0;\n    global.set(\"Insulation4down\",down);\n   const query = `INSERT INTO ${tablename}(\n\t\"Datetime\", \"ACTUAL_LENGTH\", \"CABLE_DIAMETER\",\n     \"EXTRUDER_45MM_RPM_ACT\", \"EXTRUDER_80MM_RPM_ACT\", \"LENGTH_SET_METER\",\n      \"LINE_SPEED_ACT\", \"LINE_SPEED_MAX\", \"MACHINE_START\", \"REASON_OF_STOP\", \n      \"RECIPE_NAME\", \"RECIPE_RECORD_NAME\", \"DOWN_TIME\")\n\tVALUES (${datetime}, ${msg.payload[\"LENGTH4\"]}, ${msg.payload[\"CABLE_DIAMETER4\"]}, ${msg.payload[\"45MM_EXTRUDER_RPM_ACT4\"]},\n     ${msg.payload[\"80MM_EXTRUDER_RPM_ACT4\"]}, ${msg.payload[\"LENGTH_SET_METER4\"]}, ${msg.payload[\"Actual_LineSpeed4\"]}, ${msg.payload[\"Actual_LineSpeed max4\"]},\n      ${msg.payload[\"MACHINE START4\"]}, ${msg.payload[\"REASON OF STOP4\"]}, '${msg.payload[\"RECIPE_NAME4\"]}', '${msg.payload[\"RECIPE_RECORD_NAME4\"]}', ${down});`\n    \n   //  const values4 = [\n    \n   //  { dataPointId: \"1628142139141\", qualityCode: \"1\", value: msg.payload[\"REASON OF STOP4\"].toString()},//REASON_OF_STOP\n   //  { dataPointId: \"1628142129958\", qualityCode: \"1\", value: msg.payload[\"MACHINE START4\"].toString() },//MACHINE_START\n   //  { dataPointId: \"1628142121318\", qualityCode: \"1\", value: msg.payload[\"LENGTH4\"].toString() },//ACTUAL_LENGTH\n   //  { dataPointId: \"1628142115182\", qualityCode: \"1\", value: msg.payload[\"45MM_EXTRUDER_RPM_ACT4\"].toString() },//EXTRUDER_45MM_RPM_ACT\n   //  { dataPointId: \"1628142105686\", qualityCode: \"1\", value: msg.payload[\"80MM_EXTRUDER_RPM_ACT4\"].toString() },//EXTRUDER_80MM_RPM_ACT\n   //  { dataPointId: \"1628142092366\", qualityCode: \"1\", value: msg.payload[\"RECIPE_RECORD_NAME4\"].toString() },//RECIPE_RECORD_NAME\n   //  { dataPointId: \"1628142082534\", qualityCode: \"1\", value: msg.payload[\"RECIPE_NAME4\"].toString() },//RECIPE_NAME\n   //  { dataPointId: \"1628142065550\", qualityCode: \"1\", value: msg.payload[\"LENGTH_SET_METER4\"].toString() },//LENGTH_SET_METER\t\n   //  { dataPointId: \"1628142057605\", qualityCode: \"1\", value: msg.payload[\"CABLE_DIAMETER4\"].toString() },//CABLE_DIAMETER\n   //  { dataPointId: \"1628142051046\", qualityCode: \"1\", value: msg.payload[\"Actual_LineSpeed max4\"].toString() },//LINE_SPEED_MAX\n   //  { dataPointId: \"1628142039329\", qualityCode: \"1\", value: msg.payload[\"Actual_LineSpeed4\"].toString() },//LINE_SPEED_ACT\n   //  { dataPointId: \"1629542072619\", qualityCode: \"1\", value: down.toString() }\n   // ];\n   global.set(\"insulation4length\" ,msg.payload[\"LENGTH4\"] );\n  // msg._time = new Date();\nmsg.query = query;\nreturn msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "68875e7af7415408",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Save & log Shift Lenght ",
        "func": "// When shift change file is not existing, error node shall trigger. First Data after deployment will be uploaded to mindsphere withour comaprision to previous shift data.\nvar current = JSON.parse(msg.localStorage.data);\nconst tableno = 25\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n\nvar wiresize = 0.0;\nif(current[\"CABLE_DIAMETER4\"] >= 2.24 && current[\"CABLE_DIAMETER4\"] < 2.37 ){\n    wiresize = 0.75;\n}\nelse if(current[\"CABLE_DIAMETER4\"] >= 2.40 && current[\"CABLE_DIAMETER4\"] < 2.58 ){\n    wiresize = 1.00;\n}\nelse if(current[\"CABLE_DIAMETER4\"] >= 2.86 && current[\"CABLE_DIAMETER4\"] < 3.00 ){\n    wiresize = 1.50;\n}\nelse if(current[\"CABLE_DIAMETER4\"] >= 3.48 && current[\"CABLE_DIAMETER4\"] < 3.65 ){\n    wiresize = 2.50;\n}\nelse if(current[\"CABLE_DIAMETER4\"] >= 4.02 && current[\"CABLE_DIAMETER4\"] < 4.12 ){\n    wiresize = 4.00;\n}\nelse if(current[\"CABLE_DIAMETER4\"] >= 4.52 && current[\"CABLE_DIAMETER4\"] < 4.65 ){\n    wiresize = 6.00;\n}\n\n\nif(msg.hasOwnProperty(\"error\")){\n    msg.payload = current;\n    node.send([msg, null]);\n    //Send Shift change data to Mindsphere when first shift change occurs after deployment.\n    \n      const query = `INSERT INTO ${tablename}(\n \t\"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${current[\"LENGTH4\"]}, ${current[\"MACHINE START4\"]}, ${wiresize});`\n    msg.query = query;\n    node.send([null, msg])\n }\n // When shift change data is available, current and shift data shall be compared and if found != then data shall be uploaded to Mindsphere.\n else{\n     var lshift = JSON.parse(msg.payload);\n     //var current = msg.shiftchangedata;\n     var lshiftlen = Number(lshift[\"LENGTH4\"]);\n     var currentlen = Number(current[\"LENGTH4\"]);\n     msg.payload = lshiftlen;\n     if (lshiftlen != currentlen){\n         var length = Number(currentlen) - Number(lshiftlen);\n\n         const query = `INSERT INTO ${tablename}(\n \t\"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${length}, ${current[\"MACHINE START4\"]}, ${wiresize});`\n         msg.query = query;\n        node.send([null, msg]) // Send to Mindsphere.\n        //msg = null;\n        msg.payload = current;\n        node.send([msg,null]) // Send to file for storing last shift data.\n     }\n     //return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1340,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Shift Time Data)"
        ]
    },
    {
        "id": "90b745895a4796c7",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Send data to Postgresql",
        "func": "var previous = msg.spoolchange[\"previous\"];\nconst tableno = 25\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\nvar wiresize = 0.0;\nif(previous[\"CABLE_DIAMETER4\"] >= 2.24 && previous[\"CABLE_DIAMETER4\"] < 2.37 ){\n    wiresize = 0.75;\n}\nelse if(previous[\"CABLE_DIAMETER4\"] >= 2.40 && previous[\"CABLE_DIAMETER4\"] < 2.58 ){\n    wiresize = 1.00;\n}\nelse if(previous[\"CABLE_DIAMETER4\"] >= 2.86 && previous[\"CABLE_DIAMETER4\"] < 3.00 ){\n    wiresize = 1.50;\n}\nelse if(previous[\"CABLE_DIAMETER4\"] >= 3.48 && previous[\"CABLE_DIAMETER4\"] < 3.65 ){\n    wiresize = 2.50;\n}\nelse if(previous[\"CABLE_DIAMETER4\"] >= 4.02 && previous[\"CABLE_DIAMETER4\"] < 4.12 ){\n    wiresize = 4.00;\n}\nelse if(previous[\"CABLE_DIAMETER4\"] >= 4.52 && previous[\"CABLE_DIAMETER4\"] < 4.65 ){\n    wiresize = 6.00;\n}\n// When shift last data file is not existing, error node shall give the msg with all key:value pair.\nif(msg.hasOwnProperty(\"error\")){\n    // Send summary data to mindsphere for previous value at first spooler change after deployment. without subtraction of previous shift data.\n    \n     const query = `INSERT INTO ${tablename}(\n \t\"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${previous[\"LENGTH4\"]}, ${previous[\"MACHINE START4\"]}, ${wiresize});`\n    msg.query = query;\n    node.send([null, msg])\n    msg.payload = previous;\n    node.send([msg, null])\n \n}\nelse{\n    msg.payload = JSON.parse(msg.payload)\n    //When first spool change occurs after shift change subtract shift data from current spool lenght.\n    var lshiftlen = Number(msg.payload[\"LENGTH4\"]);\n    var previouslen = Number(previous[\"LENGTH4\"]);\n    var spoollen = previouslen - lshiftlen;\n    const query = `INSERT INTO ${tablename}(\n \t\"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${spoollen}, ${previous[\"MACHINE START4\"]}, ${wiresize});`\n    msg.query = query;\n    node.send([null, msg])\n    previous[\"LENGTH4\"] = 0;\n    msg.payload = previous;\n    node.send([msg, null])\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1380,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Spool change data)"
        ]
    },
    {
        "id": "368749031ddfebd7",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 4-Ping",
        "func": "const tableno = 31\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload == false){\n         const query = `INSERT INTO ${tablename}(\n\t\"Datetime\", \"ACTUAL_LENGTH\", \"CABLE_DIAMETER\",\n     \"EXTRUDER_45MM_RPM_ACT\", \"EXTRUDER_80MM_RPM_ACT\", \"LENGTH_SET_METER\",\n      \"LINE_SPEED_ACT\", \"LINE_SPEED_MAX\", \"MACHINE_START\", \"REASON_OF_STOP\", \n      \"RECIPE_NAME\", \"RECIPE_RECORD_NAME\", \"DOWN_TIME\")\n\tVALUES (${datetime}, ${0}, ${0}, ${0},\n     ${0}, ${0}, ${0}, ${0},\n      ${false}, ${7}, 'none', 'none', ${0});`\n     msg.query=query\n    return msg;\n    \n\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "1dc9cddfb8f00c26",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 4",
        "info": "",
        "x": 150,
        "y": 1120,
        "wires": []
    },
    {
        "id": "2752d2067048a8db",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 4 Summary",
        "info": "",
        "x": 180,
        "y": 1300,
        "wires": []
    },
    {
        "id": "0743ae2af340c5c8",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 5 stop",
        "func": "var down;\nconst tableno = 32\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"MACHINE START5\"]==false){\n   const query=`INSERT INTO ${tablename}(\n\t\"Datetime\", \"ACTUAL_LENGTH\", \"CABLE_DIAMETER\",\n     \"EXTRUDER_45MM_RPM_ACT\", \"EXTRUDER_80MM_RPM_ACT\", \"LENGTH_SET_METER\",\n      \"LINE_SPEED_ACT\", \"LINE_SPEED_MAX\", \"MACHINE_START\", \"REASON_OF_STOP\", \n      \"RECIPE_NAME\", \"RECIPE_RECORD_NAME\", \"DOWN_TIME\")\n\tVALUES (${datetime}, ${msg.payload[\"LENGTH5\"]}, ${msg.payload[\"CABLE_DIAMETER5\"]}, ${msg.payload[\"45MM_EXTRUDER_RPM_ACT5\"]},\n     ${msg.payload[\"80MM_EXTRUDER_RPM_ACT5\"]}, ${msg.payload[\"LENGTH_SET_METER5\"]}, ${0}, ${msg.payload[\"Actual_LineSpeed max5\"]},\n      ${msg.payload[\"MACHINE START5\"]}, ${msg.payload[\"REASON OF STOP5\"]}, '${msg.payload[\"RECIPE_NAME5\"]}', '${msg.payload[\"RECIPE_RECORD_NAME5\"]}', ${0});`\n    \n   //   const values5 = [\n    \n   //  { dataPointId: \"1628142658096\", qualityCode: \"1\", value: msg.payload[\"REASON OF STOP5\"].toString()},//REASON_OF_STOP\n   //  { dataPointId: \"1628142649471\", qualityCode: \"1\", value: msg.payload[\"MACHINE START5\"].toString() },//MACHINE_START\n   //  { dataPointId: \"1628142639198\", qualityCode: \"1\", value: msg.payload[\"LENGTH5\"].toString() },//ACTUAL_LENGTH\n   //  { dataPointId: \"1628142632286\", qualityCode: \"1\", value: msg.payload[\"45MM_EXTRUDER_RPM_ACT5\"].toString() },//EXTRUDER_45MM_RPM_ACT\n   //  { dataPointId: \"1628142217368\", qualityCode: \"1\", value: msg.payload[\"80MM_EXTRUDER_RPM_ACT5\"].toString() },//EXTRUDER_80MM_RPM_ACT\n   //  { dataPointId: \"1628142206134\", qualityCode: \"1\", value: msg.payload[\"RECIPE_RECORD_NAME5\"].toString() },//RECIPE_RECORD_NAME\n   //  { dataPointId: \"1628142195709\", qualityCode: \"1\", value: msg.payload[\"RECIPE_NAME5\"].toString() },//RECIPE_NAME\n   //  { dataPointId: \"1628142188966\", qualityCode: \"1\", value: msg.payload[\"LENGTH_SET_METER5\"].toString() },//LENGTH_SET_METER\t\n   //  { dataPointId: \"1628142181093\", qualityCode: \"1\", value: msg.payload[\"CABLE_DIAMETER5\"].toString() },//CABLE_DIAMETER\n   //  { dataPointId: \"1628142173894\", qualityCode: \"1\", value: msg.payload[\"Actual_LineSpeed max5\"].toString() },//LINE_SPEED_MAX\n   //  { dataPointId: \"1628142163286\", qualityCode: \"1\", value: \"0\"},//LINE_SPEED_ACT\n   //   { dataPointId: \"1629542077867\", qualityCode: \"1\", value: \"0\" }\n   // ];\n   global.set(\"insulation5length\" ,msg.payload[\"LENGTH5\"] );\nmsg._time = new Date();\nmsg.query = query;\nreturn msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "60e7121b0524cc8b",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 5",
        "func": " var down;\nconst tableno = 32\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"MACHINE START5\"]==true){\n    down= 0;\n    global.set(\"Insulation5down\",down);\n          const query=`INSERT INTO ${tablename}(\n\t\"Datetime\", \"ACTUAL_LENGTH\", \"CABLE_DIAMETER\",\n     \"EXTRUDER_45MM_RPM_ACT\", \"EXTRUDER_80MM_RPM_ACT\", \"LENGTH_SET_METER\",\n      \"LINE_SPEED_ACT\", \"LINE_SPEED_MAX\", \"MACHINE_START\", \"REASON_OF_STOP\", \n      \"RECIPE_NAME\", \"RECIPE_RECORD_NAME\", \"DOWN_TIME\")\n\tVALUES (${datetime}, ${msg.payload[\"LENGTH5\"]}, ${msg.payload[\"CABLE_DIAMETER5\"]}, ${msg.payload[\"45MM_EXTRUDER_RPM_ACT5\"]},\n     ${msg.payload[\"80MM_EXTRUDER_RPM_ACT5\"]}, ${msg.payload[\"LENGTH_SET_METER5\"]}, ${msg.payload[\"Actual_LineSpeed5\"]}, ${msg.payload[\"Actual_LineSpeed max5\"]},\n      ${msg.payload[\"MACHINE START5\"]}, ${msg.payload[\"REASON OF STOP5\"]}, '${msg.payload[\"RECIPE_NAME5\"]}', '${msg.payload[\"RECIPE_RECORD_NAME5\"]}', ${down});`\n     \n   global.set(\"insulation5length\" ,msg.payload[\"LENGTH5\"] );\nmsg._time = new Date();\nmsg.query = query;\nreturn msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "33ddabd16e416ccb",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 5-Ping",
        "func": "const tableno = 32\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload == false){\n       \n          const query=`INSERT INTO ${tablename}(\n\t\"Datetime\", \"ACTUAL_LENGTH\", \"CABLE_DIAMETER\",\n     \"EXTRUDER_45MM_RPM_ACT\", \"EXTRUDER_80MM_RPM_ACT\", \"LENGTH_SET_METER\",\n      \"LINE_SPEED_ACT\", \"LINE_SPEED_MAX\", \"MACHINE_START\", \"REASON_OF_STOP\", \n      \"RECIPE_NAME\", \"RECIPE_RECORD_NAME\", \"DOWN_TIME\")\n\tVALUES (${datetime}, ${0}, ${0}, ${0},\n     ${0}, ${0}, ${0}, ${0},\n      ${false}, ${7}, 'none', 'none', ${0});`\n//  const values = [\n    \n//     { dataPointId: \"1628142658096\", qualityCode: \"1\", value: \"7\"},//REASON_OF_STOP\n//     { dataPointId: \"1628142649471\", qualityCode: \"1\", value: \"false\" },//MACHINE_START\n//     { dataPointId: \"1628142639198\", qualityCode: \"1\", value: \"0\" },//ACTUAL_LENGTH\n//     { dataPointId: \"1628142632286\", qualityCode: \"1\", value: \"0\" },//EXTRUDER_45MM_RPM_ACT\n//     { dataPointId: \"1628142217368\", qualityCode: \"1\", value: \"0\"},//EXTRUDER_80MM_RPM_ACT\n//     { dataPointId: \"1628142206134\", qualityCode: \"1\", value: \"0\" },//RECIPE_RECORD_NAME\n//     { dataPointId: \"1628142195709\", qualityCode: \"1\", value: \"0\" },//RECIPE_NAME\n//     { dataPointId: \"1628142188966\", qualityCode: \"1\", value: \"0\" },//LENGTH_SET_METER\t\n//     { dataPointId: \"1628142181093\", qualityCode: \"1\", value: \"0\" },//CABLE_DIAMETER\n//     { dataPointId: \"1628142173894\", qualityCode: \"1\", value: \"0\" },//LINE_SPEED_MAX\n//     { dataPointId: \"1628142163286\", qualityCode: \"1\", value: \"0\" }//LINE_SPEED_ACT\n//    ];\n\n    \n//     msg._time = new Date();\n    msg.payload = query;   \n    return msg;\n    \n\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "ec612eb832d3937c",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Send data to Postgresql",
        "func": "var previous = msg.spoolchange[\"previous\"];\nconst tableno = 26\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\nvar wiresize = 0.0;\nif(previous[\"CABLE_DIAMETER5\"] >= 2.24 && previous[\"CABLE_DIAMETER5\"] < 2.37 ){\n    wiresize = 0.75;\n}\nelse if(previous[\"CABLE_DIAMETER5\"] >= 2.40 && previous[\"CABLE_DIAMETER5\"] < 2.58 ){\n    wiresize = 1.00;\n}\nelse if(previous[\"CABLE_DIAMETER5\"] >= 2.86 && previous[\"CABLE_DIAMETER5\"] < 3.00 ){\n    wiresize = 1.50;\n}\nelse if(previous[\"CABLE_DIAMETER5\"] >= 3.48 && previous[\"CABLE_DIAMETER5\"] < 3.65 ){\n    wiresize = 2.50;\n}\nelse if(previous[\"CABLE_DIAMETER5\"] >= 4.02 && previous[\"CABLE_DIAMETER5\"] < 4.12 ){\n    wiresize = 4.00;\n}\nelse if(previous[\"CABLE_DIAMETER5\"] >= 4.52 && previous[\"CABLE_DIAMETER5\"] < 4.65 ){\n    wiresize = 6.00;\n}\n// When shift last data file is not existing, error node shall give the msg with all key:value pair.\nif(msg.hasOwnProperty(\"error\")){\n    // Send summary data to mindsphere for previous value at first spooler change after deployment. without subtraction of previous shift data.\n    const query = `INSERT INTO ${tablename}(\n \t\"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${previous[\"LENGTH5\"]}, ${previous[\"MACHINE START5\"]}, ${wiresize});`\n    msg.query = query;\n    node.send([null, msg])\n    msg.payload = previous;\n    node.send([msg, null])\n \n}\nelse{\n    msg.payload = JSON.parse(msg.payload)\n    //When first spool change occurs after shift change subtract shift data from current spool lenght.\n    var lshiftlen = Number(msg.payload[\"LENGTH5\"]);\n    var previouslen = Number(previous[\"LENGTH5\"]);\n    var spoollen = previouslen - lshiftlen;\n\n    const query = `INSERT INTO ${tablename}(\n \t\"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${spoollen}, ${previous[\"MACHINE START5\"]}, ${wiresize});`\n    msg.query = query;\n    node.send([null, msg])\n    previous[\"LENGTH5\"] = 0;\n    msg.payload = previous;\n    node.send([msg, null])\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1700,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Spool change data)"
        ]
    },
    {
        "id": "c57c50de6dc64915",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Save & log Shift Lenght ",
        "func": "// When shift change file is not existing, error node shall trigger. First Data after deployment will be uploaded to Postgresql withour comaprision to previous shift data.\nvar current = JSON.parse(msg.localStorage.data);\nconst tableno = 26\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n\nvar wiresize = 0.0;\nif(current[\"CABLE_DIAMETER5\"] >= 2.24 && current[\"CABLE_DIAMETER5\"] < 2.37 ){\n    wiresize = 0.75;\n}\nelse if(current[\"CABLE_DIAMETER5\"] >= 2.40 && current[\"CABLE_DIAMETER5\"] < 2.58 ){\n    wiresize = 1.00;\n}\nelse if(current[\"CABLE_DIAMETER5\"] >= 2.86 && current[\"CABLE_DIAMETER5\"] < 3.00 ){\n    wiresize = 1.50;\n}\nelse if(current[\"CABLE_DIAMETER5\"] >= 3.48 && current[\"CABLE_DIAMETER5\"] < 3.65 ){\n    wiresize = 2.50;\n}\nelse if(current[\"CABLE_DIAMETER5\"] >= 4.02 && current[\"CABLE_DIAMETER5\"] < 4.12 ){\n    wiresize = 4.00;\n}\nelse if(current[\"CABLE_DIAMETER5\"] >= 4.52 && current[\"CABLE_DIAMETER5\"] < 4.65 ){\n    wiresize = 6.00;\n}\n\n\nif(msg.hasOwnProperty(\"error\")){\n    msg.payload = current;\n    node.send([msg, null]);\n\n    \n    //Send Shift change data to Postgresql when first shift change occurs after deployment.\n    const query = `INSERT INTO ${tablename}(\n \t\"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${current[\"LENGTH5\"]}, ${current[\"MACHINE START5\"]}, ${wiresize});`\n\n    // const values = [\n    //         { dataPointId: \"1640341238919\", qualityCode: \"1\", value: current[\"LENGTH5\"].toString()},//REASON_OF_STOP\n    //         { dataPointId: \"1640341297856\", qualityCode: \"1\", value: wiresize.toString() },//MACHINE_START\n    //         { dataPointId: \"1640341344934\", qualityCode: \"1\", value: current[\"MACHINE START5\"].toString() }//ACTUAL_LENGTH\n    //     ];\n    //msg = null;\n    msg.query = query;\n    node.send([null, msg])\n }\n // When shift change data is available, current and shift data shall be compared and if found != then data shall be uploaded to Postgresql.\n else{\n     var lshift = JSON.parse(msg.payload);\n     //var current = msg.shiftchangedata;\n     var lshiftlen = Number(lshift[\"LENGTH5\"]);\n     var currentlen = Number(current[\"LENGTH5\"]);\n     msg.payload = lshiftlen;\n     if (lshiftlen != currentlen){\n         var length = Number(currentlen) - Number(lshiftlen);\n         const query = `INSERT INTO ${tablename}(\n \t\"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${length}, ${current[\"MACHINE START5\"]}, ${wiresize});`\n        msg.query = query;\n        node.send([null, msg]) // Send to Postgresql.\n        //msg = null;\n        msg.payload = current;\n        node.send([msg,null]) // Send to file for storing last shift data.\n     }\n     //return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1660,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Shift Time Data)"
        ]
    },
    {
        "id": "0303bddadcd19083",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 5 Summary",
        "info": "",
        "x": 180,
        "y": 1620,
        "wires": []
    },
    {
        "id": "9e53bd8dfc3d2e89",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "insulation 5",
        "info": "",
        "x": 150,
        "y": 1440,
        "wires": []
    },
    {
        "id": "ee2cffe39ab7e5e0",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 6",
        "info": "",
        "x": 150,
        "y": 1760,
        "wires": []
    },
    {
        "id": "e15cdcec3622e882",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 6 stop",
        "func": "var down;\nconst tableno = 33\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\n\nif(msg.payload[\"MACHINE START6\"]==false){\n       const query=`INSERT INTO ${tablename}(\n\t\"Datetime\", \"ACTUAL_LENGTH\", \"CABLE_DIAMETER\",\n     \"EXTRUDER_45MM_RPM_ACT\", \"EXTRUDER_80MM_RPM_ACT\", \"LENGTH_SET_METER\",\n      \"LINE_SPEED_ACT\", \"LINE_SPEED_MAX\", \"MACHINE_START\", \"REASON_OF_STOP\", \n      \"RECIPE_NAME\", \"RECIPE_RECORD_NAME\", \"DOWN_TIME\")\n\tVALUES (${datetime}, ${msg.payload[\"LENGTH6\"]}, ${msg.payload[\"CABLE_DIAMETER6\"]}, ${msg.payload[\"45MM_EXTRUDER_RPM_ACT6\"]},\n     ${msg.payload[\"80MM_EXTRUDER_RPM_ACT6\"]}, ${msg.payload[\"LENGTH_SET_METER6\"]}, ${0}, ${msg.payload[\"Actual_LineSpeed max6\"]},\n      ${msg.payload[\"MACHINE START6\"]}, ${msg.payload[\"REASON OF STOP6\"]}, '${msg.payload[\"RECIPE_NAME6\"]}', '${msg.payload[\"RECIPE_RECORD_NAME6\"]}', ${0});`\n    \n   //  const values6 = [\n    \n   //  { dataPointId: \"1628142818119\", qualityCode: \"1\", value: msg.payload[\"REASON OF STOP6\"].toString()},//REASON_OF_STOP\n   //  { dataPointId: \"1628142808670\", qualityCode: \"1\", value: msg.payload[\"MACHINE START6\"].toString() },//MACHINE_START\n   //  { dataPointId: \"1628142798647\", qualityCode: \"1\", value: msg.payload[\"LENGTH6\"].toString() },//ACTUAL_LENGTH\n   //  { dataPointId: \"1628142791726\", qualityCode: \"1\", value: msg.payload[\"45MM_EXTRUDER_RPM_ACT6\"].toString() },//EXTRUDER_45MM_RPM_ACT\n   //  { dataPointId: \"1628142777297\", qualityCode: \"1\", value: msg.payload[\"80MM_EXTRUDER_RPM_ACT6\"].toString() },//EXTRUDER_80MM_RPM_ACT\n   //  { dataPointId: \"1628142723457\", qualityCode: \"1\", value: msg.payload[\"RECIPE_RECORD_NAME6\"].toString() },//RECIPE_RECORD_NAME\n   //  { dataPointId: \"1628142715103\", qualityCode: \"1\", value: msg.payload[\"RECIPE_NAME6\"].toString() },//RECIPE_NAME\n   //  { dataPointId: \"1628142708430\", qualityCode: \"1\", value: msg.payload[\"LENGTH_SET_METER6\"].toString() },//LENGTH_SET_METER\t\n   //  { dataPointId: \"1628142700105\", qualityCode: \"1\", value: msg.payload[\"CABLE_DIAMETER6\"].toString() },//CABLE_DIAMETER\n   //  { dataPointId: \"1628142678846\", qualityCode: \"1\", value: msg.payload[\"Actual_LineSpeed max6\"].toString() },//LINE_SPEED_MAX\n   //  { dataPointId: \"1628142670999\", qualityCode: \"1\", value: \"0\" },//LINE_SPEED_ACT\n   //    { dataPointId: \"1629542083178\", qualityCode: \"1\", value: \"0\" }\n   // ];\n   \n   global.set(\"insulation6length\" ,msg.payload[\"LENGTH6\"] );\n   msg._time = new Date();\nmsg.query = query;\nreturn msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "23dc0dbac0174eed",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 6",
        "func": "var down;\nconst tableno = 33\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\n\nif(msg.payload[\"MACHINE START6\"]==true){\n    down= 0;\n    global.set(\"Insulation6down\",down);\n    \n   const query = `INSERT INTO ${tablename}(\n\t\"Datetime\", \"ACTUAL_LENGTH\", \"CABLE_DIAMETER\",\n     \"EXTRUDER_45MM_RPM_ACT\", \"EXTRUDER_80MM_RPM_ACT\", \"LENGTH_SET_METER\",\n      \"LINE_SPEED_ACT\", \"LINE_SPEED_MAX\", \"MACHINE_START\", \"REASON_OF_STOP\", \n      \"RECIPE_NAME\", \"RECIPE_RECORD_NAME\", \"DOWN_TIME\")\n\tVALUES (${datetime}, ${msg.payload[\"LENGTH6\"]}, ${msg.payload[\"CABLE_DIAMETER6\"]}, ${msg.payload[\"45MM_EXTRUDER_RPM_ACT6\"]},\n     ${msg.payload[\"80MM_EXTRUDER_RPM_ACT6\"]}, ${msg.payload[\"LENGTH_SET_METER6\"]}, ${msg.payload[\"Actual_LineSpeed6\"]}, ${msg.payload[\"Actual_LineSpeed max6\"]},\n      ${msg.payload[\"MACHINE START6\"]}, ${msg.payload[\"REASON OF STOP6\"]}, '${msg.payload[\"RECIPE_NAME6\"]}', '${msg.payload[\"RECIPE_RECORD_NAME6\"]}', ${down});`\n\n\n   //  const values6 = [\n    \n   //  { dataPointId: \"1628142818119\", qualityCode: \"1\", value: msg.payload[\"REASON OF STOP6\"].toString()},//REASON_OF_STOP\n   //  { dataPointId: \"1628142808670\", qualityCode: \"1\", value: msg.payload[\"MACHINE START6\"].toString() },//MACHINE_START\n   //  { dataPointId: \"1628142798647\", qualityCode: \"1\", value: msg.payload[\"LENGTH6\"].toString() },//ACTUAL_LENGTH\n   //  { dataPointId: \"1628142791726\", qualityCode: \"1\", value: msg.payload[\"45MM_EXTRUDER_RPM_ACT6\"].toString() },//EXTRUDER_45MM_RPM_ACT\n   //  { dataPointId: \"1628142777297\", qualityCode: \"1\", value: msg.payload[\"80MM_EXTRUDER_RPM_ACT6\"].toString() },//EXTRUDER_80MM_RPM_ACT\n   //  { dataPointId: \"1628142723457\", qualityCode: \"1\", value: msg.payload[\"RECIPE_RECORD_NAME6\"].toString() },//RECIPE_RECORD_NAME\n   //  { dataPointId: \"1628142715103\", qualityCode: \"1\", value: msg.payload[\"RECIPE_NAME6\"].toString() },//RECIPE_NAME\n   //  { dataPointId: \"1628142708430\", qualityCode: \"1\", value: msg.payload[\"LENGTH_SET_METER6\"].toString() },//LENGTH_SET_METER\t\n   //  { dataPointId: \"1628142700105\", qualityCode: \"1\", value: msg.payload[\"CABLE_DIAMETER6\"].toString() },//CABLE_DIAMETER\n   //  { dataPointId: \"1628142678846\", qualityCode: \"1\", value: msg.payload[\"Actual_LineSpeed max6\"].toString() },//LINE_SPEED_MAX\n   //  { dataPointId: \"1628142670999\", qualityCode: \"1\", value: msg.payload[\"Actual_LineSpeed6\"].toString() },//LINE_SPEED_ACT\n   //    { dataPointId: \"1629542083178\", qualityCode: \"1\", value: down.toString() }\n   // ];\n   \n   global.set(\"insulation6length\" ,msg.payload[\"LENGTH6\"] );\nmsg.query = query;\nreturn msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "d8c56ec7c1dd0d47",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Send data to Postgresql",
        "func": "var previous = msg.spoolchange[\"previous\"];\nconst tableno = 27\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\nvar wiresize = 0.0;\nif(previous[\"CABLE_DIAMETER6\"] >= 2.24 && previous[\"CABLE_DIAMETER6\"] < 2.37 ){\n    wiresize = 0.75;\n}\nelse if(previous[\"CABLE_DIAMETER6\"] >= 2.40 && previous[\"CABLE_DIAMETER6\"] < 2.58 ){\n    wiresize = 1.00;\n}\nelse if(previous[\"CABLE_DIAMETER6\"] >= 2.86 && previous[\"CABLE_DIAMETER6\"] < 3.00 ){\n    wiresize = 1.50;\n}\nelse if(previous[\"CABLE_DIAMETER6\"] >= 3.48 && previous[\"CABLE_DIAMETER6\"] < 3.65 ){\n    wiresize = 2.50;\n}\nelse if(previous[\"CABLE_DIAMETER6\"] >= 4.02 && previous[\"CABLE_DIAMETER6\"] < 4.12 ){\n    wiresize = 4.00;\n}\nelse if(previous[\"CABLE_DIAMETER6\"] >= 4.52 && previous[\"CABLE_DIAMETER6\"] < 4.65 ){\n    wiresize = 6.00;\n}\n// When shift last data file is not existing, error node shall give the msg with all key:value pair.\nif(msg.hasOwnProperty(\"error\")){\n    // Send summary data to Postgresql for previous value at first spooler change after deployment. without subtraction of previous shift data.\n    \n    const query = `INSERT INTO ${tablename}(\n \t\"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${previous[\"LENGTH6\"]}, ${previous[\"MACHINE START6\"]}, ${wiresize});`\n    msg.query = query;\n    node.send([null, msg])\n    msg.payload = previous;\n    node.send([msg, null])\n \n}\nelse{\n    msg.payload = JSON.parse(msg.payload)\n    //When first spool change occurs after shift change subtract shift data from current spool lenght.\n    var lshiftlen = Number(msg.payload[\"LENGTH6\"]);\n    var previouslen = Number(previous[\"LENGTH6\"]);\n    var spoollen = previouslen - lshiftlen;\n    const query = `INSERT INTO ${tablename}(\n \t\"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${spoollen}, ${previous[\"MACHINE START6\"]}, ${wiresize});`\n\n    msg.query = query;\n    node.send([null, msg])\n    previous[\"LENGTH6\"] = 0;\n    msg.payload = previous;\n    node.send([msg, null])\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1980,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Spool change data)"
        ]
    },
    {
        "id": "4e98160524271505",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 6-Ping",
        "func": "const tableno = 33\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload == false){\n  const query = `INSERT INTO ${tablename}(\n\t\"Datetime\", \"ACTUAL_LENGTH\", \"CABLE_DIAMETER\",\n     \"EXTRUDER_45MM_RPM_ACT\", \"EXTRUDER_80MM_RPM_ACT\", \"LENGTH_SET_METER\",\n      \"LINE_SPEED_ACT\", \"LINE_SPEED_MAX\", \"MACHINE_START\", \"REASON_OF_STOP\", \n      \"RECIPE_NAME\", \"RECIPE_RECORD_NAME\", \"DOWN_TIME\")\n\tVALUES (${datetime}, ${0}, ${0}, ${0},\n     ${0}, ${0}, ${0}, ${0},\n      ${false}, ${7}, 'none', 'none', ${0});`\n\n       \n  // const values = [\n    \n  //   { dataPointId: \"1628142818119\", qualityCode: \"1\", value: \"7\"},//REASON_OF_STOP\n  //   { dataPointId: \"1628142808670\", qualityCode: \"1\", value: \"false\" },//MACHINE_START\n  //   { dataPointId: \"1628142798647\", qualityCode: \"1\", value: \"0\" },//ACTUAL_LENGTH\n  //   { dataPointId: \"1628142791726\", qualityCode: \"1\", value: \"0\" },//EXTRUDER_45MM_RPM_ACT\n  //   { dataPointId: \"1628142777297\", qualityCode: \"1\", value: \"0\" },//EXTRUDER_80MM_RPM_ACT\n  //   { dataPointId: \"1628142723457\", qualityCode: \"1\", value: \"0\" },//RECIPE_RECORD_NAME\n  //   { dataPointId: \"1628142715103\", qualityCode: \"1\", value: \"0\" },//RECIPE_NAME\n  //   { dataPointId: \"1628142708430\", qualityCode: \"1\", value: \"0\" },//LENGTH_SET_METER\t\n  //   { dataPointId: \"1628142700105\", qualityCode: \"1\", value: \"0\" },//CABLE_DIAMETER\n  //   { dataPointId: \"1628142678846\", qualityCode: \"1\", value: \"0\" },//LINE_SPEED_MAX\n  //   { dataPointId: \"1628142670999\", qualityCode: \"1\", value: \"0\" }//LINE_SPEED_ACT\n  //  ];\n\n    \n    //msg._time = new Date();\n    msg.query = query;   \n    return msg;\n    \n\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "d7356475e84ebf74",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Save & log Shift Lenght ",
        "func": "// When shift change file is not existing, error node shall trigger. First Data after deployment will be uploaded to Postgresql withour comaprision to previous shift data.\nvar current = JSON.parse(msg.localStorage.data);\nconst tableno = 27\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n\nvar wiresize = 0.0;\nif(current[\"CABLE_DIAMETER6\"] >= 2.24 && current[\"CABLE_DIAMETER6\"] < 2.37 ){\n    wiresize = 0.75;\n}\nelse if(current[\"CABLE_DIAMETER6\"] >= 2.40 && current[\"CABLE_DIAMETER6\"] < 2.58 ){\n    wiresize = 1.00;\n}\nelse if(current[\"CABLE_DIAMETER6\"] >= 2.86 && current[\"CABLE_DIAMETER6\"] < 3.00 ){\n    wiresize = 1.50;\n}\nelse if(current[\"CABLE_DIAMETER6\"] >= 3.48 && current[\"CABLE_DIAMETER6\"] < 3.65 ){\n    wiresize = 2.50;\n}\nelse if(current[\"CABLE_DIAMETER6\"] >= 4.02 && current[\"CABLE_DIAMETER6\"] < 4.12 ){\n    wiresize = 4.00;\n}\nelse if(current[\"CABLE_DIAMETER6\"] >= 4.52 && current[\"CABLE_DIAMETER6\"] < 4.65 ){\n    wiresize = 6.00;\n}\n\n\nif(msg.hasOwnProperty(\"error\")){\n    msg.payload = current;\n    node.send([msg, null]);\n    //Send Shift change data to Postgresql when first shift change occurs after deployment.\n    const query = `INSERT INTO ${tablename}(\n \t\"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${current[\"LENGTH6\"]}, ${current[\"MACHINE START6\"]}, ${wiresize});`\n    msg.query = query;\n    node.send([null, msg])\n }\n // When shift change data is available, current and shift data shall be compared and if found != then data shall be uploaded to Postgresql.\n else{\n     var lshift = JSON.parse(msg.payload);\n     //var current = msg.shiftchangedata;\n     var lshiftlen = Number(lshift[\"LENGTH6\"]);\n     var currentlen = Number(current[\"LENGTH6\"]);\n     msg.payload = lshiftlen;\n     if (lshiftlen != currentlen){\n         var length = Number(currentlen) - Number(lshiftlen);\n         const query = `INSERT INTO ${tablename}(\n \t\"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${length}, ${current[\"MACHINE START4\"]}, ${wiresize});`\n        msg.query = query;\n        node.send([null, msg]) // Send to Postgresql.\n        //msg = null;\n        msg.payload = current;\n        node.send([msg,null]) // Send to file for storing last shift data.\n     }\n     //return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 2020,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Shift Time Data)"
        ]
    },
    {
        "id": "40cce9c0440f1fa9",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 6 Summary",
        "info": "",
        "x": 180,
        "y": 1940,
        "wires": []
    },
    {
        "id": "128b60572b16fc5a",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 7 stop",
        "func": "var down;\nconst tableno = 34\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"MACHINE START7\"]==false){\n    \n     const query = `INSERT INTO ${tablename}(\n\t\"Datetime\", \"ACTUAL_LENGTH\", \"CABLE_DIAMETER\",\n     \"EXTRUDER_45MM_RPM_ACT\", \"EXTRUDER_80MM_RPM_ACT\", \"LENGTH_SET_METER\",\n      \"LINE_SPEED_ACT\", \"LINE_SPEED_MAX\", \"MACHINE_START\", \"REASON_OF_STOP\", \n      \"RECIPE_NAME\", \"RECIPE_RECORD_NAME\", \"DOWN_TIME\")\n\tVALUES (${datetime}, ${msg.payload[\"LENGTH7\"]}, ${msg.payload[\"CABLE_DIAMETER7\"]}, ${msg.payload[\"45MM_EXTRUDER_RPM_ACT7\"]},\n     ${msg.payload[\"80MM_EXTRUDER_RPM_ACT7\"]}, ${msg.payload[\"LENGTH_SET_METER7\"]}, ${0}, ${msg.payload[\"Actual_LineSpeed max7\"]},\n      ${msg.payload[\"MACHINE START7\"]}, ${msg.payload[\"REASON OF STOP7\"]}, '${msg.payload[\"RECIPE_NAME7\"]}', '${msg.payload[\"RECIPE_RECORD_NAME7\"]}', ${0});`\n\n   global.set(\"insulation7length\" ,msg.payload[\"LENGTH7\"] );\n   \nmsg.query = query;\nreturn msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 2120,
        "wires": [
            []
        ]
    },
    {
        "id": "d8a3d50bc72ffc95",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 7",
        "func": "var down;\nconst tableno = 34\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\nif(msg.payload[\"MACHINE START7\"]==true){\n    down= 0;\n    global.set(\"Insulation7down\",down);\n    \n\n    const query = `INSERT INTO ${tablename}(\n\t\"Datetime\", \"ACTUAL_LENGTH\", \"CABLE_DIAMETER\",\n     \"EXTRUDER_45MM_RPM_ACT\", \"EXTRUDER_80MM_RPM_ACT\", \"LENGTH_SET_METER\",\n      \"LINE_SPEED_ACT\", \"LINE_SPEED_MAX\", \"MACHINE_START\", \"REASON_OF_STOP\", \n      \"RECIPE_NAME\", \"RECIPE_RECORD_NAME\", \"DOWN_TIME\")\n\tVALUES (${datetime}, ${msg.payload[\"LENGTH7\"]}, ${msg.payload[\"CABLE_DIAMETER7\"]}, ${msg.payload[\"45MM_EXTRUDER_RPM_ACT7\"]},\n     ${msg.payload[\"80MM_EXTRUDER_RPM_ACT7\"]}, ${msg.payload[\"LENGTH_SET_METER7\"]}, ${msg.payload[\"Actual_LineSpeed7\"]}, ${msg.payload[\"Actual_LineSpeed max7\"]},\n      ${msg.payload[\"MACHINE START7\"]}, ${msg.payload[\"REASON OF STOP7\"]}, '${msg.payload[\"RECIPE_NAME7\"]}', '${msg.payload[\"RECIPE_RECORD_NAME7\"]}', ${down});`\n\n   global.set(\"insulation7length\" ,msg.payload[\"LENGTH7\"] );\n   \nmsg.query = query;\nreturn msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "42f9233ef6241d9d",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 7 -Ping",
        "func": "const tableno = 34\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\nif(msg.payload == false){\n       \n       \n     const query = `INSERT INTO ${tablename}(\n\t\"Datetime\", \"ACTUAL_LENGTH\", \"CABLE_DIAMETER\",\n     \"EXTRUDER_45MM_RPM_ACT\", \"EXTRUDER_80MM_RPM_ACT\", \"LENGTH_SET_METER\",\n      \"LINE_SPEED_ACT\", \"LINE_SPEED_MAX\", \"MACHINE_START\", \"REASON_OF_STOP\", \n      \"RECIPE_NAME\", \"RECIPE_RECORD_NAME\", \"DOWN_TIME\")\n\tVALUES (${datetime}, ${0}, ${0}, ${0},\n     ${0}, ${0}, ${0}, ${0},\n      ${false}, ${7}, 'none', 'none', ${0});`\n\n    msg.query = query;   \n    return msg;\n    \n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "a6797c6bdc6b6d55",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Save & log Shift Lenght ",
        "func": "// When shift change file is not existing, error node shall trigger. First Data after deployment will be uploaded to Postgresql withour comaprision to previous shift data.\nvar current = JSON.parse(msg.localStorage.data);\nconst tableno = 28\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n\n\nvar wiresize = 0.0;\nif(current[\"CABLE_DIAMETER7\"] >= 2.24 && current[\"CABLE_DIAMETER7\"] < 2.37 ){\n    wiresize = 0.75;\n}\nelse if(current[\"CABLE_DIAMETER7\"] >= 2.40 && current[\"CABLE_DIAMETER7\"] < 2.58 ){\n    wiresize = 1.00;\n}\nelse if(current[\"CABLE_DIAMETER7\"] >= 2.86 && current[\"CABLE_DIAMETER7\"] < 3.00 ){\n    wiresize = 1.50;\n}\nelse if(current[\"CABLE_DIAMETER7\"] >= 3.48 && current[\"CABLE_DIAMETER7\"] < 3.65 ){\n    wiresize = 2.50;\n}\nelse if(current[\"CABLE_DIAMETER7\"] >= 4.02 && current[\"CABLE_DIAMETER7\"] < 4.12 ){\n    wiresize = 4.00;\n}\nelse if(current[\"CABLE_DIAMETER7\"] >= 4.52 && current[\"CABLE_DIAMETER7\"] < 4.65 ){\n    wiresize = 6.00;\n}\n\n\nif(msg.hasOwnProperty(\"error\")){\n    msg.payload = current;\n    node.send([msg, null]);\n    //Send Shift change data to Postgresql when first shift change occurs after deployment.\n    const query = `INSERT INTO ${tablename}(\n \t\"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${current[\"LENGTH7\"]}, ${current[\"MACHINE START7\"]}, ${wiresize});`\n    \n    msg.query = query\n    node.send([null, msg])\n }\n // When shift change data is available, current and shift data shall be compared and if found != then data shall be uploaded to Postgresql.\n else{\n     var lshift = JSON.parse(msg.payload);\n     //var current = msg.shiftchangedata;\n     var lshiftlen = Number(lshift[\"LENGTH7\"]);\n     var currentlen = Number(current[\"LENGTH7\"]);\n     msg.payload = lshiftlen;\n     if (lshiftlen != currentlen){\n         var length = Number(currentlen) - Number(lshiftlen);\n         const query = `INSERT INTO ${tablename}(\n \t\"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${length}, ${current[\"MACHINE START7\"]}, ${wiresize});`\n        msg.query = query;\n        node.send([null, msg]) // Send to Postgresql.\n        //msg = null;\n        msg.payload = current;\n        node.send([msg,null]) // Send to file for storing last shift data.\n     }\n     //return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 2300,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Shift Time Data)"
        ]
    },
    {
        "id": "a96430223abf66c2",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Send data to Mindsphere ",
        "func": "var previous = msg.spoolchange[\"previous\"];\nconst tableno = 28\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\nvar wiresize = 0.0;\nif(previous[\"CABLE_DIAMETER7\"] >= 2.24 && previous[\"CABLE_DIAMETER7\"] < 2.37 ){\n    wiresize = 0.75;\n}\nelse if(previous[\"CABLE_DIAMETER7\"] >= 2.40 && previous[\"CABLE_DIAMETER7\"] < 2.58 ){\n    wiresize = 1.00;\n}\nelse if(previous[\"CABLE_DIAMETER7\"] >= 2.86 && previous[\"CABLE_DIAMETER7\"] < 3.00 ){\n    wiresize = 1.50;\n}\nelse if(previous[\"CABLE_DIAMETER7\"] >= 3.48 && previous[\"CABLE_DIAMETER7\"] < 3.65 ){\n    wiresize = 2.50;\n}\nelse if(previous[\"CABLE_DIAMETER7\"] >= 4.02 && previous[\"CABLE_DIAMETER7\"] < 4.12 ){\n    wiresize = 4.00;\n}\nelse if(previous[\"CABLE_DIAMETER7\"] >= 4.52 && previous[\"CABLE_DIAMETER7\"] < 4.65 ){\n    wiresize = 6.00;\n}\n// When shift last data file is not existing, error node shall give the msg with all key:value pair.\nif(msg.hasOwnProperty(\"error\")){\n    // Send summary data to Postgresql for previous value at first spooler change after deployment. without subtraction of previous shift data.\n     const query = `INSERT INTO ${tablename}(\n \t\"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${previous[\"LENGTH7\"]}, ${previous[\"MACHINE START7\"]}, ${wiresize});`\n    msg.query = query;\n    node.send([null, msg])\n    msg.payload = previous;\n    node.send([msg, null])\n \n}\nelse{\n    msg.payload = JSON.parse(msg.payload)\n    //When first spool change occurs after shift change subtract shift data from current spool lenght.\n    var lshiftlen = Number(msg.payload[\"LENGTH7\"]);\n    var previouslen = Number(previous[\"LENGTH7\"]);\n    var spoollen = previouslen - lshiftlen;\n\n    const query = `INSERT INTO ${tablename}(\n \t\"Datetime\", \"Length\", \"Machine_Status\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${spoollen}, ${previous[\"MACHINE START7\"]}, ${wiresize});`\n    msg.query = query;\n    node.send([null, msg])\n    previous[\"LENGTH7\"] = 0;\n    msg.payload = previous;\n    node.send([msg, null])\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 2340,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Spool change data)"
        ]
    },
    {
        "id": "16391d6176685fdb",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 7",
        "info": "",
        "x": 150,
        "y": 2080,
        "wires": []
    },
    {
        "id": "12b13eb4888e67d5",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Insulation 7 Summary",
        "info": "",
        "x": 180,
        "y": 2260,
        "wires": []
    },
    {
        "id": "cbf2018df0c59dd0",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 1",
        "func": "var bool = [\"true\",\"false\"];\nvar down;\nconst tableno = 5\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nvar msg1 = null;\nif(msg.payload[\"Status\"]==true){\n    down= global.get(\"Buncher1down\") + 1;\n    global.set(\"Buncher1down\",down);\n    flow.set(\"Buncher_1_len\",msg.payload[\"LENGTH ACTUAL KM1\"].toString());\n    \n    \n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"DOWN_TIME\", \"LAY_LENGTH_MM\", \"LENGTH_ACTUAL_KM\", \"LENGTH_SET_KM\", \"LINE_SPEED_ACT\", \"REASON_OF_STOP\", \"Status\",  \"TWIST_PER_MINUTE_ACT\", \"TWIST_PER_MINUTE_MAX\", \"WIRE_SIZE_MM2\")\n\tVALUES ('${datetime}', ${down},\n    ${msg.payload[\"LAY LENGTH MM1\"]},\n    ${msg.payload[\"LENGTH ACTUAL KM1\"]}, \n    ${msg.payload[\"LENGTH SET KM1\"]}, \n    ${msg.payload[\"LINE SPEED ACT1\"]}, \n    ${msg.payload[\"REASON OF STOP5\"]}, \n    ${msg.payload[\"Status\"]}, \n    ${msg.payload[\"TWIST PER MINUTE ACT1\"]}, \n    ${msg.payload[\"TWIST PER MINUTE MAX1\"]}, \n    ${msg.payload[\"WIRE SIZE MM21\"]});`\n    msg.query = query\nreturn msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "bde13a9006802f20",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 1 stop",
        "func": "var bool = [\"true\",\"false\"];\nvar down;\nvar msg1 = null;\nconst tableno = 5\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"Status\"]==false){\n    \n    flow.set(\"Buncher_1_len\",msg.payload[\"LENGTH ACTUAL KM1\"].toString());\n    const query =`INSERT INTO ${tablename}(\n\t \"Datetime\", \"DOWN_TIME\", \"LAY_LENGTH_MM\", \"LENGTH_ACTUAL_KM\", \"LENGTH_SET_KM\", \"LINE_SPEED_ACT\", \"REASON_OF_STOP\", \"Status\",  \"TWIST_PER_MINUTE_ACT\", \"TWIST_PER_MINUTE_MAX\", \"WIRE_SIZE_MM2\")\n\tVALUES ('${datetime}', ${0},\n    ${msg.payload[\"LAY LENGTH MM1\"]},\n    ${msg.payload[\"LENGTH ACTUAL KM1\"]}, \n    ${msg.payload[\"LENGTH SET KM1\"]}, \n    ${0}, \n    ${msg.payload[\"REASON OF STOP5\"]}, \n    ${msg.payload[\"Status\"]}, \n    ${msg.payload[\"TWIST PER MINUTE ACT1\"]}, \n    ${msg.payload[\"TWIST PER MINUTE MAX1\"]}, \n    ${msg.payload[\"WIRE SIZE MM21\"]});`\n    msg.query=query\n  // global.set(\"Buncher1length\",msg.payload[\"LENGTH ACTUAL KM1\"]);\n   \nreturn msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "6ca017d493d1cd9e",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 1 Ping",
        "func": "const tableno = 5\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload == false){\n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"DOWN_TIME\", \"LAY_LENGTH_MM\", \"LENGTH_ACTUAL_KM\", \"LENGTH_SET_KM\", \"LINE_SPEED_ACT\", \"REASON_OF_STOP\", \"Status\",  \"TWIST_PER_MINUTE_ACT\", \"TWIST_PER_MINUTE_MAX\", \"WIRE_SIZE_MM2\")\n\tVALUES ('${datetime}', ${0},\n    ${0},\n    ${0}, \n    ${0}, \n    ${0}, \n    ${7}, \n    ${false}, \n    ${0}, \n    ${0}, \n    ${0});`\n    msg.query = query\n   \n    return msg;\n    \n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "36a8de4f178e3c69",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Save & log Shift Lenght ",
        "func": "// When shift change file is not existing, error node shall trigger. First Data after deployment will be uploaded to Postgresql withour comaprision to previous shift data.\nvar current = JSON.parse(msg.localStorage.data);\nconst tableno=1\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n\n\nif(msg.hasOwnProperty(\"error\")){\n    //Write current data to the last shift data file\n    msg.payload = current;\n    node.send([msg, null]);\n    //Send Shift change data to Postgresql when first shift change occurs after deployment.\n    const query =`INSERT INTO ${tablename}(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${current[\"LENGTH ACTUAL KM1\"]}, ${current[\"Status\"]}, ${current[\"WIRE SIZE MM21\"]});`\n    msg.query = query;\n    node.send([null, msg])\n }\n // When shift change data is available, current and shift data shall be compared and if found != then data shall be uploaded to Postgresql.\n else{\n     var lshift = JSON.parse(msg.payload);\n     //var current = msg.shiftchangedata;\n     var lshiftlen = Number(lshift[\"LENGTH ACTUAL KM1\"]);\n     var currentlen = Number(current[\"LENGTH ACTUAL KM1\"]);\n     msg.payload = lshiftlen;\n     if (lshiftlen != currentlen){\n        var length = Number(currentlen) - Number(lshiftlen);\n\n        const query = `INSERT INTO public.\"SD_Unit7_Buncher_1\"(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${length}, ${current[\"Status\"]}, ${current[\"WIRE SIZE MM21\"]});`\n\n        msg.query = query;\n        node.send([null, msg]) // Send to Postgresql.\n        //msg = null;\n        msg.payload = current;\n        node.send([msg,null]) // Send to file for storing last shift data.\n     }\n     //return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 360,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Shift Time Data)"
        ]
    },
    {
        "id": "1d1ce496775cbdad",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Send data to Postgresql",
        "func": "var previous = msg.spoolchange[\"previous\"];\nconst tableno=1\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n// When shift last data file is not existing, error node shall give the msg with all key:value pair.\nif(msg.hasOwnProperty(\"error\")){\n    // Send summary data to mindsphere for previous value at first spooler change after deployment. without subtraction of previous shift data.\n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${previous[\"LENGTH ACTUAL KM1\"]}, ${previous[\"Status\"]}, ${previous[\"WIRE SIZE MM21\"]});`\n\n    msg.query = query;\n    node.send([null, msg])\n    msg.payload = previous;\n    node.send([msg, null])\n \n}\nelse{\n    msg.payload = JSON.parse(msg.payload)\n    //When first spool change occurs after shift change subtract shift data from current spool lenght.\n    var lshiftlen = Number(msg.payload[\"LENGTH ACTUAL KM1\"]);\n    var previouslen = Number(previous[\"LENGTH ACTUAL KM1\"]);\n    var spoollen = previouslen - lshiftlen;\n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${spoollen}, ${previous[\"Status\"]}, ${previous[\"WIRE SIZE MM21\"]});`\n    msg.query = query;\n    node.send([null, msg])\n    previous[\"LENGTH ACTUAL KM1\"] = 0;\n    msg.payload = previous;\n    node.send([msg, null])\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 400,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Spool change data)"
        ]
    },
    {
        "id": "fdd18ce66fc9508e",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 1",
        "info": "",
        "x": 460,
        "y": 140,
        "wires": []
    },
    {
        "id": "c5463fc416b28491",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 1 Summary",
        "info": "",
        "x": 490,
        "y": 320,
        "wires": []
    },
    {
        "id": "cf228f7051be6266",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 2",
        "func": "var bool = [\"true\",\"false\"];\nvar down;\nvar msg1 = null;\nconst tableno = 5\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"Status\"]==true){\n    down= global.get(\"Buncher2down\") + 1;\n    global.set(\"Buncher2down\",down);\n    flow.set(\"Buncher_2_len\",msg.payload[\"LENGTH ACTUAL KM2\"].toString());\n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"DOWN_TIME\", \"LAY_LENGTH_MM\", \"LENGTH_ACTUAL_KM\", \"LENGTH_SET_KM\", \"LINE_SPEED_ACT\", \"REASON_OF_STOP\", \"Status\",  \"TWIST_PER_MINUTE_ACT\", \"TWIST_PER_MINUTE_MAX\", \"WIRE_SIZE_MM2\")\n\tVALUES ('${datetime}', ${0},\n    ${msg.payload[\"LAY LENGTH MM2\"]},\n    ${msg.payload[\"LENGTH ACTUAL KM2\"]}, \n    ${msg.payload[\"LENGTH SET KM2\"]}, \n    ${msg.payload[\"LINE SPEED ACT2\"]}, \n    ${msg.payload[\"REASON OF STOP6\"]}, \n    ${msg.payload[\"Status\"]}, \n    ${msg.payload[\"TWIST PER MINUTE ACT2\"]}, \n    ${msg.payload[\"TWIST PER MINUTE MAX2\"]}, \n    ${msg.payload[\"WIRE SIZE MM22\"]});`\n    \n   //global.set(\"Buncher2length\",msg.payload[\"LENGTH ACTUAL KM2\"]);\n   \n   msg._time = new Date();\n   msg.query = query;\nreturn msg;\n}\n\n\n   ",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "3e8e4bdf70eb778e",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 2 stop",
        "func": "var bool = [\"true\",\"false\"];\nvar down;\nvar msg1 = null;\nconst tableno = 6\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"Status\"]==false){\n    \n    flow.set(\"Buncher_2_len\",msg.payload[\"LENGTH ACTUAL KM2\"].toString());\n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"DOWN_TIME\", \"LAY_LENGTH_MM\", \"LENGTH_ACTUAL_KM\", \"LENGTH_SET_KM\", \"LINE_SPEED_ACT\", \"REASON_OF_STOP\", \"Status\",  \"TWIST_PER_MINUTE_ACT\", \"TWIST_PER_MINUTE_MAX\", \"WIRE_SIZE_MM2\")\n\tVALUES ('${datetime}', ${0},\n    ${msg.payload[\"LAY LENGTH MM2\"]},\n    ${msg.payload[\"LENGTH ACTUAL KM2\"]}, \n    ${msg.payload[\"LENGTH SET KM2\"]}, \n    ${0}, \n    ${msg.payload[\"REASON OF STOP6\"]}, \n    ${msg.payload[\"Status\"]}, \n    ${msg.payload[\"TWIST PER MINUTE ACT2\"]}, \n    ${msg.payload[\"TWIST PER MINUTE MAX2\"]}, \n    ${msg.payload[\"WIRE SIZE MM22\"]});`\n    msg.query = query\n   //global.set(\"Buncher2length\",msg.payload[\"LENGTH ACTUAL KM2\"]);\nreturn msg;\n}\n\n\n    //MMW32-1\n    \n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "b1e6c76f75e7eb05",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 2 Ping",
        "func": "const tableno = 6\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload == false){\n  const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"DOWN_TIME\", \"LAY_LENGTH_MM\", \"LENGTH_ACTUAL_KM\", \"LENGTH_SET_KM\", \"LINE_SPEED_ACT\", \"REASON_OF_STOP\", \"Status\",  \"TWIST_PER_MINUTE_ACT\", \"TWIST_PER_MINUTE_MAX\", \"WIRE_SIZE_MM2\")\n\tVALUES ('${datetime}', ${0},\n    ${0},\n    ${0}, \n    ${0}, \n    ${0}, \n    ${7}, \n    ${false}, \n    ${0}, \n    ${0}, \n    ${0});`\n    msg.query=query\n    return msg;\n    \n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "212f9c75a001eb47",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Send data to Postgresql",
        "func": "var previous = msg.spoolchange[\"previous\"];\nconst tableno=2\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n// When shift last data file is not existing, error node shall give the msg with all key:value pair.\nif(msg.hasOwnProperty(\"error\")){\n    // Send summary data to mindsphere for previous value at first spooler change after deployment. without subtraction of previous shift data.\n    msg.payload = previous;\n    node.send([msg, null])  \n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${previous[\"LENGTH ACTUAL KM2\"]}, ${previous[\"Status\"]}, ${previous[\"WIRE SIZE MM22\"]});`  \n    msg.query = query;\n    msg._time = new Date()\n    node.send([null, msg])\n\n \n}\nelse{\n    msg.payload = JSON.parse(msg.payload)\n    //When first spool change occurs after shift change subtract shift data from current spool lenght.\n    var lshiftlen = Number(msg.payload[\"LENGTH ACTUAL KM2\"]);\n    var previouslen = Number(previous[\"LENGTH ACTUAL KM2\"]);\n    var spoollen = previouslen - lshiftlen;\n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${spoollen}, ${previous[\"Status\"]}, ${previous[\"WIRE SIZE MM22\"]});`\n    msg.query = query;\n    node.send([null, msg])\n    previous[\"LENGTH ACTUAL KM2\"] = 0;\n    msg.payload = previous;\n    node.send([msg, null])\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 680,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Spool change data)"
        ]
    },
    {
        "id": "2d6aec43b6a9f634",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Save & log Shift Lenght ",
        "func": "// When shift change file is not existing, error node shall trigger. First Data after deployment will be uploaded to Postgresql withour comaprision to previous shift data.\nvar current = JSON.parse(msg.localStorage.data);\nconst tableno = 2\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n\nif(msg.hasOwnProperty(\"error\")){\n    msg.payload = current;\n    node.send([msg, null]);\n    //Send Shift change data to Postgresql when first shift change occurs after deployment.\n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${current[\"LENGTH ACTUAL KM2\"]}, ${current[\"Status\"]}, ${current[\"WIRE SIZE MM22\"]});`\n    msg.query = query;\n    node.send([null, msg])\n }\n // When shift change data is available, current and shift data shall be compared and if found != then data shall be uploaded to Postgresql.\n else{\n     var lshift = JSON.parse(msg.payload);\n     //var current = msg.shiftchangedata;\n     var lshiftlen = Number(lshift[\"LENGTH ACTUAL KM2\"]);\n     var currentlen = Number(current[\"LENGTH ACTUAL KM2\"]);\n     msg.payload = lshiftlen;\n     if (lshiftlen != currentlen){\n         var length = Number(currentlen) - Number(lshiftlen);\n         const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${length}, ${current[\"Status\"]}, ${current[\"WIRE SIZE MM22\"]});`\n         msg.query = query;\n        node.send([null, msg]) // Send to Postgresql.\n        //msg = null;\n        msg.payload = current;\n        node.send([msg, null]) // Send to file for storing last shift data.\n     }\n     //return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 720,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Shift Time Data)"
        ]
    },
    {
        "id": "8707a0808398e1c2",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 2",
        "info": "",
        "x": 460,
        "y": 460,
        "wires": []
    },
    {
        "id": "e0ee24f972d1b783",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 2 Summary",
        "info": "",
        "x": 490,
        "y": 640,
        "wires": []
    },
    {
        "id": "80d6ebc84ce1f550",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 3",
        "func": "var bool = [\"true\",\"false\"];\nvar down;\nvar msg1 = null;\nconst tableno = 7\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"Status\"]==true){\n    down= global.get(\"Buncher3down\") + 1;\n    global.set(\"Buncher3down\",down);\n    flow.set(\"Buncher_3_len\",msg.payload[\"LENGTH ACTUAL KM3\"].toString());\n    \n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"DOWN_TIME\", \"LAY_LENGTH_MM\", \"LENGTH_ACTUAL_KM\", \"LENGTH_SET_KM\", \"LINE_SPEED_ACT\", \"REASON_OF_STOP\", \"Status\",  \"TWIST_PER_MINUTE_ACT\", \"TWIST_PER_MINUTE_MAX\", \"WIRE_SIZE_MM2\")\n\tVALUES ('${datetime}', ${0},\n    ${msg.payload[\"LAY LENGTH MM3\"]},\n    ${msg.payload[\"LENGTH ACTUAL KM3\"]}, \n    ${msg.payload[\"LENGTH SET KM3\"]}, \n    ${msg.payload[\"LINE SPEED ACT3\"]}, \n    ${msg.payload[\"REASON OF STOP7\"]}, \n    ${msg.payload[\"Status\"]}, \n    ${msg.payload[\"TWIST PER MINUTE ACT3\"]}, \n    ${msg.payload[\"TWIST PER MINUTE MAX3\"]}, \n    ${msg.payload[\"WIRE SIZE MM23\"]});`\n   msg.query = query\nreturn msg;\n}\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "a2e64509fe5af41a",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 3 stop",
        "func": "var bool = [\"true\",\"false\"];\nvar down;\nvar msg1 = null;\nconst tableno = 7\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\n\nif(msg.payload[\"Status\"]==false){\n    \n     flow.set(\"Buncher_3_len\",msg.payload[\"LENGTH ACTUAL KM3\"].toString());\n   \n   const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"DOWN_TIME\", \"LAY_LENGTH_MM\", \"LENGTH_ACTUAL_KM\", \"LENGTH_SET_KM\", \"LINE_SPEED_ACT\", \"REASON_OF_STOP\", \"Status\",  \"TWIST_PER_MINUTE_ACT\", \"TWIST_PER_MINUTE_MAX\", \"WIRE_SIZE_MM2\")\n\tVALUES ('${datetime}', ${0},\n    ${msg.payload[\"LAY LENGTH MM3\"]},\n    ${msg.payload[\"LENGTH ACTUAL KM3\"]}, \n    ${msg.payload[\"LENGTH SET KM3\"]}, \n    ${0}, \n    ${msg.payload[\"REASON OF STOP7\"]}, \n    ${msg.payload[\"Status\"]}, \n    ${msg.payload[\"TWIST PER MINUTE ACT3\"]}, \n    ${msg.payload[\"TWIST PER MINUTE MAX3\"]}, \n    ${msg.payload[\"WIRE SIZE MM23\"]});`\n   msg.query = query\n   //global.set(\"Buncher3length\",msg.payload[\"LENGTH ACTUAL KM3\"]);\n   \n   msg._time = new Date();\nmsg.query = query;\nreturn msg;\n}\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "6857258134cfc006",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 3 Ping",
        "func": "const tableno = 7\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload == false ){\n\nconst query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"DOWN_TIME\", \"LAY_LENGTH_MM\", \"LENGTH_ACTUAL_KM\", \"LENGTH_SET_KM\", \"LINE_SPEED_ACT\", \"REASON_OF_STOP\", \"Status\",  \"TWIST_PER_MINUTE_ACT\", \"TWIST_PER_MINUTE_MAX\", \"WIRE_SIZE_MM2\")\n\tVALUES ('${datetime}', ${0},\n    ${0},\n    ${0}, \n    ${0}, \n    ${0}, \n    ${7}, \n    ${false}, \n    ${0}, \n    ${0}, \n    ${0});`\n   msg.query = query    \n    return msg;\n    \n\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "5df1251490bebffc",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Save & log Shift Lenght ",
        "func": "// When shift change file is not existing, error node shall trigger. First Data after deployment will be uploaded to Postgresql withour comaprision to previous shift data.\nvar current = JSON.parse(msg.localStorage.data);\nconst tableno=3\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n\n//When deployed for the firest time, files donot exist, hence this if statement logs current data to Postgresql and makes a file\nif(msg.hasOwnProperty(\"error\")){\n    msg.payload = current;\n    node.send([msg, null]);\n    //Send Shift change data to Postgresql when first shift change occurs after deployment.\n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${current[\"LENGTH ACTUAL KM3\"]}, ${current[\"Status\"]}, ${current[\"WIRE SIZE MM23\"]});`\n    msg.query = query\n    node.send([null, msg])\n }\n // When shift change data is available, current and shift data shall be compared and if found != then data shall be uploaded to Postgresql.\n else{\n     var lshift = JSON.parse(msg.payload);\n     //var current = msg.shiftchangedata;\n     var lshiftlen = Number(lshift[\"LENGTH ACTUAL KM3\"]);\n     var currentlen = Number(current[\"LENGTH ACTUAL KM3\"]);\n     msg.payload = lshiftlen;\n     if (lshiftlen != currentlen){\n         var length = Number(currentlen) - Number(lshiftlen);\n         const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${length}, ${current[\"Status\"]}, ${current[\"WIRE SIZE MM23\"]});`\n         msg.query = query\n        node.send([null, msg]) // Send to Postgresql.\n        //msg = null;\n        msg.payload = current;\n        node.send([msg,null]) // Send to file for storing last shift data.\n     }\n     //return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1060,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Shift Time Data)"
        ]
    },
    {
        "id": "1658f5feb59fe0fe",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Send data to Postgresql",
        "func": "var previous = msg.spoolchange[\"previous\"];\nconst tableno=3\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n// When shift last data file is not existing, error node shall give the msg with all key:value pair.\nif(msg.hasOwnProperty(\"error\")){\n    // Send summary data to mindsphere for previous value at first spooler change after deployment. without subtraction of previous shift data.\n    \n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${previous[\"LENGTH ACTUAL KM3\"]}, ${previous[\"Status\"]}, ${previous[\"WIRE SIZE MM23\"]});`\n    msg.query=query\n    \n    node.send([null, msg])\n    msg.payload = previous;\n    node.send([msg, null])\n \n}\nelse{\n    msg.payload = JSON.parse(msg.payload)\n    //When first spool change occurs after shift change subtract shift data from current spool lenght.\n    var lshiftlen = Number(msg.payload[\"LENGTH ACTUAL KM3\"]);\n    var previouslen = Number(previous[\"LENGTH ACTUAL KM3\"]);\n    var spoollen = previouslen - lshiftlen;\n\n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${spoollen}, ${previous[\"Status\"]}, ${previous[\"WIRE SIZE MM23\"]});`\n    msg.query = query\n\n    node.send([null, msg])\n    previous[\"LENGTH ACTUAL KM3\"] = 0;\n    msg.payload = previous;\n    node.send([msg, null])\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1020,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Spool change data)"
        ]
    },
    {
        "id": "a469adfbbf582381",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 3",
        "info": "",
        "x": 460,
        "y": 800,
        "wires": []
    },
    {
        "id": "4c4fc755f4e9c82c",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 3 Summary",
        "info": "",
        "x": 490,
        "y": 980,
        "wires": []
    },
    {
        "id": "09450f9d7cbb2d5a",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 4",
        "func": "var bool = [\"true\",\"false\"];\nvar down;\nvar msg1 = null;\nconst tableno = 8\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"Status\"]==true){\n    down= global.get(\"Buncher4down\") + 1;\n    global.set(\"Buncher4down\",down);\n    flow.set(\"Buncher_4_len\",msg.payload[\"LENGTH ACTUAL KM4\"].toString());\n\n  const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"DOWN_TIME\", \"LAY_LENGTH_MM\", \"LENGTH_ACTUAL_KM\", \"LENGTH_SET_KM\", \"LINE_SPEED_ACT\", \"REASON_OF_STOP\", \"Status\",  \"TWIST_PER_MINUTE_ACT\", \"TWIST_PER_MINUTE_MAX\", \"WIRE_SIZE_MM2\")\n\tVALUES ('${datetime}', ${0},\n    ${msg.payload[\"LAY LENGTH MM4\"]},\n    ${msg.payload[\"LENGTH ACTUAL KM4\"]}, \n    ${msg.payload[\"LENGTH SET KM4\"]}, \n    ${ msg.payload[\"LINE SPEED ACT4\"]}, \n    ${msg.payload[\"REASON OF STOP8\"]}, \n    ${msg.payload[\"Status\"]}, \n    ${msg.payload[\"TWIST PER MINUTE ACT4\"]}, \n    ${msg.payload[\"TWIST PER MINUTE MAX4\"]}, \n    ${msg.payload[\"WIRE SIZE MM24\"]});`\n\n    msg.query=query\n   //global.set(\"Buncher4length\",msg.payload[\"LENGTH ACTUAL KM4\"]);\n   \nreturn msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "7df39143eab41d6c",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 4 stop",
        "func": "var bool = [\"true\",\"false\"];\nvar down;\nvar msg1 = null;\nconst tableno = 8\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"Status\"]==false){\n   flow.set(\"Buncher_4_len\",msg.payload[\"LENGTH ACTUAL KM4\"].toString());\n    \n     const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"DOWN_TIME\", \"LAY_LENGTH_MM\", \"LENGTH_ACTUAL_KM\", \"LENGTH_SET_KM\", \"LINE_SPEED_ACT\", \"REASON_OF_STOP\", \"Status\",  \"TWIST_PER_MINUTE_ACT\", \"TWIST_PER_MINUTE_MAX\", \"WIRE_SIZE_MM2\")\n\tVALUES ('${datetime}', ${0},\n    ${msg.payload[\"LAY LENGTH MM4\"]},\n    ${msg.payload[\"LENGTH ACTUAL KM4\"]}, \n    ${msg.payload[\"LENGTH SET KM4\"]}, \n    ${0}, \n    ${msg.payload[\"REASON OF STOP8\"]}, \n    ${msg.payload[\"Status\"]}, \n    ${msg.payload[\"TWIST PER MINUTE ACT4\"]}, \n    ${msg.payload[\"TWIST PER MINUTE MAX4\"]}, \n    ${msg.payload[\"WIRE SIZE MM24\"]});`\n\n    msg.query=query\n\n  \n   //global.set(\"Buncher4length\",msg.payload[\"LENGTH ACTUAL KM4\"]);\n   \nreturn msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "d03e084c0b3f14a4",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Send data to Postgresql",
        "func": "var previous = msg.spoolchange[\"previous\"];\nconst tableno = 4\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n// When shift last data file is not existing, error node shall give the msg with all key:value pair.\nif(msg.hasOwnProperty(\"error\")){\n    // Send summary data to mindsphere for previous value at first spooler change after deployment. without subtraction of previous shift data.\n    // msg.payload = true;\n    // node.send([null, msg])\n       const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${previous[\"LENGTH ACTUAL KM4\"]}, ${previous[\"Status\"]}, ${previous[\"WIRE SIZE MM24\"]});`\n    msg.query=query\n    // const values = [\n    //     { dataPointId: \"1639476822035\", qualityCode: \"1\", value: previous[\"WIRE SIZE MM24\"].toString() },//WIRE_SIZE_MM2\n    //      { dataPointId: \"1639476831367\", qualityCode: \"1\", value: previous[\"LENGTH ACTUAL KM4\"].toString() },//LENGTH_ACTUAL_KM\n    //      { dataPointId: \"1639476810135\", qualityCode: \"1\", value: previous[\"Status\"].toString() }\n    //     ];\n    // msg.payload = values;\n    // msg._time = new Date()\n    node.send([null, msg])\n    msg.payload = previous;\n    node.send([msg, null])\n \n}\nelse{\n    //When first spool change occurs after shift change subtract shift data from current spool lenght.\n    msg.payload = JSON.parse(msg.payload);\n    var lshiftlen = Number(msg.payload[\"LENGTH ACTUAL KM4\"]);\n    var previouslen = Number(previous[\"LENGTH ACTUAL KM4\"]);\n    var spoollen = previouslen - lshiftlen;\n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${spoollen}, ${previous[\"Status\"]}, ${previous[\"WIRE SIZE MM24\"]});`\n    msg.query = query\n    node.send([null, msg])\n    previous[\"LENGTH ACTUAL KM4\"] = 0;\n    msg.payload = previous;\n    node.send([msg, null])\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1340,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Spool change data)"
        ]
    },
    {
        "id": "580b8e0562a717ac",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Save & log Shift Lenght ",
        "func": "// When shift change file is not existing, error node shall trigger. First Data after deployment will be uploaded to Postgresql withour comaprision to previous shift data.\nvar current = JSON.parse(msg.localStorage.data);\nconst tableno = 4\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n\nif(msg.hasOwnProperty(\"error\")){\n    msg.payload = current;\n    node.send([msg, null]);\n    //Send Shift change data to Postgresql when first shift change occurs after deployment.\n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${current[\"LENGTH ACTUAL KM4\"]}, ${current[\"Status\"]}, ${current[\"WIRE SIZE MM24\"]});`\n    msg.query = query\n    node.send([null, msg])\n }\n // When shift change data is available, current and shift data shall be compared and if found != then data shall be uploaded to Postgresql.\n else{\n     var lshift = JSON.parse(msg.payload);\n     //var current = msg.shiftchangedata;\n     var lshiftlen = Number(lshift[\"LENGTH ACTUAL KM4\"]);\n     var currentlen = Number(current[\"LENGTH ACTUAL KM4\"]);\n     msg.payload = lshiftlen;\n     if (lshiftlen != currentlen){\n         var length = Number(currentlen) - Number(lshiftlen);\n         \n         const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${length}, ${current[\"Status\"]}, ${current[\"WIRE SIZE MM24\"]});`\n         msg.query = query\n\n        node.send([null, msg]) // Send to Postgresql.\n        //msg = null;\n        msg.payload = current;\n        node.send([msg,null]) // Send to file for storing last shift data.\n     }\n     //return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1380,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Shift Time Data)"
        ]
    },
    {
        "id": "f956039a5295c5c9",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 4 Ping",
        "func": "const tableno = 8\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload == false){\n       \n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"DOWN_TIME\", \"LAY_LENGTH_MM\", \"LENGTH_ACTUAL_KM\", \"LENGTH_SET_KM\", \"LINE_SPEED_ACT\", \"REASON_OF_STOP\", \"Status\",  \"TWIST_PER_MINUTE_ACT\", \"TWIST_PER_MINUTE_MAX\", \"WIRE_SIZE_MM2\")\n\tVALUES ('${datetime}', ${0},\n    ${0},\n    ${0}, \n    ${0}, \n    ${0}, \n    ${7}, \n    ${false}, \n    ${0}, \n    ${0}, \n    ${0});`\n   \n    msg._time = new Date();\n    msg.query = query;   \n    return msg;\n    \n\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "be647f1a5be9ca52",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 4",
        "info": "",
        "x": 460,
        "y": 1120,
        "wires": []
    },
    {
        "id": "d59358b489835346",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 4 Summary",
        "info": "",
        "x": 490,
        "y": 1300,
        "wires": []
    },
    {
        "id": "b2b0fbffb858afbb",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 5",
        "func": "var bool = [\"true\",\"false\"];\nvar down;\nvar msg1 = null;\nconst tableno = 9\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"Status\"]===true){\n    down= global.get(\"Buncher5down\") + 1;\n    global.set(\"Buncher5down\",down);\n    flow.set(\"Buncher_5_len\",msg.payload[\"LENGTH ACTUAL KM5\"].toString());\n    \n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"DOWN_TIME\", \"LAY_LENGTH_MM\", \"LENGTH_ACTUAL_KM\", \"LENGTH_SET_KM\", \"LINE_SPEED_ACT\", \"REASON_OF_STOP\", \"Status\",  \"TWIST_PER_MINUTE_ACT\", \"TWIST_PER_MINUTE_MAX\", \"WIRE_SIZE_MM2\")\n\tVALUES ('${datetime}', ${0},\n    ${msg.payload[\"LAY LENGTH MM5\"]},\n    ${msg.payload[\"LENGTH ACTUAL KM5\"]}, \n    ${msg.payload[\"LENGTH SET KM5\"]}, \n    ${msg.payload[\"LINE SPEED ACT5\"]}, \n    ${msg.payload[\"REASON OF STOP9\"]}, \n    ${msg.payload[\"Status\"]}, \n    ${msg.payload[\"TWIST PER MINUTE ACT5\"]}, \n    ${msg.payload[\"TWIST PER MINUTE MAX5\"]}, \n    ${msg.payload[\"WIRE SIZE MM25\"]});`\n\n    msg.query = query\n    \n    \n//     const values = [\n//     //MMW32-2\n//     { dataPointId: \"DP-TWIST_PER_MINUTE_MAX00005\", qualityCode: \"1\", value: msg.payload[\"TWIST PER MINUTE MAX5\"].toString()},//TWIST_PER_MINUTE_MAX\n//     { dataPointId: \"DP-TWIST_PER_MINUTE_ACT00005\", qualityCode: \"1\", value: msg.payload[\"TWIST PER MINUTE ACT5\"].toString() },//TWIST_PER_MINUTE_ACT\n//     { dataPointId: \"1626499870215\", qualityCode: \"1\", value: msg.payload[\"LINE SPEED ACT5\"].toString() },//LINE_SPEED_ACT\n//     { dataPointId: \"1626499906784\", qualityCode: \"1\", value: msg.payload[\"WIRE SIZE MM25\"].toString() },//WIRE_SIZE_MM2\n//     { dataPointId: \"DP-REASON_OF_STOP00005\", qualityCode: \"1\", value: msg.payload[\"REASON OF STOP9\"].toString() },//REASON_OF_STOP\n//     { dataPointId: \"DP-LENGTH_SET_KM00005\", qualityCode: \"1\", value: msg.payload[\"LENGTH SET KM5\"].toString() },//LENGTH_SET_KM\n//     { dataPointId: \"DP-LENGTH_ACTUAL_KM00005\", qualityCode: \"1\", value: msg.payload[\"LENGTH ACTUAL KM5\"].toString() },//LENGTH_ACTUAL_KM\n//     { dataPointId: \"DP-LAY_LENGTH_MM00005\", qualityCode: \"1\", value: msg.payload[\"LAY LENGTH MM5\"].toString() },//LAY_LENGTH_MM\n//     { dataPointId: \"1627119416488\", qualityCode: \"1\", value: msg.payload[\"Status\"].toString() },\n//     { dataPointId: \"1629542034564\", qualityCode: \"1\", value: \"0\"}\n//    ];\n   //global.set(\"Buncher5length\",msg.payload[\"LENGTH ACTUAL KM5\"]);\n   \n //  msg._time = new Date();\nmsg.query = query;\nreturn msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "a4da6b395778ab93",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Bunchar 5 stop",
        "func": "var bool = [\"true\",\"false\"];\nvar down;\nvar msg1 = null;\nconst tableno = 9\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"Status\"]===false){\n    flow.set(\"Buncher_5_len\",msg.payload[\"LENGTH ACTUAL KM5\"].toString());\n    \n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"DOWN_TIME\", \"LAY_LENGTH_MM\", \"LENGTH_ACTUAL_KM\", \"LENGTH_SET_KM\", \"LINE_SPEED_ACT\", \"REASON_OF_STOP\", \"Status\",  \"TWIST_PER_MINUTE_ACT\", \"TWIST_PER_MINUTE_MAX\", \"WIRE_SIZE_MM2\")\n\tVALUES ('${datetime}', ${0},\n    ${msg.payload[\"LAY LENGTH MM5\"]},\n    ${msg.payload[\"LENGTH ACTUAL KM5\"]}, \n    ${msg.payload[\"LENGTH SET KM5\"]}, \n    ${0}, \n    ${msg.payload[\"REASON OF STOP9\"]}, \n    ${msg.payload[\"Status\"]}, \n    ${msg.payload[\"TWIST PER MINUTE ACT5\"]}, \n    ${msg.payload[\"TWIST PER MINUTE MAX5\"]}, \n    ${msg.payload[\"WIRE SIZE MM25\"]});`\n\n    msg.query = query\n    \n//     const values = [\n//     { dataPointId: \"DP-TWIST_PER_MINUTE_MAX00005\", qualityCode: \"1\", value: msg.payload[\"TWIST PER MINUTE MAX5\"].toString()},//TWIST_PER_MINUTE_MAX\n//     { dataPointId: \"DP-TWIST_PER_MINUTE_ACT00005\", qualityCode: \"1\", value: msg.payload[\"TWIST PER MINUTE ACT5\"].toString() },//TWIST_PER_MINUTE_ACT\n//     { dataPointId: \"1626499870215\", qualityCode: \"1\", value: \"0\"},//LINE_SPEED_ACT\n//     { dataPointId: \"1626499906784\", qualityCode: \"1\", value: msg.payload[\"WIRE SIZE MM25\"].toString() },//WIRE_SIZE_MM2\n//     { dataPointId: \"DP-REASON_OF_STOP00005\", qualityCode: \"1\", value: msg.payload[\"REASON OF STOP9\"].toString() },//REASON_OF_STOP\n//     { dataPointId: \"DP-LENGTH_SET_KM00005\", qualityCode: \"1\", value: msg.payload[\"LENGTH SET KM5\"].toString() },//LENGTH_SET_KM\n//     { dataPointId: \"DP-LENGTH_ACTUAL_KM00005\", qualityCode: \"1\", value: msg.payload[\"LENGTH ACTUAL KM5\"].toString() },//LENGTH_ACTUAL_KM\n//     { dataPointId: \"DP-LAY_LENGTH_MM00005\", qualityCode: \"1\", value: msg.payload[\"LAY LENGTH MM5\"].toString() },//LAY_LENGTH_MM\n//     { dataPointId: \"1627119416488\", qualityCode: \"1\", value: \"false\"},\n//     { dataPointId: \"1629542034564\", qualityCode: \"1\", value: \"0\" }\n//    ];\n   //global.set(\"Buncher5length\",msg.payload[\"LENGTH ACTUAL KM5\"]);\n   \n//msg._time = new Date();\nmsg.query = query;\nreturn msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "6f81e7a40eb9c849",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 5 Ping",
        "func": "const tableno = 9\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\n\nif(msg.payload == false){\n         const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"DOWN_TIME\", \"LAY_LENGTH_MM\", \"LENGTH_ACTUAL_KM\", \"LENGTH_SET_KM\", \"LINE_SPEED_ACT\", \"REASON_OF_STOP\", \"Status\",  \"TWIST_PER_MINUTE_ACT\", \"TWIST_PER_MINUTE_MAX\", \"WIRE_SIZE_MM2\")\n\tVALUES ('${datetime}', ${0},\n    ${0},\n    ${0}, \n    ${0}, \n    ${0}, \n    ${7}, \n    ${false}, \n    ${0}, \n    ${0}, \n    ${0});`\n\n    msg.query=query\n       \n//  const values = [\n//     //MMW32-2\n    \n//     { dataPointId: \"DP-TWIST_PER_MINUTE_MAX00005\", qualityCode: \"1\", value: \"0\"},//TWIST_PER_MINUTE_MAX\n//     { dataPointId: \"DP-TWIST_PER_MINUTE_ACT00005\", qualityCode: \"1\",  value: \"0\"},//TWIST_PER_MINUTE_ACT\n//     { dataPointId: \"1626499870215\", qualityCode: \"1\",  value: \"0\"},//LINE_SPEED_ACT\n//     { dataPointId: \"1626499906784\", qualityCode: \"1\",  value: \"0\" },//WIRE_SIZE_MM2\n//     { dataPointId: \"DP-REASON_OF_STOP00005\", qualityCode: \"1\",  value: \"7\" },//REASON_OF_STOP\n//     { dataPointId: \"DP-LENGTH_SET_KM00005\", qualityCode: \"1\", value: \"0\" },//LENGTH_SET_KM\n//     { dataPointId: \"DP-LENGTH_ACTUAL_KM00005\", qualityCode: \"1\",  value: \"0\" },//LENGTH_ACTUAL_KM\n//     { dataPointId: \"DP-LAY_LENGTH_MM00005\", qualityCode: \"1\",  value: \"0\" },//LAY_LENGTH_MM\n//     { dataPointId: \"1627119416488\", qualityCode: \"1\",  value: \"false\" }\n    \n    \n   \n//    ];\n\n    \n    //msg._time = new Date();   \n    return msg;\n    \n\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "e1782d1db68db072",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Send data to Postgresql",
        "func": "var previous = msg.spoolchange[\"previous\"];\nconst tableno = 5\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n// When shift last data file is not existing, error node shall give the msg with all key:value pair.\nif(msg.hasOwnProperty(\"error\")){\n    // Send summary data to mindsphere for previous value at first spooler change after deployment. without subtraction of previous shift data.\n    \n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${previous[\"LENGTH ACTUAL KM5\"]}, ${previous[\"Status\"]}, ${previous[\"WIRE SIZE MM25\"]});`\n    // const values = [\n    //     { dataPointId: \"1639476854357\", qualityCode: \"1\", value: previous[\"WIRE SIZE MM25\"].toString() },//WIRE_SIZE_MM2\n    //     { dataPointId: \"1639476862303\", qualityCode: \"1\", value: previous[\"LENGTH ACTUAL KM5\"].toString() },//LENGTH_ACTUAL_KM\n    //     { dataPointId: \"1639476841006\", qualityCode: \"1\", value: previous[\"Status\"].toString() }\n    //     ];\n    msg.query = query;\n    msg._time = new Date()\n    node.send([null, msg])\n    msg.payload = previous;\n    node.send([msg, null])\n \n}\nelse{\n    msg.payload = JSON.parse(msg.payload)\n    //When first spool change occurs after shift change subtract shift data from current spool lenght.\n    var lshiftlen = Number(msg.payload[\"LENGTH ACTUAL KM5\"]);\n    var previouslen = Number(previous[\"LENGTH ACTUAL KM5\"]);\n    var spoollen = previouslen - lshiftlen;\n\n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${spoollen}, ${previous[\"Status\"]}, ${previous[\"WIRE SIZE MM25\"]});`\n    \n    \n    msg.query = query;\n    msg._time = new Date()\n    node.send([null, msg])\n    previous[\"LENGTH ACTUAL KM5\"] = 0;\n    msg.payload = previous;\n    node.send([msg, null])\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1660,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Spool change data)"
        ]
    },
    {
        "id": "53230d9491406d9b",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Save & log Shift Lenght ",
        "func": "// When shift change file is not existing, error node shall trigger. First Data after deployment will be uploaded to Postgresql withour comaprision to previous shift data.\nvar current = JSON.parse(msg.localStorage.data);\nconst tableno = 5\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n\nif(msg.hasOwnProperty(\"error\")){\n    msg.payload = current;\n    node.send([msg, null]);\n    //Send Shift change data to Postgresql when first shift change occurs after deployment.\n    \n     const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${current[\"LENGTH ACTUAL KM5\"]}, ${current[\"Status\"]}, ${current[\"WIRE SIZE MM25\"]});`\n    msg.query = query;\n    node.send([null, msg])\n }\n // When shift change data is available, current and shift data shall be compared and if found != then data shall be uploaded to Postgresql.\n else{\n     var lshift = JSON.parse(msg.payload);\n     //var current = msg.shiftchangedata;\n     var lshiftlen = Number(lshift[\"LENGTH ACTUAL KM5\"]);\n     var currentlen = Number(current[\"LENGTH ACTUAL KM5\"]);\n     msg.payload = lshiftlen;\n     if (lshiftlen != currentlen){\n         var length = Number(currentlen) - Number(lshiftlen);\n         \n         const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${length}, ${current[\"Status\"]}, ${current[\"WIRE SIZE MM25\"]});`\n         const values = [\n             { dataPointId: \"1639476854357\", qualityCode: \"1\", value: current[\"WIRE SIZE MM25\"].toString() },//WIRE_SIZE_MM2\n            { dataPointId: \"1639476862303\", qualityCode: \"1\", value: length.toString() },//LENGTH_ACTUAL_KM\n            { dataPointId: \"1639476841006\", qualityCode: \"1\", value: current[\"Status\"].toString() }\n             ];\n        //msg = null;\n        msg.payload = values;\n        //msg._time = new Date();\n        node.send([null, msg]) // Send to Postgresql.\n        //msg = null;\n        msg.payload = current;\n        node.send([msg,null]) // Send to file for storing last shift data.\n     }\n     //return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1700,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Shift Time Data)"
        ]
    },
    {
        "id": "e0e8afd8a0b16bc8",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 5",
        "info": "",
        "x": 460,
        "y": 1440,
        "wires": []
    },
    {
        "id": "bee77fc4ee1fdca0",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 5 Summary",
        "info": "",
        "x": 490,
        "y": 1620,
        "wires": []
    },
    {
        "id": "9868ef4e29bfd380",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 6",
        "func": "var bool = [\"true\",\"false\"];\nvar down;\nvar msg1 = null;\nconst tableno = 10\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"Status\"]==true){\n    down= global.get(\"Buncher6down\") + 1;\n    global.set(\"Buncher6down\",down);\n    flow.set(\"Buncher_6_len\",msg.payload[\"LENGTH ACTUAL KM6\"].toString());\n    \n             const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"DOWN_TIME\", \"LAY_LENGTH_MM\", \"LENGTH_ACTUAL_KM\", \"LENGTH_SET_KM\", \"LINE_SPEED_ACT\", \"REASON_OF_STOP\", \"Status\",  \"TWIST_PER_MINUTE_ACT\", \"TWIST_PER_MINUTE_MAX\", \"WIRE_SIZE_MM2\")\n\tVALUES ('${datetime}', ${0},\n    ${msg.payload[\"LAY LENGTH MM\"]},\n    ${msg.payload[\"LENGTH ACTUAL KM6\"]}, \n    ${msg.payload[\"LENGTH SET KM6\"]}, \n    ${msg.payload[\"LINE SPEED ACT6\"]}, \n    ${msg.payload[\"REASON OF STOP10\"]}, \n    ${msg.payload[\"Status\"]}, \n    ${msg.payload[\"TWIST PER MINUTE ACT6\"]}, \n    ${msg.payload[\"TWIST PER MINUTE MAX6\"]}, \n    ${msg.payload[\"WIRE SIZE MM26\"]});`\n\n    msg.query=query\n\n   \n//global.set(\"Buncher6length\",msg.payload[\"LENGTH ACTUAL KM6\"]);\n\nreturn msg;\n   \n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "287cf43bc6f7fb94",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 6 stop",
        "func": "var bool = [\"true\",\"false\"];\nvar down;\nvar msg1 = null;\nconst tableno = 10\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\n\nif(msg.payload[\"Status\"]==false){\n    \n    flow.set(\"Buncher_6_len\",msg.payload[\"LENGTH ACTUAL KM6\"].toString());\n    \n         const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"DOWN_TIME\", \"LAY_LENGTH_MM\", \"LENGTH_ACTUAL_KM\", \"LENGTH_SET_KM\", \"LINE_SPEED_ACT\", \"REASON_OF_STOP\", \"Status\",  \"TWIST_PER_MINUTE_ACT\", \"TWIST_PER_MINUTE_MAX\", \"WIRE_SIZE_MM2\")\n\tVALUES ('${datetime}', ${0},\n    ${msg.payload[\"LAY LENGTH MM6\"]},\n    ${msg.payload[\"LENGTH ACTUAL KM6\"]}, \n    ${msg.payload[\"LENGTH SET KM6\"]}, \n    ${0}, \n    ${msg.payload[\"REASON OF STOP10\"]}, \n    ${msg.payload[\"Status\"]}, \n    ${msg.payload[\"TWIST PER MINUTE ACT6\"]}, \n    ${msg.payload[\"TWIST PER MINUTE MAX6\"]}, \n    ${msg.payload[\"WIRE SIZE MM26\"]});`\n\n    msg.query=query\n\n   \n   //global.set(\"Buncher6length\",msg.payload[\"LENGTH ACTUAL KM6\"]);\n   \n\nreturn msg;\n   \n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "a83d334c7bde2725",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 6 Ping",
        "func": "const tableno = 10\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload == false){\n         const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"DOWN_TIME\", \"LAY_LENGTH_MM\", \"LENGTH_ACTUAL_KM\", \"LENGTH_SET_KM\", \"LINE_SPEED_ACT\", \"REASON_OF_STOP\", \"Status\",  \"TWIST_PER_MINUTE_ACT\", \"TWIST_PER_MINUTE_MAX\", \"WIRE_SIZE_MM2\")\n\tVALUES ('${datetime}', ${0},\n    ${0},\n    ${0}, \n    ${0}, \n    ${0}, \n    ${7}, \n    ${false}, \n    ${0}, \n    ${0}, \n    ${0});`\n\n    msg.query=query       \n\n    return msg;\n    \n\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "5eb7cb41fdec10ea",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Save & log Shift Lenght ",
        "func": "// When shift change file is not existing, error node shall trigger. First Data after deployment will be uploaded to Postgresql withour comaprision to previous shift data.\nvar current = JSON.parse(msg.localStorage.data);\nconst tableno = 6\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n\nif(msg.hasOwnProperty(\"error\")){\n    msg.payload = current;\n    node.send([msg, null]);\n    //Send Shift change data to Postgresql when first shift change occurs after deployment.\n    \n       const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${current[\"LENGTH ACTUAL KM6\"]}, ${current[\"Status\"]}, ${current[\"WIRE SIZE MM26\"]});`\n   \n    msg.query=query\n    node.send([null, msg])\n }\n // When shift change data is available, current and shift data shall be compared and if found != then data shall be uploaded to Postgresql.\n else{\n     var lshift = JSON.parse(msg.payload);\n     //var current = msg.shiftchangedata;\n     var lshiftlen = Number(lshift[\"LENGTH ACTUAL KM6\"]);\n     var currentlen = Number(current[\"LENGTH ACTUAL KM6\"]);\n     msg.payload = lshiftlen;\n     if (lshiftlen != currentlen){\n         var length = Number(currentlen) - Number(lshiftlen);\n         const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${length}, ${current[\"Status\"]}, ${current[\"WIRE SIZE MM26\"]});`\n    \n    msg.query=query\n      \n        node.send([null, msg]) // Send to Postgresql.\n        //msg = null;\n        msg.payload = current;\n        node.send([msg,null]) // Send to file for storing last shift data.\n     }\n     //return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1980,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Shift Time Data)"
        ]
    },
    {
        "id": "88a28414710cae8a",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Send data to Postgresql",
        "func": "var previous = msg.spoolchange[\"previous\"];\nconst tableno = 6\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n// When shift last data file is not existing, error node shall give the msg with all key:value pair.\nif(msg.hasOwnProperty(\"error\")){\n    // Send summary data to mindsphere for previous value at first spooler change after deployment. without subtraction of previous shift data.\n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${previous[\"LENGTH ACTUAL KM6\"]}, ${previous[\"Status\"]}, ${previous[\"WIRE SIZE MM26\"]});`\n    msg.query=query\n    node.send([null, msg])\n    msg.payload = previous;\n    node.send([msg, null])\n \n}\nelse{\n    msg.payload = JSON.parse(msg.payload)\n    //When first spool change occurs after shift change subtract shift data from current spool lenght.\n    var lshiftlen = Number(msg.payload[\"LENGTH ACTUAL KM6\"]);\n    var previouslen = Number(previous[\"LENGTH ACTUAL KM6\"]);\n    var spoollen = previouslen - lshiftlen;\n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Actual_length\", \"Machine_Status\", \"Wiresize\")\n\tVALUES ('${datetime}', ${spoollen}, ${previous[\"Status\"]}, ${previous[\"WIRE SIZE MM26\"]});`\n    msg.query=query\n    node.send([null, msg])\n    previous[\"LENGTH ACTUAL KM6\"] = 0;\n    msg.payload = previous;\n    node.send([msg, null])\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2020,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Spool change data)"
        ]
    },
    {
        "id": "68c34b1cda9ec14f",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 6",
        "info": "",
        "x": 460,
        "y": 1760,
        "wires": []
    },
    {
        "id": "5cfeede815f6f951",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Buncher 6 Summary",
        "info": "",
        "x": 490,
        "y": 1940,
        "wires": []
    },
    {
        "id": "1178cafaed8c5a12",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Multi Wire 24-Stop",
        "func": "var bool = [\"true\",\"false\"];\nvar status;\nvar down;\nconst tableno = 37\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"Machine Status1\"] == false)\n{\n    status = \"false\";\n    flow.set(\"MWD24_1_len\",msg.payload[\"SPOOLER 1 LENGTH ACTUAL1\"].toString());\n    flow.set(\"MWD24_2_len\",msg.payload[\"SPOOLER 2 LENGTH ACTUAL1\"].toString());\n    \n    const query =`INSERT INTO ${tablename}(\n\t \"Datetime\", \"ANNEALER\", \"ANNEALER_SELECTION\", \"DOWN_TIME\", \"GEAR_OIL_TEMPERATURE\", \"Line_Speed_Act\", \"Line_Speed_MAX\", \"LUBRICANT_TEMPERATURE\", \"Machine_status\", \n     \"NO_OF_WIRES\", \"REASON_OF_STOP\", \"SPOOLER_1_LAST_SPOOL_LENGHT\", \"SPOOLER_1_LENGTH_ACTUAL\", \"SPOOLER_1_NO_OF_WIRES\", \"SPOOLER_1_SELECTION\", \"SPOOLER_2_LAST_SPOOL_LENGHT\", \"SPOOLER_2_LENGTH_ACTUAL\", \"SPOOLER_2_NO_OF_WIRES\", \"SPOOLER_2_SELECTION\", \"WIRE_SIZE\")\n\tVALUES ( '${datetime}', ${msg.payload[\"ANNEALER\"]},\n     ${msg.payload[\"ANNEALER SELECTION1\"]}, \n     ${0}, \n     ${msg.payload[\"GEAR OIL TEMPERATURE1\"]}, \n     ${0}, \n     ${msg.payload[\"Line Speed MAX1\"]}, \n     ${msg.payload[\"LURICANT TEMPERATURE1\"]}, \n     ${false}, \n     ${msg.payload[\"NO OF WIRES1\"]}, \n     ${msg.payload[\"REASON OF STOP1\"]}, \n     ${msg.payload[\"SPOOLER 1 LAST SPOOL LENGTH1\"]}, \n     ${msg.payload[\"SPOOLER 1 LENGTH ACTUAL1\"]}, \n     ${msg.payload[\"NOW_SPOOL11\"]}, \n     ${msg.payload[\"SPOOLER 1 SELECTION1\"]}, \n     ${msg.payload[\"SPOOLERR 2 LAST SPOOL LENGTH1\"]}, \n     ${msg.payload[\"SPOOLER 2 LENGTH ACTUAL1\"]}, \n     ${msg.payload[\"NOW_SPOOL21\"]}, \n     ${msg.payload[\"SPOOLER 2 SELECTION1\"]},  \n     ${msg.payload[\"WIRE SIZE1\"]});`\n\n    msg.query=query\n//     const values = [\n//     //MMW24\n//     { dataPointId: \"DP-Line_Speed_Act00001\", qualityCode: \"1\", value: \"0\"},//Line Speed Act\n//     { dataPointId: \"DP-Line_Speed_MAX00001\", qualityCode: \"1\", value: msg.payload[\"Line Speed MAX1\"].toString() },//Line Speed max\n//     { dataPointId: \"DP-Machine_status00001\", qualityCode: \"1\", value: status },//Machine Status\n//     { dataPointId: \"DP-LUBRICANT_TEMPERATURE00001\", qualityCode: \"1\", value: msg.payload[\"LURICANT TEMPERATURE1\"].toString() },//Lubricant temp\n//     { dataPointId: \"DP-GEAR_OIL_TEMPERATURE00001\", qualityCode: \"1\", value: msg.payload[\"GEAR OIL TEMPERATURE1\"].toString() },//Gear Oil temp\n//     { dataPointId: \"DP-SPOOLER_1_SELECTION00001\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 1 SELECTION1\"].toString() },//Spooler 1 Selection\n//     { dataPointId: \"DP-SPOOLER_2_SELECTION00001\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 2 SELECTION1\"].toString() },//spooler 2 Selection\n//     { dataPointId: \"DP-ANNEALER_SELECTION00001\", qualityCode: \"1\", value: msg.payload[\"ANNEALER SELECTION1\"].toString() },//Annealer selection\n//     { dataPointId: \"DP-NO_OF_WIRES00001\", qualityCode: \"1\", value: msg.payload[\"NO OF WIRES1\"].toString() },//No of Wire\n//     { dataPointId: \"DP-WIRE_SIZE00001\", qualityCode: \"1\", value: msg.payload[\"WIRE SIZE1\"].toString() },//Wire Size\n//     { dataPointId: \"DP-SPOOLER_1_LENGTH_ACTUAL00001\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 1 LENGTH ACTUAL1\"].toString() },//Spooler 1 Length\n//     { dataPointId: \"DP-SPOOLER_1_LAST_SPOOL_LENG00001\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 1 LAST SPOOL LENGTH1\"].toString() },//Spooler 1 last spool length\n//     { dataPointId: \"DP-SPOOLER_2_LENGTH_ACTUAL00001\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 2 LENGTH ACTUAL1\"].toString() },//Spooler 2 length\n//     { dataPointId: \"DP-SPOOLER_2_LAST_SPOOL_LENG00001\", qualityCode: \"1\", value: msg.payload[\"SPOOLERR 2 LAST SPOOL LENGTH1\"].toString() },//spooler 2 last spool length\n//     { dataPointId: \"DP-REASON_OF_STOP00007\", qualityCode: \"1\", value: msg.payload[\"REASON OF STOP1\"].toString() },//Reason of stop\n//     { dataPointId: \"1627109152030\", qualityCode: \"1\", value: msg.payload[\"ANNEALER\"].toString() },//spool1 total\n//     { dataPointId: \"1629541738065\", qualityCode: \"1\", value: \"0\" },\n//     { dataPointId: \"1637131764514\", qualityCode: \"1\", value: msg.payload[\"NOW_SPOOL11\"].toString() },//Reason of stop\n//     { dataPointId: \"1637131771686\", qualityCode: \"1\", value: msg.payload[\"NOW_SPOOL21\"].toString() }//Reason of stop\n//    ];\n//     //MMW32-1\n    \n\n// msg._time = new Date();\n// msg.payload = values;\nreturn msg;\n}\nelse{\n    status = \"false\";\n    \n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "a882385429d5db53",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Multi Wire 24",
        "func": "var bool = [\"true\",\"false\"];\nvar status;\nvar down;\nconst tableno = 37\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"Machine Status1\"] == true)\n{\n    status = \"true\";\n    down= Number(global.get(\"mmw24down\") + 1);\n    global.set(\"mmw24down\",down);\n    flow.set(\"MWD24_1_len\",msg.payload[\"SPOOLER 1 LENGTH ACTUAL1\"].toString());\n    flow.set(\"MWD24_2_len\",msg.payload[\"SPOOLER 2 LENGTH ACTUAL1\"].toString());\n    \n        const query =`INSERT INTO ${tablename}(\n\t \"Datetime\", \"ANNEALER\", \"ANNEALER_SELECTION\", \"DOWN_TIME\", \"GEAR_OIL_TEMPERATURE\", \"Line_Speed_Act\", \"Line_Speed_MAX\", \"LUBRICANT_TEMPERATURE\", \"Machine_status\", \n     \"NO_OF_WIRES\", \"REASON_OF_STOP\", \"SPOOLER_1_LAST_SPOOL_LENGHT\", \"SPOOLER_1_LENGTH_ACTUAL\", \"SPOOLER_1_NO_OF_WIRES\", \"SPOOLER_1_SELECTION\", \"SPOOLER_2_LAST_SPOOL_LENGHT\", \"SPOOLER_2_LENGTH_ACTUAL\", \"SPOOLER_2_NO_OF_WIRES\", \"SPOOLER_2_SELECTION\", \"WIRE_SIZE\")\n\tVALUES ( '${datetime}', ${msg.payload[\"ANNEALER\"]},\n     ${msg.payload[\"ANNEALER SELECTION1\"]}, \n     ${0}, \n     ${msg.payload[\"GEAR OIL TEMPERATURE1\"]}, \n     ${msg.payload[\"Line Speed Act1\"]}, \n     ${msg.payload[\"Line Speed MAX1\"]}, \n     ${msg.payload[\"LURICANT TEMPERATURE1\"]}, \n     ${true}, \n     ${msg.payload[\"NO OF WIRES1\"]}, \n     ${msg.payload[\"REASON OF STOP1\"]}, \n     ${msg.payload[\"SPOOLER 1 LAST SPOOL LENGTH1\"]}, \n     ${msg.payload[\"SPOOLER 1 LENGTH ACTUAL1\"]}, \n     ${msg.payload[\"NOW_SPOOL11\"]}, \n     ${msg.payload[\"SPOOLER 1 SELECTION1\"]}, \n     ${msg.payload[\"SPOOLERR 2 LAST SPOOL LENGTH1\"]}, \n     ${msg.payload[\"SPOOLER 2 LENGTH ACTUAL1\"]}, \n     ${msg.payload[\"NOW_SPOOL21\"]}, \n     ${msg.payload[\"SPOOLER 2 SELECTION1\"]},  \n     ${msg.payload[\"WIRE SIZE1\"]});`\n\n    msg.query=query\n\n//     const values = [\n//     //MMW24\n//     { dataPointId: \"DP-Line_Speed_Act00001\", qualityCode: \"1\", value: msg.payload[\"Line Speed Act1\"].toString()},//Line Speed Act\n//     { dataPointId: \"DP-Line_Speed_MAX00001\", qualityCode: \"1\", value: msg.payload[\"Line Speed MAX1\"].toString() },//Line Speed max\n//     { dataPointId: \"DP-Machine_status00001\", qualityCode: \"1\", value: status },//Machine Status\n//     { dataPointId: \"DP-LUBRICANT_TEMPERATURE00001\", qualityCode: \"1\", value: msg.payload[\"LURICANT TEMPERATURE1\"].toString() },//Lubricant temp\n//     { dataPointId: \"DP-GEAR_OIL_TEMPERATURE00001\", qualityCode: \"1\", value: msg.payload[\"GEAR OIL TEMPERATURE1\"].toString() },//Gear Oil temp\n//     { dataPointId: \"DP-SPOOLER_1_SELECTION00001\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 1 SELECTION1\"].toString() },//Spooler 1 Selection\n//     { dataPointId: \"DP-SPOOLER_2_SELECTION00001\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 2 SELECTION1\"].toString() },//spooler 2 Selection\n//     { dataPointId: \"DP-ANNEALER_SELECTION00001\", qualityCode: \"1\", value: msg.payload[\"ANNEALER SELECTION1\"].toString() },//Annealer selection\n//     { dataPointId: \"DP-NO_OF_WIRES00001\", qualityCode: \"1\", value: msg.payload[\"NO OF WIRES1\"].toString() },//No of Wire\n//     { dataPointId: \"DP-WIRE_SIZE00001\", qualityCode: \"1\", value: msg.payload[\"WIRE SIZE1\"].toString() },//Wire Size\n//     { dataPointId: \"DP-SPOOLER_1_LENGTH_ACTUAL00001\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 1 LENGTH ACTUAL1\"].toString() },//Spooler 1 Length\n//     { dataPointId: \"DP-SPOOLER_1_LAST_SPOOL_LENG00001\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 1 LAST SPOOL LENGTH1\"].toString() },//Spooler 1 last spool length\n//     { dataPointId: \"DP-SPOOLER_2_LENGTH_ACTUAL00001\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 2 LENGTH ACTUAL1\"].toString() },//Spooler 2 length\n//     { dataPointId: \"DP-SPOOLER_2_LAST_SPOOL_LENG00001\", qualityCode: \"1\", value: msg.payload[\"SPOOLERR 2 LAST SPOOL LENGTH1\"].toString() },//spooler 2 last spool length\n//     { dataPointId: \"DP-REASON_OF_STOP00007\", qualityCode: \"1\", value: msg.payload[\"REASON OF STOP1\"].toString() },//Reason of stop\n//     { dataPointId: \"1627109152030\", qualityCode: \"1\", value: msg.payload[\"ANNEALER\"].toString() },//spool1 total\n//     { dataPointId: \"1629541738065\", qualityCode: \"1\", value: \"0\" },\n//     { dataPointId: \"1637131764514\", qualityCode: \"1\", value: msg.payload[\"NOW_SPOOL11\"].toString() },//Reason of stop\n//     { dataPointId: \"1637131771686\", qualityCode: \"1\", value: msg.payload[\"NOW_SPOOL21\"].toString() }//Reason of stop\n//    ];\n//     //MMW32-1\n    \n\n// msg._time = new Date();\n// msg.payload = values;\nreturn msg;\n}\nelse{\n    status = \"false\";\n    \n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "2caded0132d53030",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "MultiWire 24 -Ping",
        "func": "const tableno = 37\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload == false){\n       \n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"ANNEALER\", \"ANNEALER_SELECTION\", \"DOWN_TIME\", \"GEAR_OIL_TEMPERATURE\", \"Line_Speed_Act\", \"Line_Speed_MAX\", \"LUBRICANT_TEMPERATURE\", \"Machine_status\", \n     \"NO_OF_WIRES\", \"REASON_OF_STOP\", \"SPOOLER_1_LAST_SPOOL_LENGHT\", \"SPOOLER_1_LENGTH_ACTUAL\", \"SPOOLER_1_NO_OF_WIRES\", \"SPOOLER_1_SELECTION\", \"SPOOLER_2_LAST_SPOOL_LENGHT\", \"SPOOLER_2_LENGTH_ACTUAL\", \"SPOOLER_2_NO_OF_WIRES\", \"SPOOLER_2_SELECTION\", \"WIRE_SIZE\")\n\tVALUES ( '${datetime}', ${0},\n     ${false}, \n     ${0}, \n     ${0}, \n     ${0}, \n     ${0}, \n     ${0}, \n     ${false}, \n     ${0}, \n     ${7}, \n     ${0}, \n     ${0}, \n     ${0}, \n     ${false}, \n     ${0}, \n     ${0}, \n     ${0}, \n     ${false},  \n     ${0});`\n\n    msg.query = query\n  \n    return msg;\n    \n}else\n{\n   \n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "b064be30ce6942eb",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Save & log Shift1 Lenght (C)",
        "func": "// When shift change file is not existing, error node shall trigger. First Data after deployment will be uploaded to Postgresql withour comaprision to previous shift data.\nvar current = JSON.parse(msg.localStorage.data);\nconst tableno=30\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n\nif(msg.hasOwnProperty(\"error\")){\n    msg.payload = current;\n    node.send([msg, null]);\n    \n    if(current[\"SPOOLER 1 SELECTION1\"] === true){\n        const query=`INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${current[\"NO OF WIRES1\"]}, ${current[\"NOW_SPOOL11\"]}, ${current[\"NOW_SPOOL21\"]}, ${current[\"SPOOLER 1 LENGTH ACTUAL1\"]}, ${0}, ${current[\"WIRE SIZE1\"]}});`\n\n    msg.query = query;\n\n    node.send([null, msg])\n    }\n    //Send Shift change data to Postgresql when first shift change occurs after deployment.\n    \n }\n // When shift change data is available, current and shift data shall be compared and if found != then data shall be uploaded to Postgresql.\n else{\n     var lshift = JSON.parse(msg.payload);\n     //var current = msg.shiftchangedata;\n     if(current[\"SPOOLER 1 SELECTION1\"] === true){\n            var lshiftlen = Number(lshift[\"SPOOLER 1 LENGTH ACTUAL1\"]);\n            var currentlen = Number(current[\"SPOOLER 1 LENGTH ACTUAL1\"]);\n            msg.payload = lshiftlen;\n            if (lshiftlen != currentlen){\n                var length = currentlen - lshiftlen;\n                 \n                const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${current[\"NO OF WIRES1\"]}, ${current[\"NOW_SPOOL11\"]}, ${current[\"NOW_SPOOL21\"]}, ${length}, ${0}, ${current[\"WIRE SIZE1\"]}});`\n\n                msg.query = query;\n                 \n                //Uncommented msg._time by BKV\n                //msg._time = new Date(); //Postgresql might consider timestamp as unique, so to differentiate btw SP1 and SP2 both actual times are taken.\n                node.send([null, msg]) // Send to Postgresql.\n                //msg = null;\n                msg.payload = current;\n                node.send([msg,null]) // Send to file for storing last shift data.\n            }\n        }\n      \n     \n     \n     //return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 340,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Shift Time Data)"
        ]
    },
    {
        "id": "96382131eda47ccb",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Save & log Shift2 Lenght (C)",
        "func": "// When shift change file is not existing, error node shall trigger. First Data after deployment will be uploaded to mindsphere withour comaprision to previous shift data.\nvar current = JSON.parse(msg.localStorage.data);\nconst tableno = 30\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n\n\nif(msg.hasOwnProperty(\"error\")){\n    msg.payload = current;\n    node.send([msg, null]);\n    \n    if(current[\"SPOOLER 2 SELECTION1\"] === true){\n        \n        const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${current[\"NO OF WIRES1\"]}, ${current[\"NOW_SPOOL11\"]}, ${current[\"NOW_SPOOL21\"]}, ${0}, ${current[\"SPOOLER 2 LENGTH ACTUAL1\"]}, ${current[\"WIRE SIZE1\"]}});`\n\n        msg.query = query;\n    node.send([null, msg])\n    }\n    \n    \n    //Send Shift change data to Mindsphere when first shift change occurs after deployment.\n    \n }\n // When shift change data is available, current and shift data shall be compared and if found != then data shall be uploaded to Mindsphere.\n else{\n     var lshift = JSON.parse(msg.payload);\n     //var current = msg.shiftchangedata;\n      if(current[\"SPOOLER 2 SELECTION1\"] === true){\n            var lshiftlen1 = Number(lshift[\"SPOOLER 2 LENGTH ACTUAL1\"]);\n            var currentlen1 = Number(current[\"SPOOLER 2 LENGTH ACTUAL1\"]);\n            msg.payload = lshiftlen1;\n            if (lshiftlen1 != currentlen1){\n                var length1 = currentlen1 - lshiftlen1;\n                const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${current[\"NO OF WIRES1\"]}, ${current[\"NOW_SPOOL11\"]}, ${current[\"NOW_SPOOL21\"]}, ${0}, ${current[\"SPOOLER 2 LENGTH ACTUAL1\"]}, ${current[\"WIRE SIZE1\"]}});`\n\n                msg.query = query;\n                \n                node.send([null, msg]) // Send to Mindsphere.\n                //msg = null;\n                msg.payload = current;\n                node.send([msg,null]) // Send to file for storing last shift data.\n            }\n        }\n     \n     \n     //return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 380,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Shift Time Data)"
        ]
    },
    {
        "id": "a27c0432ebe50818",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Send data to Postgresql Spooler 1",
        "func": "var previous = msg.spoolchange[\"previous\"];\n// When shift last data file is not existing, error node shall give the msg with all key:value pair.\nconst tableno=30\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\nif(msg.hasOwnProperty(\"error\")){\n    // Send summary data to mindsphere for previous value at first spooler change after deployment. without subtraction of previous shift data.\n    msg.payload = previous;\n    node.send([msg, null])\n    \n    \n    if(previous[\"SPOOLER 1 SELECTION1\"] === true){\n        const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${previous[\"NO OF WIRES1\"]}, ${previous[\"NOW_SPOOL11\"]}, ${previous[\"NOW_SPOOL21\"]}, ${previous[\"SPOOLER 1 LENGTH ACTUAL1\"]},\n     ${0}, ${previous[\"WIRE SIZE1\"]}});`\n\n        msg.query = query;\n    node.send([null, msg])\n    }\n\n    \n \n}\nelse{\n    msg.payload = JSON.parse(msg.payload)\n    //When first spool change occurs after shift change subtract shift data from previous spool lenght.\n    if(previous[\"SPOOLER 1 SELECTION1\"] === true){\n        var lshiftlen = Number(msg.payload[\"SPOOLER 1 LENGTH ACTUAL1\"]);\n        var previouslen = Number(previous[\"SPOOLER 1 LENGTH ACTUAL1\"]);\n        var spoollen = previouslen - lshiftlen;\n        const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${previous[\"NO OF WIRES1\"]}, ${previous[\"NOW_SPOOL11\"]}, ${previous[\"NOW_SPOOL21\"]}, ${spoollen},\n     ${0}, ${previous[\"WIRE SIZE1\"]}});`\n        \n        \n        msg.query=query\n        node.send([null, msg])\n        previous[\"SPOOLER 1 LENGTH ACTUAL1\"] = 0;\n        msg.payload = previous;\n        node.send([msg, null])\n    }\n    \n    \n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 420,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Spool change data)"
        ]
    },
    {
        "id": "0143f9c84a0b138a",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Send data to Postgresql Spooler 2",
        "func": "var previous = msg.spoolchange[\"previous\"];\nconst tableno=30\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n// When shift last data file is not existing, error node shall give the msg with all key:value pair.\nif(msg.hasOwnProperty(\"error\")){\n    // Send summary data to mindsphere for previous value at first spooler change after deployment. without subtraction of previous shift data.\n    msg.payload = previous;\n    node.send([msg, null])\n    \n    \n    if(previous[\"SPOOLER 2 SELECTION1\"] === true){\n        \n        const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${previous[\"NO OF WIRES1\"]}, ${previous[\"NOW_SPOOL11\"]}, ${previous[\"NOW_SPOOL21\"]}, ${0},\n     ${previous[\"SPOOLER 2 LENGTH ACTUAL1\"]}, ${previous[\"WIRE SIZE1\"]}});`\n        \n    msg.query=query\n    node.send([null, msg])\n    }\n    \n \n}\nelse{\n    msg.payload = JSON.parse(msg.payload)\n    //When first spool change occurs after shift change subtract shift data from current spool lenght.\n    \n    \n    if(previous[\"SPOOLER 2 SELECTION1\"] === true){\n        var lshiftlen1 = Number(msg.payload[\"SPOOLER 2 LENGTH ACTUAL1\"]);\n        var previouslen1 = Number(previous[\"SPOOLER 2 LENGTH ACTUAL1\"]);\n        var spoollen1 = previouslen1 - lshiftlen1;\n        const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${previous[\"NO OF WIRES1\"]}, ${previous[\"NOW_SPOOL11\"]}, ${previous[\"NOW_SPOOL21\"]}, ${0},\n     ${spoollen1}, ${previous[\"WIRE SIZE1\"]}});`\n        \n        msg.query=query\n        node.send([null, msg])\n        previous[\"SPOOLER 2 LENGTH ACTUAL1\"] = 0;\n        msg.payload = previous;\n        node.send([msg, null])\n    }\n    \n    \n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 460,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Spool change data)"
        ]
    },
    {
        "id": "b9ae636abc70bea0",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Multiwire 24",
        "info": "",
        "x": 890,
        "y": 120,
        "wires": []
    },
    {
        "id": "eed13351fbbbc04d",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Multi Wire 24 Summary",
        "info": "",
        "x": 920,
        "y": 300,
        "wires": []
    },
    {
        "id": "2443152204bf6849",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Multi Wire 32-1 -Stop",
        "func": "var bool = [\"true\",\"false\"];\nvar status;\nvar down;\nconst tableno = 38\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"Machine Status2\"] == false)\n{\n    status = \"false\";\n    flow.set(\"MWD321_1_len\",msg.payload[\"SPOOLER 1 LENGTH ACTUAL2\"].toString());\n    flow.set(\"MWD321_2_len\",msg.payload[\"SPOOLER 2 LENGTH ACTUAL2\"].toString());\n    \n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"ANNEALER\", \"ANNEALER_SELECTION\", \"DOWN_TIME\", \"GEAR_OIL_TEMPERATURE\", \"Line_Speed_Act\", \"Line_Speed_MAX\", \"LUBRICANT_TEMPERATURE\", \"Machine_status\", \n     \"NO_OF_WIRES\", \"REASON_OF_STOP\", \"SPOOLER_1_LAST_SPOOL_LENGHT\", \"SPOOLER_1_LENGTH_ACTUAL\", \"SPOOLER_1_NO_OF_WIRES\", \"SPOOLER_1_SELECTION\", \"SPOOLER_2_LAST_SPOOL_LENGHT\", \"SPOOLER_2_LENGTH_ACTUAL\", \"SPOOLER_2_NO_OF_WIRES\", \"SPOOLER_2_SELECTION\", \"WIRE_SIZE\")\n\tVALUES ( '${datetime}', ${msg.payload[\"ANNEALER2\"]},\n     ${msg.payload[\"ANNEALER SELECTION2\"]}, \n     ${0}, \n     ${msg.payload[\"GEAR OIL TEMPERATURE2\"]}, \n     ${0}, \n     ${msg.payload[\"Line Speed MAX2\"]}, \n     ${msg.payload[\"LURICANT TEMPERATURE2\"]}, \n     ${false}, \n     ${msg.payload[\"NO OF WIRES2\"]}, \n     ${msg.payload[\"REASON OF STOP2\"]}, \n     ${msg.payload[\"SPOOLER 1 LAST SPOOL LENGTH2\"]}, \n     ${msg.payload[\"SPOOLER 1 LENGTH ACTUAL2\"]}, \n     ${msg.payload[\"NOW_SPOOL12\"]}, \n     ${msg.payload[\"SPOOLER 1 SELECTION2\"]}, \n     ${msg.payload[\"SPOOLERR 2 LAST SPOOL LENGTH2\"]}, \n     ${msg.payload[\"SPOOLER 2 LENGTH ACTUAL2\"]}, \n     ${msg.payload[\"NOW_SPOOL22\"]}, \n     ${msg.payload[\"SPOOLER 2 SELECTION2\"]},  \n     ${msg.payload[\"WIRE SIZE2\"]});`\n\n    msg.query = query\n//     const values = [\n//     //MMW32-1\n//     { dataPointId: \"DP-Line_Speed_Act00002\", qualityCode: \"1\", value: \"0\"},//Line Speed Act\n//     { dataPointId: \"DP-Line_Speed_MAX00002\", qualityCode: \"1\", value: msg.payload[\"Line Speed MAX2\"].toString() },//Line Speed max\n//     { dataPointId: \"DP-Machine_status00002\", qualityCode: \"1\", value: status },//Machine Status\n//     { dataPointId: \"DP-LUBRICANT_TEMPERATURE00002\", qualityCode: \"1\", value: msg.payload[\"LURICANT TEMPERATURE2\"].toString() },//Lubricant temp\n//     { dataPointId: \"DP-GEAR_OIL_TEMPERATURE00002\", qualityCode: \"1\", value: msg.payload[\"GEAR OIL TEMPERATURE2\"].toString() },//Gear Oil temp\n//     { dataPointId: \"DP-SPOOLER_1_SELECTION00002\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 1 SELECTION2\"].toString() },//Spooler 1 Selection\n//     { dataPointId: \"DP-SPOOLER_2_SELECTION00002\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 2 SELECTION2\"].toString() },//spooler 2 Selection\n//     { dataPointId: \"DP-ANNEALER_SELECTION00002\", qualityCode: \"1\", value: msg.payload[\"ANNEALER SELECTION2\"].toString() },//Annealer selection\n//     { dataPointId: \"DP-NO_OF_WIRES00002\", qualityCode: \"1\", value: msg.payload[\"NO OF WIRES2\"].toString() },//No of Wire\n//     { dataPointId: \"DP-WIRE_SIZE00002\", qualityCode: \"1\", value: msg.payload[\"WIRE SIZE2\"].toString() },//Wire Size\n//     { dataPointId: \"DP-SPOOLER_1_LENGTH_ACTUAL00002\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 1 LENGTH ACTUAL2\"].toString() },//Spooler 1 Length\n//     { dataPointId: \"DP-SPOOLER_1_LAST_SPOOL_LENG00002\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 1 LAST SPOOL LENGTH2\"].toString() },//Spooler 1 last spool length\n//     { dataPointId: \"DP-SPOOLER_2_LENGTH_ACTUAL00002\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 2 LENGTH ACTUAL2\"].toString() },//Spooler 2 length\n//     { dataPointId: \"DP-SPOOLER_2_LAST_SPOOL_LENG00002\", qualityCode: \"1\", value: msg.payload[\"SPOOLERR 2 LAST SPOOL LENGTH2\"].toString() },//spooler 2 last spool length\n//     { dataPointId: \"DP-REASON_OF_STOP00008\", qualityCode: \"1\", value: msg.payload[\"REASON OF STOP2\"].toString() },//Reason of stop\n//     { dataPointId: \"1627109250060\", qualityCode: \"1\", value: msg.payload[\"ANNEALER2\"].toString() },//spool1 total\n//     { dataPointId: \"1629541753513\", qualityCode: \"1\", value: \"0\" },\n//     { dataPointId: \"1637134363960\", qualityCode: \"1\", value: msg.payload[\"NOW_SPOOL12\"].toString() },//Reason of stop\n//     { dataPointId: \"1637134370126\", qualityCode: \"1\", value: msg.payload[\"NOW_SPOOL22\"].toString() }//Reason of stop\n \n//    ];\n    \n\n// msg._time = new Date();\n// msg.payload = values;\nreturn msg;\n}\nelse{\n    status = \"false\";\n    \n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "0dd1f8a2e44c9931",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Multi Wire 32-1",
        "func": "var bool = [\"true\",\"false\"];\nvar status;\nvar down;\nconst tableno = 38\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"Machine Status2\"] == true)\n{\n    status = \"true\";\n    down= Number(global.get(\"mmw321down\") + 1);\n    global.set(\"mmw321down\",down);\n    flow.set(\"MWD321_1_len\",msg.payload[\"SPOOLER 1 LENGTH ACTUAL2\"].toString());\n    flow.set(\"MWD321_2_len\",msg.payload[\"SPOOLER 2 LENGTH ACTUAL2\"].toString());\n    \n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"ANNEALER\", \"ANNEALER_SELECTION\", \"DOWN_TIME\", \"GEAR_OIL_TEMPERATURE\", \"Line_Speed_Act\", \"Line_Speed_MAX\", \"LUBRICANT_TEMPERATURE\", \"Machine_status\", \n     \"NO_OF_WIRES\", \"REASON_OF_STOP\", \"SPOOLER_1_LAST_SPOOL_LENGHT\", \"SPOOLER_1_LENGTH_ACTUAL\", \"SPOOLER_1_NO_OF_WIRES\", \"SPOOLER_1_SELECTION\", \"SPOOLER_2_LAST_SPOOL_LENGHT\", \"SPOOLER_2_LENGTH_ACTUAL\", \"SPOOLER_2_NO_OF_WIRES\", \"SPOOLER_2_SELECTION\", \"WIRE_SIZE\")\n\tVALUES ( '${datetime}', ${msg.payload[\"ANNEALER2\"]},\n     ${msg.payload[\"ANNEALER SELECTION2\"]}, \n     ${0}, \n     ${msg.payload[\"GEAR OIL TEMPERATURE2\"]}, \n     ${msg.payload[\"Line Speed Act2\"]}, \n     ${msg.payload[\"Line Speed MAX2\"]}, \n     ${msg.payload[\"LURICANT TEMPERATURE2\"]}, \n     ${true}, \n     ${msg.payload[\"NO OF WIRES2\"]}, \n     ${msg.payload[\"REASON OF STOP2\"]}, \n     ${msg.payload[\"SPOOLER 1 LAST SPOOL LENGTH2\"]}, \n     ${msg.payload[\"SPOOLER 1 LENGTH ACTUAL2\"]}, \n     ${msg.payload[\"NOW_SPOOL12\"]}, \n     ${msg.payload[\"SPOOLER 1 SELECTION2\"]}, \n     ${msg.payload[\"SPOOLERR 2 LAST SPOOL LENGTH2\"]}, \n     ${msg.payload[\"SPOOLER 2 LENGTH ACTUAL2\"]}, \n     ${msg.payload[\"NOW_SPOOL22\"]}, \n     ${msg.payload[\"SPOOLER 2 SELECTION2\"]},  \n     ${msg.payload[\"WIRE SIZE2\"]});`\n\n    msg.query = query\nreturn msg;\n}\nelse{\n    status = \"false\";\n    \n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "a3475a37ff5ad328",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Save & log Shift1 Lenght ",
        "func": "// When shift change file is not existing, error node shall trigger. First Data after deployment will be uploaded to mindsphere withour comaprision to previous shift data.\nvar current = JSON.parse(msg.localStorage.data);\nconst tableno=31\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n\n\nif(msg.hasOwnProperty(\"error\")){\n    msg.payload = current;\n    node.send([msg, null]);\n    \n    if(current[\"SPOOLER 1 SELECTION2\"] === true){\n        const query=`INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${current[\"NO OF WIRES2\"]}, ${current[\"NOW_SPOOL12\"]}, ${current[\"NOW_SPOOL22\"]}, ${current[\"SPOOLER 1 LENGTH ACTUAL2\"]}, ${0}, ${current[\"WIRE SIZE2\"]}});`\n\n    msg.query = query;\n    node.send([null, msg])\n    }\n    //Send Shift change data to Mindsphere when first shift change occurs after deployment.\n    \n }\n // When shift change data is available, current and shift data shall be compared and if found != then data shall be uploaded to Mindsphere.\n else{\n     var lshift = JSON.parse(msg.payload);\n     //var current = msg.shiftchangedata;\n     if(current[\"SPOOLER 1 SELECTION2\"] === true){\n            var lshiftlen = Number(lshift[\"SPOOLER 1 LENGTH ACTUAL2\"]);\n            var currentlen = Number(current[\"SPOOLER 1 LENGTH ACTUAL2\"]);\n            msg.payload = lshiftlen;\n            if (lshiftlen != currentlen){\n                var length = currentlen - lshiftlen;\n                const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${current[\"NO OF WIRES2\"]}, ${current[\"NOW_SPOOL12\"]}, ${current[\"NOW_SPOOL22\"]}, ${length}, ${0}, ${current[\"WIRE SIZE2\"]}});`\n\n                msg.query = query;\n                 \n                node.send([null, msg]) // Send to Mindsphere.\n                //msg = null;\n                msg.payload = current;\n                node.send([msg,null]) // Send to file for storing last shift data.\n            }\n        }\n      \n     \n     \n     //return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 720,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Shift Time Data)"
        ]
    },
    {
        "id": "cecae95b0e6f2342",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Save & log Shift2 Lenght ",
        "func": "// When shift change file is not existing, error node shall trigger. First Data after deployment will be uploaded to Postgresql withour comaprision to previous shift data.\nvar current = JSON.parse(msg.localStorage.data);\nconst tableno=30\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\ntry{\n    msg._time = new Date(current._time)\n} catch(err){\n    return [null,null];\n}\n\nif(msg.hasOwnProperty(\"error\")){\n    msg.payload = current;\n    node.send([msg, null]);\n    \n    if(current[\"SPOOLER 2 SELECTION2\"] === true){\n        \n        const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${current[\"NO OF WIRES2\"]}, ${current[\"NOW_SPOOL12\"]}, ${current[\"NOW_SPOOL22\"]}, ${0}, ${current[\"SPOOLER 2 LENGTH ACTUAL2\"]}, ${current[\"WIRE SIZE2\"]}});`\n\n                msg.query = query;\n    node.send([null, msg])\n    }\n    \n    \n    //Send Shift change data to Postgresql when first shift change occurs after deployment.\n    \n }\n // When shift change data is available, current and shift data shall be compared and if found != then data shall be uploaded to Postgresql.\n else{\n     var lshift = JSON.parse(msg.payload);\n     //var current = msg.shiftchangedata;\n      if(current[\"SPOOLER 2 SELECTION2\"] === true){\n            var lshiftlen1 = Number(lshift[\"SPOOLER 2 LENGTH ACTUAL2\"]);\n            var currentlen1 = Number(current[\"SPOOLER 2 LENGTH ACTUAL2\"]);\n            msg.payload = lshiftlen1;\n            if (lshiftlen1 != currentlen1){\n                var length1 = currentlen1 - lshiftlen1;\n                const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${current[\"NO OF WIRES2\"]}, ${current[\"NOW_SPOOL12\"]}, ${current[\"NOW_SPOOL22\"]}, ${0}, ${length1}, ${current[\"WIRE SIZE2\"]}});`\n\n                msg.query = query;\n\n                node.send([null, msg]) // Send to Postgresql.\n                //msg = null;\n                msg.payload = current;\n                node.send([msg,null]) // Send to file for storing last shift data.\n            }\n        }\n     \n     \n     //return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 760,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Shift Time Data)"
        ]
    },
    {
        "id": "a23c91435a37cc44",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Send data to Mindsphere Spooler 1",
        "func": "var previous = msg.spoolchange[\"previous\"];\nconst tableno=30\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n\n// When shift last data file is not existing, error node shall give the msg with all key:value pair.\nif(msg.hasOwnProperty(\"error\")){\n    // Send summary data to mindsphere for previous value at first spooler change after deployment. without subtraction of previous shift data.\n    msg.payload = previous;\n    node.send([msg, null])\n    \n    \n    if(previous[\"SPOOLER 1 SELECTION2\"] === true){\n            const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${previous[\"NO OF WIRES2\"]}, ${previous[\"NOW_SPOOL12\"]}, ${previous[\"NOW_SPOOL22\"]}, ${previous[\"SPOOLER 1 LENGTH ACTUAL2\"]}, ${0},\n     ${previous[\"WIRE SIZE2\"]}});`\n\n        msg.query = query;\n        \n    node.send([null, msg])\n    }\n\n    \n \n}\nelse{\n    msg.payload = JSON.parse(msg.payload)\n    //When first spool change occurs after shift change subtract shift data from previous spool lenght.\n    if(previous[\"SPOOLER 1 SELECTION2\"] === true){\n        var lshiftlen = Number(msg.payload[\"SPOOLER 1 LENGTH ACTUAL2\"]);\n        var previouslen = Number(previous[\"SPOOLER 1 LENGTH ACTUAL2\"]);\n        var spoollen = previouslen - lshiftlen;\n        \n        const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${previous[\"NO OF WIRES2\"]}, ${previous[\"NOW_SPOOL12\"]}, ${previous[\"NOW_SPOOL22\"]}, ${spoollen}, ${0}, ${previous[\"WIRE SIZE2\"]}});`\n\n        msg.query = query;\n       \n        node.send([null, msg])\n        previous[\"SPOOLER 1 LENGTH ACTUAL2\"] = 0;\n        msg.payload = previous;\n        node.send([msg, null])\n    }\n    \n    \n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 800,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Spool change data)"
        ]
    },
    {
        "id": "9bbbd2116921b7b1",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Send data to Mindsphere Spooler 2",
        "func": "var previous = msg.spoolchange[\"previous\"];\n// When shift last data file is not existing, error node shall give the msg with all key:value pair.\nconst tableno = 30\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\nif(msg.hasOwnProperty(\"error\")){\n    // Send summary data to mindsphere for previous value at first spooler change after deployment. without subtraction of previous shift data.\n    msg.payload = previous;\n    node.send([msg, null])\n    \n    \n    if(previous[\"SPOOLER 2 SELECTION2\"] === true){\n        \n        const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${previous[\"NO OF WIRES2\"]}, ${previous[\"NOW_SPOOL12\"]}, ${previous[\"NOW_SPOOL22\"]}, ${0}, ${previous[\"SPOOLER 2 LENGTH ACTUAL2\"]}, ${previous[\"WIRE SIZE2\"]}});`\n\n        msg.query = query;\n    node.send([null, msg])\n    }\n    \n \n}\nelse{\n    msg.payload = JSON.parse(msg.payload)\n    //When first spool change occurs after shift change subtract shift data from current spool lenght.\n    \n    \n    if(previous[\"SPOOLER 2 SELECTION2\"] === true){\n        var lshiftlen1 = Number(msg.payload[\"SPOOLER 2 LENGTH ACTUAL2\"]);\n        var previouslen1 = Number(previous[\"SPOOLER 2 LENGTH ACTUAL2\"]);\n        var spoollen1 = previouslen1 - lshiftlen1;\n        const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${previous[\"NO OF WIRES2\"]}, ${previous[\"NOW_SPOOL12\"]}, ${previous[\"NOW_SPOOL22\"]}, ${0}, ${spoollen1}, ${previous[\"WIRE SIZE2\"]}});`\n\n        msg.query = query;\n\n        node.send([null, msg])\n        previous[\"SPOOLER 2 LENGTH ACTUAL2\"] = 0;\n        msg.payload = previous;\n        node.send([msg, null])\n    }\n    \n    \n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 840,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Spool change data)"
        ]
    },
    {
        "id": "669cb7bf331cd17e",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Multi Wire 32-1 Ping",
        "func": "const tableno = 38\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload == false){\n       \n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"ANNEALER\", \"ANNEALER_SELECTION\", \"DOWN_TIME\", \"GEAR_OIL_TEMPERATURE\", \"Line_Speed_Act\", \"Line_Speed_MAX\", \"LUBRICANT_TEMPERATURE\", \"Machine_status\", \n     \"NO_OF_WIRES\", \"REASON_OF_STOP\", \"SPOOLER_1_LAST_SPOOL_LENGHT\", \"SPOOLER_1_LENGTH_ACTUAL\", \"SPOOLER_1_NO_OF_WIRES\", \"SPOOLER_1_SELECTION\", \"SPOOLER_2_LAST_SPOOL_LENGHT\", \"SPOOLER_2_LENGTH_ACTUAL\", \"SPOOLER_2_NO_OF_WIRES\", \"SPOOLER_2_SELECTION\", \"WIRE_SIZE\")\n\tVALUES ( '${datetime}', ${0},\n     ${false}, \n     ${0}, \n     ${0}, \n     ${0}, \n     ${0}, \n     ${0}, \n     ${false}, \n     ${0}, \n     ${7}, \n     ${0}, \n     ${0}, \n     ${0}, \n     ${false}, \n     ${0}, \n     ${0}, \n     ${0}, \n     ${false},  \n     ${0});`\n\n    msg.query = query\n\n\n    return msg;\n    \n}else\n{\n    \n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "1bb065560b523671",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Multiwire 32 1",
        "info": "",
        "x": 890,
        "y": 520,
        "wires": []
    },
    {
        "id": "2c604099852da1b0",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Multiwire 32 1 Summary",
        "info": "",
        "x": 920,
        "y": 680,
        "wires": []
    },
    {
        "id": "6f0e82e217426bba",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Multi Wire 32-2 Stop",
        "func": "var bool = [\"true\",\"false\"];\nvar status;\nvar down;\nconst tableno = 39\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"Machine Status3\"] == false)\n{\n    status = \"false\";\n    flow.set(\"MWD322_1_len\",msg.payload[\"SPOOLER 1 LENGTH ACTUAL3\"].toString());\n    flow.set(\"MWD322_2_len\",msg.payload[\"SPOOLER 2 LENGTH ACTUAL3\"].toString());\n    \n     const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"ANNEALER\", \"ANNEALER_SELECTION\", \"DOWN_TIME\", \"GEAR_OIL_TEMPERATURE\", \"Line_Speed_Act\", \"Line_Speed_MAX\", \"LUBRICANT_TEMPERATURE\", \"Machine_status\", \n     \"NO_OF_WIRES\", \"REASON_OF_STOP\", \"SPOOLER_1_LAST_SPOOL_LENGHT\", \"SPOOLER_1_LENGTH_ACTUAL\", \"SPOOLER_1_NO_OF_WIRES\", \"SPOOLER_1_SELECTION\", \"SPOOLER_2_LAST_SPOOL_LENGHT\", \"SPOOLER_2_LENGTH_ACTUAL\", \"SPOOLER_2_NO_OF_WIRES\", \"SPOOLER_2_SELECTION\", \"WIRE_SIZE\")\n\tVALUES ( '${datetime}', ${msg.payload[\"ANNEALER3\"]},\n     ${msg.payload[\"ANNEALER SELECTION3\"]}, \n     ${0}, \n     ${msg.payload[\"GEAR OIL TEMPERATURE3\"]}, \n     ${0}, \n     ${msg.payload[\"Line Speed MAX3\"]}, \n     ${msg.payload[\"LURICANT TEMPERATURE3\"]}, \n     ${false}, \n     ${msg.payload[\"NO OF WIRES3\"]}, \n     ${msg.payload[\"REASON OF STOP3\"]}, \n     ${msg.payload[\"SPOOLER 1 LAST SPOOL LENGTH3\"]}, \n     ${msg.payload[\"SPOOLER 1 LENGTH ACTUAL3\"]}, \n     ${msg.payload[\"NOW_SPOOL13\"]}, \n     ${msg.payload[\"SPOOLER 1 SELECTION3\"]}, \n     ${msg.payload[\"SPOOLERR 2 LAST SPOOL LENGTH3\"]}, \n     ${msg.payload[\"SPOOLER 2 LENGTH ACTUAL3\"]}, \n     ${msg.payload[\"NOW_SPOOL23\"]}, \n     ${msg.payload[\"SPOOLER 2 SELECTION3\"]},  \n     ${msg.payload[\"WIRE SIZE3\"]});`\n    \n    msg.query=query\n//     const values = [\n//     //MMW32-2\n    \n//     { dataPointId: \"DP-Line_Speed_Act00003\", qualityCode: \"1\", value: \"0\"},//Line Speed Act\n//     { dataPointId: \"DP-Line_Speed_MAX00003\", qualityCode: \"1\", value: msg.payload[\"Line Speed MAX3\"].toString() },//Line Speed max\n//     { dataPointId: \"DP-Machine_status00003\", qualityCode: \"1\", value: status },//Machine Status\n//     { dataPointId: \"DP-LUBRICANT_TEMPERATURE00003\", qualityCode: \"1\", value: msg.payload[\"LURICANT TEMPERATURE3\"].toString()},//Lubricant temp\n//     { dataPointId: \"DP-GEAR_OIL_TEMPERATURE00003\", qualityCode: \"1\", value: msg.payload[\"GEAR OIL TEMPERATURE3\"].toString() },//Gear Oil temp\n//     { dataPointId: \"DP-SPOOLER_1_SELECTION00003\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 1 SELECTION3\"].toString() },//Spooler 1 Selection\n//     { dataPointId: \"DP-SPOOLER_2_SELECTION00003\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 2 SELECTION3\"].toString() },//spooler 2 Selection\n//     { dataPointId: \"DP-ANNEALER_SELECTION00003\", qualityCode: \"1\", value: msg.payload[\"ANNEALER SELECTION3\"].toString() },//Annealer selection\n//     { dataPointId: \"DP-NO_OF_WIRES00003\", qualityCode: \"1\", value: msg.payload[\"NO OF WIRES3\"].toString() },//No of Wire\n//     { dataPointId: \"DP-WIRE_SIZE00003\", qualityCode: \"1\", value: msg.payload[\"WIRE SIZE3\"].toString() },//Wire Size\n//     { dataPointId: \"DP-SPOOLER_1_LENGTH_ACTUAL00003\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 1 LENGTH ACTUAL3\"].toString() },//Spooler 1 Length\n//     { dataPointId: \"DP-SPOOLER_1_LAST_SPOOL_LENG00003\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 1 LAST SPOOL LENGTH3\"].toString() },//Spooler 1 last spool length\n//     { dataPointId: \"DP-SPOOLER_2_LENGTH_ACTUAL00003\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 2 LENGTH ACTUAL3\"].toString() },//Spooler 2 length\n//     { dataPointId: \"DP-SPOOLER_2_LAST_SPOOL_LENG00003\", qualityCode: \"1\", value: msg.payload[\"SPOOLERR 2 LAST SPOOL LENGTH3\"].toString() },//spooler 2 last spool length\n//     { dataPointId: \"DP-REASON_OF_STOP00009\", qualityCode: \"1\", value: msg.payload[\"REASON OF STOP3\"].toString() },//Reason of stop\n//     { dataPointId: \"1627109364475\", qualityCode: \"1\", value: msg.payload[\"ANNEALER3\"].toString() },//spool1 total\n//     { dataPointId: \"1629541759766\", qualityCode: \"1\", value: \"0\"},\n//     { dataPointId: \"1637134381783\", qualityCode: \"1\", value: msg.payload[\"NOW_SPOOL13\"].toString() },//Reason of stop\n//     { dataPointId: \"1637134387716\", qualityCode: \"1\", value: msg.payload[\"NOW_SPOOL23\"].toString() }//Reason of stop\n \n//    ];\n   \n \n\n\n// msg._time = new Date();\n// msg.payload = values;\nreturn msg;\n}\nelse{\n    status = \"false\";\n    \n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "b6418d8875000c18",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Multi Wire 32-2",
        "func": "var bool = [\"true\",\"false\"];\nvar status;\nvar down;\nconst tableno = 39\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"Machine Status3\"] == true)\n{\n    status = \"true\";\n    down= Number(global.get(\"mmw322down\") + 1);\n    global.set(\"mmw322down\",down);\n    flow.set(\"MWD322_1_len\",msg.payload[\"SPOOLER 1 LENGTH ACTUAL3\"].toString());\n    flow.set(\"MWD322_2_len\",msg.payload[\"SPOOLER 2 LENGTH ACTUAL3\"].toString());\n    \n     const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"ANNEALER\", \"ANNEALER_SELECTION\", \"DOWN_TIME\", \"GEAR_OIL_TEMPERATURE\", \"Line_Speed_Act\", \"Line_Speed_MAX\", \"LUBRICANT_TEMPERATURE\", \"Machine_status\", \n     \"NO_OF_WIRES\", \"REASON_OF_STOP\", \"SPOOLER_1_LAST_SPOOL_LENGHT\", \"SPOOLER_1_LENGTH_ACTUAL\", \"SPOOLER_1_NO_OF_WIRES\", \"SPOOLER_1_SELECTION\", \"SPOOLER_2_LAST_SPOOL_LENGHT\", \"SPOOLER_2_LENGTH_ACTUAL\", \"SPOOLER_2_NO_OF_WIRES\", \"SPOOLER_2_SELECTION\", \"WIRE_SIZE\")\n\tVALUES ( '${datetime}', ${msg.payload[\"ANNEALER3\"]},\n     ${msg.payload[\"ANNEALER SELECTION3\"]}, \n     ${0}, \n     ${msg.payload[\"GEAR OIL TEMPERATURE3\"]}, \n     ${msg.payload[\"Line Speed Act3\"]}, \n     ${msg.payload[\"Line Speed MAX3\"]}, \n     ${msg.payload[\"LURICANT TEMPERATURE3\"]}, \n     ${true}, \n     ${msg.payload[\"NO OF WIRES3\"]}, \n     ${msg.payload[\"REASON OF STOP3\"]}, \n     ${msg.payload[\"SPOOLER 1 LAST SPOOL LENGTH3\"]}, \n     ${msg.payload[\"SPOOLER 1 LENGTH ACTUAL3\"]}, \n     ${msg.payload[\"NOW_SPOOL13\"]}, \n     ${msg.payload[\"SPOOLER 1 SELECTION3\"]}, \n     ${msg.payload[\"SPOOLERR 2 LAST SPOOL LENGTH3\"]}, \n     ${msg.payload[\"SPOOLER 2 LENGTH ACTUAL3\"]}, \n     ${msg.payload[\"NOW_SPOOL23\"]}, \n     ${msg.payload[\"SPOOLER 2 SELECTION3\"]},  \n     ${msg.payload[\"WIRE SIZE3\"]});`\n    \n    msg.query=query\n\nreturn msg;\n}\nelse{\n    status = \"false\";\n    \n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "ab227fd9fe9faac5",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Multi Wire 32-2 Ping",
        "func": "const tableno = 39\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload == false ){\n       \n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"ANNEALER\", \"ANNEALER_SELECTION\", \"DOWN_TIME\", \"GEAR_OIL_TEMPERATURE\", \"Line_Speed_Act\", \"Line_Speed_MAX\", \"LUBRICANT_TEMPERATURE\", \"Machine_status\", \n     \"NO_OF_WIRES\", \"REASON_OF_STOP\", \"SPOOLER_1_LAST_SPOOL_LENGHT\", \"SPOOLER_1_LENGTH_ACTUAL\", \"SPOOLER_1_NO_OF_WIRES\", \"SPOOLER_1_SELECTION\", \"SPOOLER_2_LAST_SPOOL_LENGHT\", \"SPOOLER_2_LENGTH_ACTUAL\", \"SPOOLER_2_NO_OF_WIRES\", \"SPOOLER_2_SELECTION\", \"WIRE_SIZE\")\n\tVALUES ( '${datetime}', ${0},\n     ${false}, \n     ${0}, \n     ${0}, \n     ${0}, \n     ${0}, \n     ${0}, \n     ${false}, \n     ${0}, \n     ${7}, \n     ${0}, \n     ${0}, \n     ${0}, \n     ${false}, \n     ${0}, \n     ${0}, \n     ${0}, \n     ${false},  \n     ${0});`\n\n    msg.query = query\n \n//  const values1 = [\n//     //MMW32-2\n    \n//     { dataPointId: \"DP-Line_Speed_Act00003\", qualityCode: \"1\", value: \"0\"},//Line Speed Act\n//     { dataPointId: \"DP-Line_Speed_MAX00003\", qualityCode: \"1\", value: \"0\"},//Line Speed max\n//     { dataPointId: \"DP-Machine_status00003\", qualityCode: \"1\", value: \"false\" },//Machine Status\n//     { dataPointId: \"DP-LUBRICANT_TEMPERATURE00003\", qualityCode: \"1\", value: \"0\" },//Lubricant temp\n//     { dataPointId: \"DP-GEAR_OIL_TEMPERATURE00003\", qualityCode: \"1\", value: \"0\" },//Gear Oil temp\n//     { dataPointId: \"DP-SPOOLER_1_SELECTION00003\", qualityCode: \"1\",  value: \"false\" },//Spooler 1 Selection\n//     { dataPointId: \"DP-SPOOLER_2_SELECTION00003\", qualityCode: \"1\",  value: \"false\" },//spooler 2 Selection\n//     { dataPointId: \"DP-ANNEALER_SELECTION00003\", qualityCode: \"1\",  value: \"false\" },//Annealer selection\n//     { dataPointId: \"DP-NO_OF_WIRES00003\", qualityCode: \"1\", value: \"0\"},//No of Wire\n//     { dataPointId: \"DP-WIRE_SIZE00003\", qualityCode: \"1\", value: \"0\"},//Wire Size\n//     { dataPointId: \"DP-SPOOLER_1_LENGTH_ACTUAL00003\", qualityCode: \"1\", value: \"0\" },//Spooler 1 Length\n//     { dataPointId: \"DP-SPOOLER_1_LAST_SPOOL_LENG00003\", qualityCode: \"1\",value: \"0\" },//Spooler 1 last spool length\n//     { dataPointId: \"DP-SPOOLER_2_LENGTH_ACTUAL00003\", qualityCode: \"1\", value: \"0\" },//Spooler 2 length\n//     { dataPointId: \"DP-SPOOLER_2_LAST_SPOOL_LENG00003\", qualityCode: \"1\", value: \"0\" },//spooler 2 last spool length\n//     { dataPointId: \"DP-REASON_OF_STOP00009\", qualityCode: \"1\", value: \"7\" },//Reason of stop\n//     { dataPointId: \"1627109364475\", qualityCode: \"1\", value: \"0\" },\n//     { dataPointId: \"1637134381783\", qualityCode: \"1\", value: \"0\" },//Reason of stop\n//     { dataPointId: \"1637134387716\", qualityCode: \"1\", value: \"0\"}//Reason of stop\n \n//    ];   \n\n   \n    // msg._time = new Date();\n    // msg.payload = values1;   \n    return msg;\n    \n}else\n{\n   \n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "e445b8c9a1980258",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Save & log Shift1 Lenght ",
        "func": "// When shift change file is not existing, error node shall trigger. First Data after deployment will be uploaded to mindsphere withour comaprision to previous shift data.\nvar current = JSON.parse(msg.localStorage.data);\nconst tableno=32\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n\nif(msg.hasOwnProperty(\"error\")){\n    msg.payload = current;\n    node.send([msg, null]);\n    \n    if(current[\"SPOOLER 1 SELECTION3\"] === true){\n          const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${current[\"NO OF WIRES3\"]}, ${current[\"NOW_SPOOL13\"]}, ${current[\"NOW_SPOOL23\"]}, ${current[\"SPOOLER 1 LENGTH ACTUAL3\"]}, ${0}, ${current[\"WIRE SIZE3\"]}});`\n\n        msg.query = query;\n\n    node.send([null, msg])\n    }\n    //Send Shift change data to Mindsphere when first shift change occurs after deployment.\n    \n }\n // When shift change data is available, current and shift data shall be compared and if found != then data shall be uploaded to Mindsphere.\n else{\n     var lshift = JSON.parse(msg.payload);\n     //var current = msg.shiftchangedata;\n     if(current[\"SPOOLER 1 SELECTION3\"] === true){\n            var lshiftlen = Number(lshift[\"SPOOLER 1 LENGTH ACTUAL3\"]);\n                                            \n            var currentlen = Number(current[\"SPOOLER 1 LENGTH ACTUAL3\"]);\n            msg.payload = lshiftlen;\n            if (lshiftlen != currentlen){\n                var length = currentlen - lshiftlen;\n\n                const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${current[\"NO OF WIRES3\"]}, ${current[\"NOW_SPOOL13\"]}, ${current[\"NOW_SPOOL23\"]}, ${length}, ${0}, ${current[\"WIRE SIZE3\"]}});`\n\n                msg.query = query;\n                node.send([null, msg]) // Send to Mindsphere.\n                //msg = null;\n                msg.payload = current;\n                node.send([msg,null]) // Send to file for storing last shift data.\n            }\n        }\n      \n     \n     \n     //return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1120,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Shift Time Data)"
        ]
    },
    {
        "id": "ec4081b69b8ab0d5",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Save & log Shift2 Lenght ",
        "func": "// When shift change file is not existing, error node shall trigger. First Data after deployment will be uploaded to mindsphere withour comaprision to previous shift data.\nvar current = JSON.parse(msg.localStorage.data);\nconst tableno=32\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n\nif(msg.hasOwnProperty(\"error\")){\n    msg.payload = current;\n    node.send([msg, null]);\n    \n    if(current[\"SPOOLER 2 SELECTION3\"] === true){\n            const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${current[\"NO OF WIRES3\"]}, ${current[\"NOW_SPOOL13\"]}, ${current[\"NOW_SPOOL23\"]}, ${0}, ${current[\"SPOOLER 2 LENGTH ACTUAL3\"]}, ${current[\"WIRE SIZE3\"]}});`\n\n        msg.query = query;\n    node.send([null, msg])\n    }\n    \n    \n    //Send Shift change data to Mindsphere when first shift change occurs after deployment.\n    \n }\n // When shift change data is available, current and shift data shall be compared and if found != then data shall be uploaded to Mindsphere.\n else{\n     var lshift = JSON.parse(msg.payload);\n     //var current = msg.shiftchangedata;\n      if(current[\"SPOOLER 2 SELECTION3\"] === true){\n            var lshiftlen1 = Number(lshift[\"SPOOLER 2 LENGTH ACTUAL3\"]);\n            var currentlen1 = Number(current[\"SPOOLER 2 LENGTH ACTUAL3\"]);\n            msg.payload = lshiftlen1;\n            if (lshiftlen1 != currentlen1){\n                var length1 = currentlen1 - lshiftlen1;\n                             const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${current[\"NO OF WIRES3\"]}, ${current[\"NOW_SPOOL13\"]}, ${current[\"NOW_SPOOL23\"]}, ${0}, ${length1}, ${current[\"WIRE SIZE3\"]}});`\n\n                msg.query = query;\n                 \n                node.send([null, msg]) // Send to Mindsphere.\n                //msg = null;\n                msg.payload = current;\n                node.send([msg,null]) // Send to file for storing last shift data.\n            }\n        }\n     \n     \n     //return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1160,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Shift Time Data)"
        ]
    },
    {
        "id": "abe9679870ee0957",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Send data to Mindsphere Spooler 1",
        "func": "var previous = msg.spoolchange[\"previous\"];\nconst tableno=32\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n// When shift last data file is not existing, error node shall give the msg with all key:value pair.\nif(msg.hasOwnProperty(\"error\")){\n    // Send summary data to mindsphere for previous value at first spooler change after deployment. without subtraction of previous shift data.\n    msg.payload = previous;\n    node.send([msg, null])\n \n    \n    if(previous[\"SPOOLER 1 SELECTION3\"] === true){\n        const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${previous[\"NO OF WIRES3\"]}, ${previous[\"NOW_SPOOL13\"]}, ${previous[\"NOW_SPOOL23\"]}, ${previous[\"SPOOLER 1 LENGTH ACTUAL3\"]},\n     ${0}, ${previous[\"WIRE SIZE3\"]}});`\n\n        msg.query = query;\n        \n    node.send([null, msg])\n    }\n\n    \n \n}\nelse{\n    msg.payload = JSON.parse(msg.payload)\n    //When first spool change occurs after shift change subtract shift data from current spool lenght.\n    if(previous[\"SPOOLER 1 SELECTION3\"] === true){\n        var lshiftlen = Number(msg.payload[\"SPOOLER 1 LENGTH ACTUAL3\"]);\n        var previouslen = Number(previous[\"SPOOLER 1 LENGTH ACTUAL3\"]);\n        var spoollen = previouslen - lshiftlen;\n        const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${previous[\"NO OF WIRES3\"]}, ${previous[\"NOW_SPOOL13\"]}, ${previous[\"NOW_SPOOL23\"]}, ${spoollen},\n     ${0}, ${previous[\"WIRE SIZE3\"]}});`\n\n        msg.query = query;\n        \n        node.send([null, msg])\n        previous[\"SPOOLER 1 LENGTH ACTUAL3\"] = 0;\n        msg.payload = previous;\n        node.send([msg, null])\n    }\n    \n    \n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1200,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Spool change data)"
        ]
    },
    {
        "id": "ebb0356f638a3af0",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Send data to Mindsphere Spooler 2",
        "func": "var previous = msg.spoolchange[\"previous\"];\n// When shift last data file is not existing, error node shall give the msg with all key:value pair.\nconst tableno=32\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n\nif(msg.hasOwnProperty(\"error\")){\n    // Send summary data to mindsphere for previous value at first spooler change after deployment. without subtraction of previous shift data.\n    msg.payload = previous;\n    node.send([msg, null])\n    \n    \n    if(previous[\"SPOOLER 2 SELECTION3\"] === true){\n        const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${previous[\"NO OF WIRES3\"]}, ${previous[\"NOW_SPOOL13\"]}, ${previous[\"NOW_SPOOL23\"]}, ${0},\n     ${previous[\"SPOOLER 2 LENGTH ACTUAL3\"]}, ${previous[\"WIRE SIZE3\"]}});`\n\n        msg.query = query;\n    node.send([null, msg])\n    }\n    \n \n}\nelse{\n    msg.payload = JSON.parse(msg.payload)\n    //When first spool change occurs after shift change subtract shift data from current spool lenght.\n    \n    \n    if(previous[\"SPOOLER 2 SELECTION3\"] === true){\n        var lshiftlen1 = Number(msg.payload[\"SPOOLER 2 LENGTH ACTUAL3\"]);\n        var previouslen1 = Number(previous[\"SPOOLER 2 LENGTH ACTUAL3\"]);\n        var spoollen1 = previouslen1 - lshiftlen1;\n        \n        const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${previous[\"NO OF WIRES3\"]}, ${previous[\"NOW_SPOOL13\"]}, ${previous[\"NOW_SPOOL23\"]}, ${0},\n     ${spoollen1}, ${previous[\"WIRE SIZE3\"]}});`\n\n        msg.query = query;\n\n        node.send([null, msg])\n        previous[\"SPOOLER 2 LENGTH ACTUAL3\"] = 0;\n        msg.payload = previous;\n        node.send([msg, null])\n    }\n    \n    \n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1240,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Spool change data)"
        ]
    },
    {
        "id": "a8d70cf0adb9c4dc",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Multiwire 32 2",
        "info": "",
        "x": 890,
        "y": 900,
        "wires": []
    },
    {
        "id": "3e37525e8cec018b",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Multiwire 32 2 Summary",
        "info": "",
        "x": 920,
        "y": 1080,
        "wires": []
    },
    {
        "id": "8069df173385fcd5",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Multi Wire 32-3 Stop",
        "func": "var bool = [\"true\",\"false\"];\nvar status;\nvar down;\nconst tableno = 40\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"Machine Status4\"] == false)\n{\n    status = \"false\";\n    \n    flow.set(\"MWD323_1_len\",msg.payload[\"SPOOLER 1 LENGTH ACTUAL4\"].toString());\n    flow.set(\"MWD323_2_len\",msg.payload[\"SPOOLER 2 LENGTH ACTUAL4\"].toString());\n    \n     const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"ANNEALER\", \"ANNEALER_SELECTION\", \"DOWN_TIME\", \"GEAR_OIL_TEMPERATURE\", \"Line_Speed_Act\", \"Line_Speed_MAX\", \"LUBRICANT_TEMPERATURE\", \"Machine_status\", \n     \"NO_OF_WIRES\", \"REASON_OF_STOP\", \"SPOOLER_1_LAST_SPOOL_LENGHT\", \"SPOOLER_1_LENGTH_ACTUAL\", \"SPOOLER_1_NO_OF_WIRES\", \"SPOOLER_1_SELECTION\", \"SPOOLER_2_LAST_SPOOL_LENGHT\", \"SPOOLER_2_LENGTH_ACTUAL\", \"SPOOLER_2_NO_OF_WIRES\", \"SPOOLER_2_SELECTION\", \"WIRE_SIZE\")\n\tVALUES ( '${datetime}', ${msg.payload[\"ANNEALER4\"]},\n     ${msg.payload[\"ANNEALER SELECTION4\"]}, \n     ${0}, \n     ${msg.payload[\"GEAR OIL TEMPERATURE4\"]}, \n     ${0}, \n     ${msg.payload[\"Line Speed MAX4\"]}, \n     ${msg.payload[\"LURICANT TEMPERATURE4\"]}, \n     ${false}, \n     ${msg.payload[\"NO OF WIRES4\"]}, \n     ${msg.payload[\"REASON OF STOP4\"]}, \n     ${msg.payload[\"SPOOLER 1 LAST SPOOL LENGTH4\"]}, \n     ${msg.payload[\"SPOOLER 1 LENGTH ACTUAL4\"]}, \n     ${msg.payload[\"NOW_SPOOL14\"]}, \n     ${msg.payload[\"SPOOLER 1 SELECTION4\"]}, \n     ${msg.payload[\"SPOOLERR 2 LAST SPOOL LENGTH4\"]}, \n     ${msg.payload[\"SPOOLER 2 LENGTH ACTUAL4\"]}, \n     ${msg.payload[\"NOW_SPOOL24\"]}, \n     ${msg.payload[\"SPOOLER 2 SELECTION4\"]},  \n     ${msg.payload[\"WIRE SIZE4\"]});`\n    \n    msg.query=query\n//     const values = [\n//     //MMW32-2\n    \n//     { dataPointId: \"DP-Line_Speed_Act00004\", qualityCode: \"1\", value: \"0\"},//Line Speed Act\n//     { dataPointId: \"DP-Line_Speed_MAX00004\", qualityCode: \"1\", value: msg.payload[\"Line Speed MAX4\"].toString() },//Line Speed max\n//     { dataPointId: \"DP-Machine_status00004\", qualityCode: \"1\", value: status },//Machine Status\n//     { dataPointId: \"DP-LUBRICANT_TEMPERATURE00004\", qualityCode: \"1\", value: msg.payload[\"LURICANT TEMPERATURE4\"].toString() },//Lubricant temp\n//     { dataPointId: \"DP-GEAR_OIL_TEMPERATURE00004\", qualityCode: \"1\", value: msg.payload[\"GEAR OIL TEMPERATURE4\"].toString() },//Gear Oil temp\n//     { dataPointId: \"DP-SPOOLER_1_SELECTION00004\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 1 SELECTION4\"].toString() },//Spooler 1 Selection\n//     { dataPointId: \"DP-SPOOLER_2_SELECTION00004\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 2 SELECTION4\"].toString() },//spooler 2 Selection\n//     { dataPointId: \"DP-ANNEALER_SELECTION00004\", qualityCode: \"1\", value: msg.payload[\"ANNEALER SELECTION4\"].toString() },//Annealer selection\n//     { dataPointId: \"DP-NO_OF_WIRES00004\", qualityCode: \"1\", value: msg.payload[\"NO OF WIRES4\"].toString() },//No of Wire\n//     { dataPointId: \"DP-WIRE_SIZE00004\", qualityCode: \"1\", value: msg.payload[\"WIRE SIZE4\"].toString() },//Wire Size\n//     { dataPointId: \"DP-SPOOLER_1_LENGTH_ACTUAL00004\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 1 LENGTH ACTUAL4\"].toString() },//Spooler 1 Length\n//     { dataPointId: \"DP-SPOOLER_1_LAST_SPOOL_LENG00004\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 1 LAST SPOOL LENGTH4\"].toString() },//Spooler 1 last spool length\n//     { dataPointId: \"DP-SPOOLER_2_LENGTH_ACTUAL00004\", qualityCode: \"1\", value: msg.payload[\"SPOOLER 2 LENGTH ACTUAL4\"].toString() },//Spooler 2 length\n//     { dataPointId: \"DP-SPOOLER_2_LAST_SPOOL_LENG00004\", qualityCode: \"1\", value: msg.payload[\"SPOOLERR 2 LAST SPOOL LENGTH4\"].toString() },//spooler 2 last spool length\n//     { dataPointId: \"DP-REASON_OF_STOP00010\", qualityCode: \"1\", value: msg.payload[\"REASON OF STOP4\"].toString() },//Reason of stop\n//     { dataPointId: \"1627109391001\", qualityCode: \"1\", value: msg.payload[\"ANNEALER4\"].toString() },//Reason of stop\n//     { dataPointId: \"1629541767189\", qualityCode: \"1\", value: \"0\" },\n//     { dataPointId: \"1637134397360\", qualityCode: \"1\", value: msg.payload[\"NOW_SPOOL14\"].toString() },//Reason of stop\n//     { dataPointId: \"1637134403372\", qualityCode: \"1\", value: msg.payload[\"NOW_SPOOL24\"].toString() }//Reason of stop\n \n//    ];\n    \n\n// msg._time = new Date();\n// msg.payload = values;\nreturn msg;\n}\nelse{\n    status = \"false\";\n    \n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "10e4c41f3dc6473b",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Multi Wire 32-3",
        "func": "var bool = [\"true\",\"false\"];\nvar status;\nvar down;\nconst tableno = 40\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload[\"Machine Status4\"] == true)\n{\n    status = \"true\";\n    down= Number(global.get(\"mmw323down\") + 1);\n    global.set(\"mmw323down\",down);\n    flow.set(\"MWD323_1_len\",msg.payload[\"SPOOLER 1 LENGTH ACTUAL4\"].toString());\n    flow.set(\"MWD323_2_len\",msg.payload[\"SPOOLER 2 LENGTH ACTUAL4\"].toString());\n    \n     const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"ANNEALER\", \"ANNEALER_SELECTION\", \"DOWN_TIME\", \"GEAR_OIL_TEMPERATURE\", \"Line_Speed_Act\", \"Line_Speed_MAX\", \"LUBRICANT_TEMPERATURE\", \"Machine_status\", \n     \"NO_OF_WIRES\", \"REASON_OF_STOP\", \"SPOOLER_1_LAST_SPOOL_LENGHT\", \"SPOOLER_1_LENGTH_ACTUAL\", \"SPOOLER_1_NO_OF_WIRES\", \"SPOOLER_1_SELECTION\", \"SPOOLER_2_LAST_SPOOL_LENGHT\", \"SPOOLER_2_LENGTH_ACTUAL\", \"SPOOLER_2_NO_OF_WIRES\", \"SPOOLER_2_SELECTION\", \"WIRE_SIZE\")\n\tVALUES ( '${datetime}', ${msg.payload[\"ANNEALER3\"]},\n     ${msg.payload[\"ANNEALER SELECTION4\"]}, \n     ${0}, \n     ${msg.payload[\"GEAR OIL TEMPERATURE4\"]}, \n     ${msg.payload[\"Line Speed Act4\"]}, \n     ${msg.payload[\"Line Speed MAX4\"]}, \n     ${msg.payload[\"LURICANT TEMPERATURE4\"]}, \n     ${true}, \n     ${msg.payload[\"NO OF WIRES4\"]}, \n     ${msg.payload[\"REASON OF STOP4\"]}, \n     ${msg.payload[\"SPOOLER 1 LAST SPOOL LENGTH4\"]}, \n     ${msg.payload[\"SPOOLER 1 LENGTH ACTUAL4\"]}, \n     ${msg.payload[\"NOW_SPOOL14\"]}, \n     ${msg.payload[\"SPOOLER 1 SELECTION4\"]}, \n     ${msg.payload[\"SPOOLERR 2 LAST SPOOL LENGTH4\"]}, \n     ${msg.payload[\"SPOOLER 2 LENGTH ACTUAL4\"]}, \n     ${msg.payload[\"NOW_SPOOL24\"]}, \n     ${msg.payload[\"SPOOLER 2 SELECTION4\"]},  \n     ${msg.payload[\"WIRE SIZE4\"]});`\n    \n    msg.query=query\n    \nreturn msg;\n}\nelse{\n    status = \"false\";\n    \n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "448b012f469ab0db",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Save & log Shift1 Lenght ",
        "func": "// When shift change file is not existing, error node shall trigger. First Data after deployment will be uploaded to mindsphere withour comaprision to previous shift data.\nvar current = JSON.parse(msg.localStorage.data);\nconst tableno=33\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n\nif(msg.hasOwnProperty(\"error\")){\n    msg.payload = current;\n    node.send([msg, null]);\n    \n    if(current[\"SPOOLER 1 SELECTION4\"] === true){\n        \n            const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${current[\"NO OF WIRES4\"]}, ${current[\"NOW_SPOOL14\"]}, ${current[\"NOW_SPOOL24\"]}, ${current[\"SPOOLER 1 LENGTH ACTUAL4\"]}, ${0}, ${current[\"WIRE SIZE4\"]}});`\n\n        msg.query = query;\n    node.send([null, msg])\n    }\n    //Send Shift change data to Mindsphere when first shift change occurs after deployment.\n    \n }\n // When shift change data is available, current and shift data shall be compared and if found != then data shall be uploaded to Mindsphere.\n else{\n     var lshift = JSON.parse(msg.payload);\n     //var current = msg.shiftchangedata;\n     if(current[\"SPOOLER 1 SELECTION4\"] === true){\n            var lshiftlen = Number(lshift[\"SPOOLER 1 LENGTH ACTUAL4\"]);\n            var currentlen = Number(current[\"SPOOLER 1 LENGTH ACTUAL4\"]);\n            msg.payload = lshiftlen;\n            if (lshiftlen != currentlen){\n                var length = currentlen - lshiftlen;\n                const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${current[\"NO OF WIRES4\"]}, ${current[\"NOW_SPOOL14\"]}, ${current[\"NOW_SPOOL24\"]}, ${length}, ${0}, ${current[\"WIRE SIZE4\"]}});`\n\n                msg.query = query;\n                 \n                node.send([null, msg]) // Send to Mindsphere.\n                //msg = null;\n                msg.payload = current;\n                node.send([msg,null]) // Send to file for storing last shift data.\n            }\n        }\n      \n     \n     \n     //return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1560,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Shift Time Data)"
        ]
    },
    {
        "id": "ad9cd01efa68ee4e",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Save & log Shift2 Lenght ",
        "func": "// When shift change file is not existing, error node shall trigger. First Data after deployment will be uploaded to mindsphere withour comaprision to previous shift data.\nvar current = JSON.parse(msg.localStorage.data);\nconst tableno=33\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n\nif(msg.hasOwnProperty(\"error\")){\n    msg.payload = current;\n    node.send([msg, null]);\n    \n    if(current[\"SPOOLER 2 SELECTION4\"] === true){\n         const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${current[\"NO OF WIRES4\"]}, ${current[\"NOW_SPOOL14\"]}, ${current[\"NOW_SPOOL24\"]}, ${0}, ${current[\"SPOOLER 2 LENGTH ACTUAL4\"]}, ${current[\"WIRE SIZE4\"]}});`\n\n        msg.query = query;\n    node.send([null, msg])\n    }\n    \n    \n    //Send Shift change data to Mindsphere when first shift change occurs after deployment.\n    \n }\n // When shift change data is available, current and shift data shall be compared and if found != then data shall be uploaded to Mindsphere.\n else{\n     var lshift = JSON.parse(msg.payload);\n     //var current = msg.shiftchangedata;\n      if(current[\"SPOOLER 2 SELECTION4\"] === true){\n            var lshiftlen1 = Number(lshift[\"SPOOLER 2 LENGTH ACTUAL4\"]);\n            var currentlen1 = Number(current[\"SPOOLER 2 LENGTH ACTUAL4\"]);\n            msg.payload = lshiftlen1;\n            if (lshiftlen1 != currentlen1){\n                var length1 = currentlen1 - lshiftlen1;\n                const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${current[\"NO OF WIRES4\"]}, ${current[\"NOW_SPOOL14\"]}, ${current[\"NOW_SPOOL24\"]}, ${0}, ${length1}, ${current[\"WIRE SIZE4\"]}});`\n\n                msg.query = query;\n                \n                node.send([null, msg]) // Send to Mindsphere.\n                //msg = null;\n                msg.payload = current;\n                node.send([msg,null]) // Send to file for storing last shift data.\n            }\n        }\n     \n     \n     //return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1600,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Shift Time Data)"
        ]
    },
    {
        "id": "fa36e12f321a5e6c",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Send data to Mindsphere Spooler 1",
        "func": "var previous = msg.spoolchange[\"previous\"];\nconst tableno=33\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n\n// When shift last data file is not existing, error node shall give the msg with all key:value pair.\nif(msg.hasOwnProperty(\"error\")){\n    // Send summary data to mindsphere for previous value at first spooler change after deployment. without subtraction of previous shift data.\n    msg.payload = previous;\n    node.send([msg, null])\n    \n    \n    if(previous[\"SPOOLER 1 SELECTION4\"] === true){\n        \n        const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${previous[\"NO OF WIRES4\"]}, ${previous[\"NOW_SPOOL14\"]}, ${previous[\"NOW_SPOOL24\"]}, ${previous[\"SPOOLER 1 LENGTH ACTUAL4\"]}, ${0}, ${previous[\"WIRE SIZE4\"]}});`\n\n        msg.query = query;\n\n    //     const values = [\n    //         { dataPointId: \"1639466813255\", qualityCode: \"1\", value: \"false\" },//Machine Status\n    //         { dataPointId: \"1639466841662\", qualityCode: \"1\", value: previous[\"NO OF WIRES4\"].toString() },//No of Wire\n    //         { dataPointId: \"1639466830352\", qualityCode: \"1\", value: previous[\"WIRE SIZE4\"].toString() },//Wire Size\n    //         { dataPointId: \"1639466848841\", qualityCode: \"1\", value: previous[\"SPOOLER 1 LENGTH ACTUAL4\"].toString() },//Spooler 1 Length\n    //         { dataPointId: \"1639466866192\", qualityCode: \"1\", value: \"0\" },//Spooler 2 length\n    //         { dataPointId: \"1639725359431\", qualityCode: \"1\", value: previous[\"NOW_SPOOL14\"].toString() },//SP1 NOW\n    //         { dataPointId: \"1639725367432\", qualityCode: \"1\", value: previous[\"NOW_SPOOL24\"].toString() }//SP2 NOW\n    //  ];\n    // //msg = null;\n    // msg.payload = values;\n    // msg._time = new Date();\n    node.send([null, msg])\n    }\n\n    \n \n}\nelse{\n    msg.payload = JSON.parse(msg.payload)\n    //When first spool change occurs after shift change subtract shift data from current spool lenght.\n    if(previous[\"SPOOLER 1 SELECTION4\"] === true){\n        var lshiftlen = Number(msg.payload[\"SPOOLER 1 LENGTH ACTUAL4\"]);\n        var previouslen = Number(previous[\"SPOOLER 1 LENGTH ACTUAL4\"]);\n        var spoollen = previouslen - lshiftlen;\n        \n        const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${previous[\"NO OF WIRES4\"]}, ${previous[\"NOW_SPOOL14\"]}, ${previous[\"NOW_SPOOL24\"]}, ${spoollen}, ${0}, ${previous[\"WIRE SIZE4\"]}});`\n\n        msg.query = query;\n        node.send([null, msg])\n        previous[\"SPOOLER 1 LENGTH ACTUAL4\"] = 0;\n        msg.payload = previous;\n        node.send([msg, null])\n    }\n    \n    \n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1640,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Spool change data)"
        ]
    },
    {
        "id": "065a33adeb77e865",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Send data to Mindsphere Spooler 2",
        "func": "var previous = msg.spoolchange[\"previous\"];\nconst tableno=33\nconst fun=global.get(\"PolycabGlobalFuncation\")\nconst datetime=fun.globalDate()\nconst tablename = fun.sdTableName(tableno)\n// When shift last data file is not existing, error node shall give the msg with all key:value pair.\nif(msg.hasOwnProperty(\"error\")){\n    // Send summary data to mindsphere for previous value at first spooler change after deployment. without subtraction of previous shift data.\n    msg.payload = previous;\n    node.send([msg, null])\n    \n    \n    if(previous[\"SPOOLER 2 SELECTION4\"] === true){\n        \n         const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${previous[\"NO OF WIRES4\"]}, ${previous[\"NOW_SPOOL14\"]}, ${previous[\"NOW_SPOOL24\"]}, ${0}, ${previous[\"SPOOLER 2 LENGTH ACTUAL4\"]}, ${previous[\"WIRE SIZE4\"]}});`\n\n        msg.query = query;\n    \n    node.send([null, msg])\n    }\n    \n \n}\nelse{\n    msg.payload = JSON.parse(msg.payload)\n    //When first spool change occurs after shift change subtract shift data from current spool lenght.\n    \n    \n    if(previous[\"SPOOLER 2 SELECTION4\"] === true){\n        var lshiftlen1 = Number(msg.payload[\"SPOOLER 2 LENGTH ACTUAL4\"]);\n        var previouslen1 = Number(previous[\"SPOOLER 2 LENGTH ACTUAL4\"]);\n        var spoollen1 = previouslen1 - lshiftlen1;\n        \n        const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"Machine_Status\", \"No_of_Wire\", \"SP1_NOW\", \"SP2_NOW\", \"Spooler1_Actual_length\", \"Spooler2_Actual_length\", \"Wire_Size\")\n\tVALUES ('${datetime}', ${false}, ${previous[\"NO OF WIRES4\"]}, ${previous[\"NOW_SPOOL14\"]}, ${previous[\"NOW_SPOOL24\"]}, ${0}, ${spoollen1}, ${previous[\"WIRE SIZE4\"]}});`\n\n        msg.query = query;\n        node.send([null, msg])\n        previous[\"SPOOLER 2 LENGTH ACTUAL4\"] = 0;\n        msg.payload = previous;\n        node.send([msg, null])\n    }\n    \n    \n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1680,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "To last shift file",
            "To Mindsphere (Spool change data)"
        ]
    },
    {
        "id": "2b1f7e04e8473d5b",
        "type": "function",
        "z": "aa6a51c7aa0d699f",
        "name": "Multi Wire 32-3 Ping",
        "func": "const tableno = 40\nconst fun = global.get(\"PolycabGlobalFuncation\")\nconst datetime = fun.globalDate()\nconst tablename = fun.tableName(tableno)\nif(msg.payload == false){\n       \n    const query = `INSERT INTO ${tablename}(\n\t \"Datetime\", \"ANNEALER\", \"ANNEALER_SELECTION\", \"DOWN_TIME\", \"GEAR_OIL_TEMPERATURE\", \"Line_Speed_Act\", \"Line_Speed_MAX\", \"LUBRICANT_TEMPERATURE\", \"Machine_status\", \n     \"NO_OF_WIRES\", \"REASON_OF_STOP\", \"SPOOLER_1_LAST_SPOOL_LENGHT\", \"SPOOLER_1_LENGTH_ACTUAL\", \"SPOOLER_1_NO_OF_WIRES\", \"SPOOLER_1_SELECTION\", \"SPOOLER_2_LAST_SPOOL_LENGHT\", \"SPOOLER_2_LENGTH_ACTUAL\", \"SPOOLER_2_NO_OF_WIRES\", \"SPOOLER_2_SELECTION\", \"WIRE_SIZE\")\n\tVALUES ( '${datetime}', ${0},\n     ${false}, \n     ${0}, \n     ${0}, \n     ${0}, \n     ${0}, \n     ${0}, \n     ${false}, \n     ${0}, \n     ${7}, \n     ${0}, \n     ${0}, \n     ${0}, \n     ${false}, \n     ${0}, \n     ${0}, \n     ${0}, \n     ${false},  \n     ${0});`\n\n    msg.query = query\n//  const values = [\n//     //MMW32-2\n    \n//     { dataPointId: \"DP-Line_Speed_Act00004\", qualityCode: \"1\", value: \"0\"},//Line Speed Act\n//     { dataPointId: \"DP-Line_Speed_MAX00004\", qualityCode: \"1\", value: \"0\" },//Line Speed max\n//     { dataPointId: \"DP-Machine_status00004\", qualityCode: \"1\", value: \"false\"},//Machine Status\n//     { dataPointId: \"DP-LUBRICANT_TEMPERATURE00004\", qualityCode: \"1\", value: \"0\" },//Lubricant temp\n//     { dataPointId: \"DP-GEAR_OIL_TEMPERATURE00004\", qualityCode: \"1\", value: \"0\" },//Gear Oil temp\n//     { dataPointId: \"DP-SPOOLER_1_SELECTION00004\", qualityCode: \"1\", value: \"false\" },//Spooler 1 Selection\n//     { dataPointId: \"DP-SPOOLER_2_SELECTION00004\", qualityCode: \"1\", value: \"false\" },//spooler 2 Selection\n//     { dataPointId: \"DP-ANNEALER_SELECTION00004\", qualityCode: \"1\", value: \"false\" },//Annealer selection\n//     { dataPointId: \"DP-NO_OF_WIRES00004\", qualityCode: \"1\", value: \"0\" },//No of Wire\n//     { dataPointId: \"DP-WIRE_SIZE00004\", qualityCode: \"1\", value: \"0\" },//Wire Size\n//     { dataPointId: \"DP-SPOOLER_1_LENGTH_ACTUAL00004\", qualityCode: \"1\", value: \"0\" },//Spooler 1 Length\n//     { dataPointId: \"DP-SPOOLER_1_LAST_SPOOL_LENG00004\", qualityCode: \"1\", value: \"0\"},//Spooler 1 last spool length\n//     { dataPointId: \"DP-SPOOLER_2_LENGTH_ACTUAL00004\", qualityCode: \"1\", value: \"0\" },//Spooler 2 length\n//     { dataPointId: \"DP-SPOOLER_2_LAST_SPOOL_LENG00004\", qualityCode: \"1\", value: \"0\" },//spooler 2 last spool length\n//     { dataPointId: \"DP-REASON_OF_STOP00010\", qualityCode: \"1\", value: \"7\" },//Reason of stop\n//     { dataPointId: \"1627109391001\", qualityCode: \"1\", value: \"0\" },//Reason of stop\n//     { dataPointId: \"1637134397360\", qualityCode: \"1\", value: \"0\" },//Reason of stop\n//     { dataPointId: \"1637134403372\", qualityCode: \"1\", value: \"0\" }//Reason of stop\n \n//    ];\n\n    \n//     msg._time = new Date();\n//     msg.payload = values;   \n    return msg;\n    \n}else\n{\n    \n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "4a863d2dc3964ba0",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Multiwire 32 3 Summary",
        "info": "",
        "x": 920,
        "y": 1520,
        "wires": []
    },
    {
        "id": "e3bee470bbd390a5",
        "type": "comment",
        "z": "aa6a51c7aa0d699f",
        "name": "Multiwire 32 3",
        "info": "",
        "x": 890,
        "y": 1320,
        "wires": []
    }
]